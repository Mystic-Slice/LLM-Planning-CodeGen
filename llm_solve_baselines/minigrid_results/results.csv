task,seed,method,model,start_direction,input_prompt,response,reward,done,valid
door_key,0,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
  [""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
  [""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97609375,True,True
door_key,1,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97328125,True,True
door_key,10,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.98453125,True,True
door_key,11,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,12,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.98171875,True,True
door_key,13,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9690625,True,True
door_key,14,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9690625,True,True
door_key,15,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.971875,True,True
door_key,16,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,17,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
  [""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
  [""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9690625,True,True
door_key,18,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,19,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.98171875,True,True
door_key,2,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9690625,True,True
door_key,20,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.97328125,True,True
door_key,21,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""PICKUP"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.983125,True,True
door_key,22,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.97046875,True,True
door_key,23,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.971875,True,True
door_key,24,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE""]
</actions>",0.96765625,True,True
door_key,25,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,26,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97046875,True,True
door_key,27,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,28,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,29,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.9746875,True,True
door_key,3,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9746875,True,True
door_key,30,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.96625,True,True
door_key,31,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.96765625,True,True
door_key,32,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97328125,True,True
door_key,33,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9775,True,True
door_key,34,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97328125,True,True
door_key,35,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,36,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,37,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97609375,True,True
door_key,38,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97609375,True,True
door_key,39,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.971875,True,True
door_key,4,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.983125,True,True
door_key,40,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
  [""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
  [""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.96765625,True,True
door_key,41,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,42,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.971875,True,True
door_key,43,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9859375,True,True
door_key,44,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9690625,True,True
door_key,45,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,46,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
  [""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
  [""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97328125,True,True
door_key,47,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,48,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97046875,True,True
door_key,49,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,5,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.0,False,True
door_key,50,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.971875,True,True
door_key,51,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE""]
</actions>",0.97328125,True,True
door_key,52,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.971875,True,True
door_key,53,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97328125,True,True
door_key,54,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.983125,True,True
door_key,55,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.96765625,True,True
door_key,56,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.983125,True,True
door_key,57,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.98171875,True,True
door_key,58,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.98171875,True,True
door_key,59,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.97609375,True,True
door_key,6,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.98453125,True,True
door_key,60,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9775,True,True
door_key,61,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97609375,True,True
door_key,62,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.971875,True,True
door_key,63,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,64,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9690625,True,True
door_key,65,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.98171875,True,True
door_key,66,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.97609375,True,True
door_key,67,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97328125,True,True
door_key,68,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE""]
</actions>",0.971875,True,True
door_key,69,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.98171875,True,True
door_key,7,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
  [""LEFT"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
  [""LEFT"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,70,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.96625,True,True
door_key,71,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.98171875,True,True
door_key,72,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,73,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9690625,True,True
door_key,74,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,75,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,76,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,77,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.97328125,True,True
door_key,78,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,79,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,8,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.96625,True,True
door_key,80,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.96625,True,True
door_key,81,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9746875,True,True
door_key,82,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""DOOR"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,83,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,84,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>",0.9775,True,True
door_key,85,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.98453125,True,True
door_key,86,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.96765625,True,True
door_key,87,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
  [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
  [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,88,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,89,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,9,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,90,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>",0.97046875,True,True
door_key,91,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.96203125,True,True
door_key,92,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.9746875,True,True
door_key,93,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9690625,True,True
door_key,94,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,95,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,96,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.971875,True,True
door_key,97,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.97609375,True,True
door_key,98,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,99,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97046875,True,True
door_key,0,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the step‐by‐step reasoning:

1. You start at (4,3) facing DOWN. The KEY is at (5,4), so first move down to (5,3):
   - Action: ""MOVE""

2. Now at (5,3) facing DOWN, you need to face the KEY which is to the east. Turning LEFT from DOWN rotates you to face EAST:
   - Action: ""LEFT""

3. With the KEY directly in front (at (5,4)), pick it up without moving into that cell:
   - Action: ""PICKUP""

4. With the KEY in hand, you need to navigate to the door. The door at (2,5) is accessed from the left room by standing in (2,4) and facing east. First, move into the cell (5,4) (which is now empty):
   - Action: ""MOVE""

5. Now at (5,4) facing EAST, you must head north. From EAST, a LEFT turn will face NORTH:
   - Action: ""LEFT""

6. Move north to (4,4):
   - Action: ""MOVE""

7. Continue north to (3,4):
   - Action: ""MOVE""

8. Continue north to (2,4), which is immediately to the left of the door:
   - Action: ""MOVE""

9. At (2,4) you need to face the door which is to your east. Turn RIGHT (from NORTH to EAST):
   - Action: ""RIGHT""

10. With the door directly in front and holding the KEY, unlock it:
    - Action: ""UNLOCK""

11. Now that the door at (2,5) is unlocked, move into the door cell:
    - Action: ""MOVE""

12. Continue moving east into cell (2,6) (now you are in the right room):
    - Action: ""MOVE""

13. The GOAL is at (6,6) which lies to the south. Turn RIGHT from EAST to face SOUTH:
    - Action: ""RIGHT""

14. Move south to (3,6):
    - Action: ""MOVE""

15. Continue south to (4,6):
    - Action: ""MOVE""

16. Continue south to (5,6):
    - Action: ""MOVE""

17. Finally, move south into (6,6) where the GOAL is located:
    - Action: ""MOVE""

This sequence unlocks the door in the left room and guides you safely to the GOAL in the adjacent room.",0.97609375,True,True
door_key,1,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step reasoning:
1. Starting at (6,1) facing UP, we move upward five times to reach (1,1):
   - MOVE to (5,1)
   - MOVE to (4,1)
   - MOVE to (3,1)
   - MOVE to (2,1)
   - MOVE to (1,1)
2. At (1,1) still facing UP, we turn RIGHT to face the cell (1,2) where the KEY lies.
   - RIGHT
3. With the KEY directly ahead at (1,2), we pick it up.
   - PICKUP
4. Now, still at (1,1) and facing RIGHT, we move into the cell (1,2).
   - MOVE
5. With the door immediately in front at (1,3), we unlock it using the KEY.
   - UNLOCK
6. After unlocking, we move into the now-unlocked door cell (1,3).
   - MOVE
7. Continuing in the right direction, we move into the right room by stepping from (1,3) to (1,4), then continue along the row:
   - MOVE (to (1,4))
   - MOVE (to (1,5))
   - MOVE (to (1,6))
8. At (1,6) still facing RIGHT, we turn RIGHT to face DOWN to head toward the GOAL.
   - RIGHT
9. Finally, we move down five times to go from row 1 to row 6, arriving at (6,6) where the GOAL is located:
   - MOVE (to (2,6))
   - MOVE (to (3,6))
   - MOVE (to (4,6))
   - MOVE (to (5,6))
   - MOVE (to (6,6))

This sequence of actions will unlock the door and lead you to the goal.",0.97328125,True,True
door_key,10,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the steps:

1. Starting at (2,4) facing RIGHT, we turn RIGHT so the agent faces DOWN.
2. We MOVE from (2,4) to (3,4).
3. With the agent at (3,4) facing DOWN, the KEY at (4,4) lies directly ahead, so we PICKUP the key.
4. Then, we MOVE into (4,4) (now empty after the key is picked up).
5. We turn LEFT from facing DOWN to face RIGHT.
6. Now with the door (at (4,5)) directly in front, we use UNLOCK (while holding the KEY).
7. We MOVE into the door cell (4,5), now unlocked.
8. Another MOVE takes us to (4,6) in the door’s room.
9. To head toward the GOAL at (6,6), we turn RIGHT so the agent faces DOWN.
10. We MOVE from (4,6) to (5,6).
11. Finally, MOVE from (5,6) to (6,6), which is the GOAL cell.

This sequence ensures the key is picked up and used to unlock the door, then allows reaching the goal in the other room.",0.98453125,True,True
door_key,11,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Starting at (5,1) facing RIGHT, we first turn LEFT to face UP.
2. With the KEY at (4,1) now directly in front, we execute PICKUP.
3. We MOVE from (5,1) to (4,1).
4. Then MOVE again from (4,1) to (3,1) to get adjacent to the DOOR.
5. Now we turn RIGHT (from UP to RIGHT) so that the DOOR at (3,2) is directly ahead.
6. We UNLOCK the DOOR using the KEY.
7. We MOVE into the DOOR cell at (3,2).
8. Then MOVE right through the corridor: first to (3,3),
9. then (3,4),
10. then (3,5),
11. and finally (3,6).
12. At (3,6), we turn RIGHT to face DOWN toward the GOAL.
13. MOVE from (3,6) to (4,6),
14. MOVE from (4,6) to (5,6),
15. And lastly, MOVE from (5,6) to (6,6) where the GOAL is located.

This sequence successfully picks up the key, unlocks the door, and reaches the goal.",0.97890625,True,True
door_key,12,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Here's the step‐by‐step reasoning:

1. Start at (3,1) facing RIGHT.
2. ""MOVE"": Step from (3,1) to (3,2).
3. ""RIGHT"": Turn right to face DOWN.
4. ""MOVE"": From (3,2) move down to (4,2). Now, with the agent facing DOWN, the cell in front [(5,2)] contains the KEY.
5. ""PICKUP"": Pick up the KEY from cell (5,2) without stepping into it.
6. ""MOVE"": Move forward from (4,2) to (5,2) (the cell becomes empty after picking up the KEY).
7. ""LEFT"": Turn left (from facing DOWN to face RIGHT). This will point to cell (5,3).
8. ""MOVE"": Move from (5,2) to (5,3). Here the door lies immediately to the right.
9. ""UNLOCK"": With the KEY in hand, unlock the DOOR in cell (5,4).
10. ""MOVE"": Now step through the unlocked DOOR by moving from (5,3) to (5,4).
11. ""MOVE"": Continue moving to cell (5,5) in the right room.
12. ""MOVE"": Move again to (5,6).
13. ""RIGHT"": Turn right (from facing RIGHT to facing DOWN) to align with the GOAL.
14. ""MOVE"": Finally, move down into (6,6) where the GOAL is located.

This sequence of actions allows you to pick up the key, unlock the door, and reach the goal in the correct order.",0.98171875,True,True
door_key,13,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions> 

Step-by-step explanation:
1. Starting at (6,4) facing UP, we turn LEFT so that we face WEST. Then, we MOVE three times to go from (6,4) to (6,3), then to (6,2) and to (6,1).
2. At (6,1) facing LEFT, we turn RIGHT to face UP. We then MOVE four times from (6,1) to (5,1), then to (4,1), (3,1) and finally to (2,1). Now, the KEY at (1,1) is directly in front of us.
3. We PICKUP the KEY from (1,1) while standing at (2,1) facing UP.
4. With the KEY in hand, we now navigate to the door. From (2,1) facing UP, we turn RIGHT (facing EAST) and MOVE three times to go from (2,1) to (2,2), (2,3), and (2,4). Then, we turn LEFT to face UP and MOVE once to reach (1,4) – the cell adjacent to the DOOR located at (1,5).
5. At (1,4) facing UP, we turn RIGHT (to face EAST) so that the DOOR is directly ahead, and then UNLOCK it.
6. After unlocking the door at (1,5), we MOVE forward; the first MOVE takes us into the door cell (1,5) and the next MOVE brings us into the right room at (1,6).
7. In the right room at (1,6) facing EAST, we now need to reach the GOAL at (6,6). We turn RIGHT to face DOWN and MOVE five times, progressing through rows (2,6), (3,6), (4,6), (5,6) and finally arriving at (6,6), where the GOAL is located.

This sequence of 26 actions achieves the objective.",0.9634375,True,True
door_key,14,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","We first analyze the grid:

• Rows are numbered 0–7 and columns 0–7. The outer boundary is all WALLs.
• In rows 1–6, look at the following key cells:
 – The left “room” (accessible area) is essentially column 1. Notice row2 col1 holds the KEY and row5 col1 holds AGENT.
 – The wall separating rooms is in column 2 except at row1 where there is a DOOR. (So the door at row1 col2 is the only opening to the other room.)
 – The “right” room (the destination area) comprises columns 3–6. The GOAL is at row6 col6.

Starting conditions:
 • The AGENT is at row5 col1 facing DOWN.
 • To open the door (located in row1 col2) the agent must first pick up the KEY (at row2 col1). 
 • To pick up an object, the agent must be directly adjacent to it and facing it.

Our step‐by-step plan is as follows:

1. Since the AGENT faces DOWN but needs to pick up the KEY (which lies upward from row5 col1), we reorient the agent to face UP. (From DOWN, two RIGHT turns will face UP.)
2. Then, the agent will move “up” but stop one cell before the key. In detail, the AGENT goes:
  a. From (5,1) → (4,1)
  b. Then to (3,1) so that the cell in front (i.e. (2,1)) has the KEY.
3. With the agent at (3,1) and facing UP, performing a PICKUP will grab the KEY from the cell (2,1). (Note: This ensures that the AGENT does not “enter” the KEY cell, which is required by the rules.)
4. Next, we head toward the DOOR. A good adjacent cell to approach from is (1,1) because then the door at (1,2) will be directly in front when facing RIGHT.
  a. From (3,1) (still facing UP) move to (2,1) (now empty) and then to (1,1).
5. At (1,1), turning RIGHT (from UP) will let the AGENT face RIGHT so that the DOOR (at (1,2)) is in front.
6. Now, since the agent is holding the KEY and the door is directly ahead, the UNLOCK action will open the door.
7. After unlocking, the agent “moves” into the door cell at (1,2) and then takes another MOVE to step fully into the right room (cell (1,3)).
8. In the right room the path to the GOAL (at (6,6)) is clear. From (1,3) facing RIGHT, the plan is to:
  a. MOVE east until reaching (1,6)
  b. Then turn RIGHT (which from east makes the agent face SOUTH).
  c. MOVE down from row 1 to row 6 in column 6.

Thus, putting all these actions into a list we get:

Step-by-step actions:
1. RIGHT           (Turn from DOWN → LEFT)
2. RIGHT           (Turn from LEFT → UP)
3. MOVE            (Move from (5,1) to (4,1))
4. MOVE            (Move from (4,1) to (3,1))
5. PICKUP          (Pick up the KEY from (2,1))
6. MOVE            (Move from (3,1) to (2,1))
7. MOVE            (Move from (2,1) to (1,1))
8. RIGHT          (Turn from UP to RIGHT)
9. UNLOCK        (Unlock door at (1,2))
10. MOVE        (Step from (1,1) into the door cell at (1,2))
11. MOVE        (Step from (1,2) to (1,3) entering the right room)
12. MOVE        (Move from (1,3) to (1,4))
13. MOVE        (Move from (1,4) to (1,5))
14. MOVE        (Move from (1,5) to (1,6))
15. RIGHT       (Turn from RIGHT to face DOWN)
16. MOVE        (Move from (1,6) to (2,6))
17. MOVE        (Move from (2,6) to (3,6))
18. MOVE        (Move from (3,6) to (4,6))
19. MOVE        (Move from (4,6) to (5,6))
20. MOVE        (Move from (5,6) to (6,6) onto the GOAL)

Thus, our final output in the required XML format is as follows:

<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.971875,True,True
door_key,15,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the plan step by step:

1. You start at (5,3) facing UP. To head toward the KEY at (1,1) (which must be picked up from an adjacent cell), you first go left.
   • ""LEFT"" – now facing LEFT.
2. ""MOVE"" – from (5,3) to (5,2).
3. ""MOVE"" – from (5,2) to (5,1).
4. Now, from (5,1) facing LEFT, you need to go north. Turn upward:
   • ""RIGHT"" – converting LEFT to UP.
5. ""MOVE"" – from (5,1) to (4,1).
6. ""MOVE"" – from (4,1) to (3,1).
7. ""MOVE"" – from (3,1) to (2,1). Now you are adjacent to the key cell (1,1) with the KEY directly in front.
8. ""PICKUP"" – picks up the KEY located at (1,1).

Now that you hold the KEY, you must unlock the DOOR at (2,5) to reach the GOAL situated in the other room.
9. Turn right to face east:
   • ""RIGHT"" – from UP to RIGHT.
10. ""MOVE"" – from (2,1) to (2,2).
11. ""MOVE"" – from (2,2) to (2,3).
12. ""MOVE"" – from (2,3) to (2,4). Now you’re immediately to the left of the door.
13. ""UNLOCK"" – since you are facing the door at (2,5) and hold the KEY.
14. ""MOVE"" – step into the door’s cell at (2,5).
15. ""MOVE"" – from (2,5) to (2,6), entering the room containing the GOAL.

Finally, head from (2,6) to the GOAL at (6,6):
16. ""RIGHT"" – from RIGHT to DOWN.
17. ""MOVE"" – from (2,6) to (3,6).
18. ""MOVE"" – from (3,6) to (4,6).
19. ""MOVE"" – from (4,6) to (5,6).
20. ""MOVE"" – from (5,6) to (6,6) where the GOAL is located.

This complete sequence of 20 actions fulfills the objective.",0.971875,True,True
door_key,16,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Starting at (6,2) facing DOWN, you first need to face UP to approach the KEY located at (3,2). Hence, two ""LEFT"" turns.
2. Then, moving forward twice brings you from (6,2) to (5,2) and then to (4,2). With the KEY at (3,2) directly in front, ""PICKUP"" grabs it.
3. Now, with the key in hand and still at (4,2) but facing UP, turning ""RIGHT"" makes you face RIGHT. One ""MOVE"" from (4,2) to (4,3) positions you adjacent to the DOOR at (4,4).
4. With the DOOR directly in front, ""UNLOCK"" opens it.
5. Next, ""MOVE"" twice takes you through the door from (4,3) to (4,4) and then to (4,5).
6. Facing RIGHT at (4,5), a ""RIGHT"" turn reorients you DOWN. Two ""MOVE"" commands take you to (5,5) then (6,5).
7. Finally, a ""LEFT"" turn faces you RIGHT, and a ""MOVE"" brings you into the GOAL cell at (6,6).

This sequence navigates from your starting room, collects the KEY, unlocks the DOOR, and leads you to the GOAL in the adjacent room.",0.97890625,True,True
door_key,17,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the steps:

1. Starting at (6,2) facing DOWN, we first turn RIGHT so that we face LEFT. Now (6,1) is to our left.
2. We MOVE into (6,1).
3. From (6,1) facing LEFT, we turn RIGHT to face UP. This positions us so that the cell in front, (5,1), contains the KEY.
4. We PICKUP the KEY.
5. With the KEY in hand and remaining at (6,1) facing UP, we MOVE upward: from (6,1) to (5,1), then to (4,1), to (3,1), to (2,1), and finally to (1,1).
6. At (1,1) (facing UP), we turn RIGHT to face the door side.
7. We MOVE rightward into (1,2) and then into (1,3) – the cell immediately adjacent (to the left) of the DOOR cell at (1,4).
8. Now, facing RIGHT with the door directly ahead, we UNLOCK the door.
9. With the door unlocked, we MOVE into the door cell (1,4), and then step into the right room by moving into (1,5) and (1,6).
10. At (1,6) facing RIGHT, we turn RIGHT to face DOWN. Then, we MOVE downward through rows 2–6 in column 6 until we reach the GOAL at (6,6).

Following these actions allows the agent to pick up the KEY, unlock the DOOR, and navigate into the room containing the GOAL.",0.9690625,True,True
door_key,18,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Let's explain the plan step by step:

1. Starting at (1,1) facing LEFT, we first want to pick up the key located immediately below at (2,1). Since the key is directly in front if we face DOWN, we turn LEFT (from LEFT, a left turn rotates us to face DOWN) and then use PICKUP.
2. Now with the key in hand, we navigate from (1,1) downwards to row 5. We do this by moving forward 4 times: from (1,1) → (2,1) → (3,1) → (4,1) → (5,1).
3. Next, we need to unlock the door. The door is at (5,5) and can be unlocked by standing immediately to its left at (5,4) and facing right. At (5,1) (facing DOWN), we turn LEFT so our new direction is RIGHT.
4. We then move east (to the right) three times: (5,1) → (5,2) → (5,3) → (5,4).
5. Standing at (5,4) and facing RIGHT (toward the door at (5,5)), we execute UNLOCK to open the door.
6. Once unlocked, we move into the door cell (5,5) with a MOVE.
7. To reach the goal in the other room, from (5,5) we move right into (5,6), then turn RIGHT (from facing RIGHT, turning RIGHT gives us a DOWN orientation) and finally, a MOVE takes us down into the GOAL cell at (6,6).

This sequence meets all game rules and reaches the goal.",0.97890625,True,True
door_key,19,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain step by step:

1. Initially the agent is at [2][1] facing UP. To reach the KEY at [2][3], the agent first turns RIGHT to face East.
2. A MOVE brings the agent to [2][2].
3. Standing at [2][2] facing RIGHT, the cell directly ahead ([2][3]) contains the KEY, so the agent executes PICKUP.
4. With the KEY in hand, the agent MOVEs forward to [2][3]. Now facing RIGHT, the door at [2][4] is directly ahead.
5. Using the KEY, the agent UNLOCKs the door in front.
6. With the door unlocked, a MOVE brings the agent into the door’s cell at [2][4].
7. Continuing along the corridor in the new room, the agent MOVEs from [2][4] to [2][5].
8. Another MOVE brings the agent to [2][6].
9. At [2][6], the agent turns RIGHT (from EAST to SOUTH) to face downwards toward the GOAL.
10. Then, a series of MOVE actions takes the agent down: from [2][6] to [3][6], then to [4][6], then [5][6], and finally to [6][6] where the GOAL is located.
11. Reaching the GOAL completes the objective.

This sequence unlocks the door and navigates the agent successfully to the GOAL.",0.98171875,True,True
door_key,2,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
  [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:

1. Starting at (3,1) facing UP, we first need to head toward the KEY at (6,3) in the left room. Because the KEY is not meant to be stepped into (since the cell holds an object), we position ourselves so that the KEY is directly in front of us.
   - Actions ""RIGHT"", ""RIGHT"": Turn from UP to DOWN.
   - ""MOVE"" three times: (3,1) → (4,1) → (5,1) → (6,1).
   - ""LEFT"": Turn from DOWN to EAST so that moving forward from (6,1) places us at (6,2).
   - ""MOVE"": From (6,1) to (6,2).
   - ""PICKUP"": With the KEY at (6,3) directly in front, pick it up.
   
2. With the KEY in hand, we navigate to the door at (3,5) that separates the two rooms. To unlock the door, we must stand at cell (3,4) facing EAST.
   - From (6,2) facing EAST, ""LEFT"" turns the agent to face NORTH.
   - ""MOVE"" three times: (6,2) → (5,2) → (4,2) → (3,2).
   - ""RIGHT"": Turn from NORTH to EAST.
   - ""MOVE"" twice: (3,2) → (3,3) → (3,4).
   - ""UNLOCK"": With the door at (3,5) directly in front, unlock it.
   
3. Finally, we cross through the door and head for the GOAL at (6,6) in the second room.
   - ""MOVE"": Step into the door cell (3,5).
   - ""MOVE"": Continue east from (3,5) to (3,6) in the new room.
   - ""RIGHT"": Turn from EAST to face DOWN.
   - ""MOVE"" three times: (3,6) → (4,6) → (5,6) → (6,6), reaching the GOAL.

This sequence satisfies the game’s rules and objectives step by step.",0.9690625,True,True
door_key,20,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Step-by-step explanation:

1. Starting at (2,1) facing DOWN, we need to pick up the KEY at (1,2). To do so, first we must reorient so that we can stand adjacent to the KEY.
   - ""LEFT"" turns us from DOWN to RIGHT.
   - ""LEFT"" again turns us from RIGHT to UP.
2. With the agent now facing UP, ""MOVE"" takes us from (2,1) to (1,1). From here the KEY is one cell to the right.
   - ""RIGHT"" turns our facing from UP to RIGHT.
   - ""PICKUP"" picks the KEY from (1,2) (directly in front).
3. Now holding the key, we must head to the door. The door is located at (5,5) in the other room but can only be unlocked if approached from room1. The accessible adjacent cell in room1 is (5,4). We plan our path from (1,1) to (5,4):
   - ""MOVE"" (facing RIGHT) moves us from (1,1) to (1,2).
   - ""MOVE"" takes us to (1,3).
   - ""MOVE"" takes us to (1,4).
   - ""RIGHT"" (from facing RIGHT) rotates us to face DOWN.
   - Then ""MOVE"" successively brings us: 
       • from (1,4) to (2,4),
       • then to (3,4),
       • then to (4,4),
       • and finally to (5,4).
4. At (5,4) facing DOWN, we need to approach the door at (5,5) from the left. Turning ""LEFT"" from DOWN makes us face RIGHT.
5. With the door now directly in front, ""UNLOCK"" opens it.
6. Next, cross the doorway:
   - ""MOVE"" steps into the door cell (5,5).
   - ""MOVE"" then takes us to (5,6).
7. To reach the GOAL at (6,6), from (5,6) (facing RIGHT), a ""RIGHT"" turn sets our facing to DOWN.
8. Finally, ""MOVE"" brings us from (5,6) to the GOAL at (6,6).

This complete sequence of actions achieves the objective of picking up the key, unlocking the door, and reaching the goal.",0.97328125,True,True
door_key,21,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the steps:

1. Starting at (3,2) facing LEFT, we need to pick up the key at (2,2) (above). We turn RIGHT to face UP.
2. With the key cell directly ahead (at (2,2)), we execute PICKUP.
3. Now holding the key, we need to unlock the door at (3,3) which lies to our right. From facing UP, we turn RIGHT to face RIGHT.
4. We execute UNLOCK with the key in hand. The door is now unlocked.
5. We MOVE into the door cell (3,3), transitioning from the room with the key to the other room.
6. From there, we MOVE again to (3,4) still heading RIGHT.
7. We then turn RIGHT to face DOWN.
8. We MOVE three times (through cells (4,4), (5,4), and (6,4)) heading down.
9. At (6,4) facing DOWN, we need to go right to reach the GOAL at (6,6). We turn LEFT (from DOWN, LEFT becomes RIGHT).
10. Finally, we MOVE twice to reach (6,5) and then (6,6) where the GOAL is located.

This sequence of actions meets the objectives of picking up the key, unlocking the door, and navigating to the goal.",0.98171875,True,True
door_key,22,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Step-by-step explanation:

1. Starting at (5,1) facing RIGHT, we first turn LEFT so that we face UP.
2. We then MOVE four times to go from (5,1) up to (1,1):
  • (5,1) –> (4,1)
  • (4,1) –> (3,1)
  • (3,1) –> (2,1)
  • (2,1) –> (1,1)
3. At (1,1) we turn RIGHT (from UP to RIGHT) so that the cell in front, (1,2), is where the KEY is.
4. We perform PICKUP to get the key (from cell (1,2)).
5. Now with the key in hand and still at (1,1) facing RIGHT, we move toward the door. We choose a path that goes along row 1 and then downward:
  • MOVE from (1,1) to (1,2)
  • MOVE from (1,2) to (1,3)
  • MOVE from (1,3) to (1,4)
6. At (1,4) still facing RIGHT, we turn RIGHT so that our facing becomes DOWN.
7. We then MOVE down four times to go from (1,4) to (5,4):
  • (1,4) –> (2,4)
  • (2,4) –> (3,4)
  • (3,4) –> (4,4)
  • (4,4) –> (5,4)
8. At (5,4) we are facing DOWN but we need to face RIGHT so that the DOOR at (5,5) is directly in front. We turn LEFT (from DOWN, left turn makes us face RIGHT).
9. Now, while at (5,4) facing RIGHT, we UNLOCK the door located at (5,5) (using our key).
10. Once the door is unlocked, we MOVE:
  • MOVE into (5,5) (the door cell, now unlocked)
  • MOVE into (5,6)
11. At (5,6) still facing RIGHT, we turn RIGHT so that we face DOWN (since the GOAL is located at (6,6)).
12. Finally, we MOVE from (5,6) to (6,6) to reach the GOAL.

This sequence of 21 actions achieves the objectives in the provided grid.",0.97046875,True,True
door_key,23,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the step‐by‐step reasoning:

1. You start at [3,1] facing LEFT. To reach the KEY below, you must face DOWN:
   - Action: ""LEFT"" (turn from LEFT to DOWN).

2. Now, from [3,1] facing DOWN, move forward:
   - Action: ""MOVE"" to go from [3,1] to [4,1].

3. From [4,1] facing DOWN, the cell immediately in front ([5,1]) contains the KEY:
   - Action: ""PICKUP"" to acquire the KEY.

4. With the KEY, you need to go to the door at [2,2]. Currently at [4,1] facing DOWN, you must reorient to head upward. From DOWN, two RIGHT turns will have you face UP:
   - Actions: ""RIGHT"", then ""RIGHT"".

5. Now facing UP at [4,1], move forward twice to reach [2,1]:
   - Actions: ""MOVE"" (to [3,1]) and then ""MOVE"" (to [2,1]).

6. At [2,1] facing UP, the door is to your right at [2,2]. Turn RIGHT:
   - Action: ""RIGHT"" (now facing RIGHT).

7. With the door directly ahead and holding the KEY, unlock it:
   - Action: ""UNLOCK"" (door at [2,2] unlocked).

8. Enter the door by moving forward:
   - Action: ""MOVE"" (moving from [2,1] into the door cell [2,2]).

9. Now in the second room, take one more MOVE to get past the door:
   - Action: ""MOVE"" (from [2,2] to [2,3]).

10. To navigate toward the GOAL at [6,6], you need to move down. From [2,3] facing RIGHT, turn RIGHT to face DOWN:
    - Action: ""RIGHT"".

11. Move downward by four steps:
    - Actions: ""MOVE"" (to [3,3]), ""MOVE"" (to [4,3]), ""MOVE"" (to [5,3]), and ""MOVE"" (to [6,3]).

12. At [6,3] facing DOWN, the GOAL is to your right. Turn LEFT to face RIGHT:
    - Action: ""LEFT"".

13. Finally, move three steps to reach the GOAL at [6,6]:
    - Actions: ""MOVE"" (to [6,4]), ""MOVE"" (to [6,5]), and ""MOVE"" (to [6,6]).

Following these 20 actions gets you from the starting position, picking up the KEY, unlocking the DOOR, and finally reaching the GOAL.",0.971875,True,True
door_key,24,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE""]
</actions>

Let's explain briefly:

1. Starting at (6,1) facing LEFT, we first turn RIGHT to face UP.
2. We MOVE twice to go from (6,1) → (5,1) → (4,1). From (4,1) looking UP, the KEY in cell (3,1) is directly ahead.
3. We PICKUP the KEY.
4. We then MOVE upward three times (from (4,1) to (3,1), (3,1) to (2,1), and (2,1) to (1,1)). Now at (1,1) facing UP.
5. A RIGHT turn makes us face RIGHT. We MOVE to (1,2) so that the DOOR at (1,3) is directly in front.
6. We use UNLOCK to unlock the DOOR.
7. We MOVE into the door cell (from (1,2) to (1,3)) and then MOVE to (1,4) in the right compartment.
8. From (1,4) a RIGHT turn makes us face DOWN. We then MOVE down through (2,4), (3,4), (4,4), (5,4), and finally to (6,4).
9. A LEFT turn rotates us from DOWN to face RIGHT.
10. Two final MOVEs take us from (6,4) → (6,5) → (6,6), where the GOAL is located.

This sequence obtains the KEY, unlocks the DOOR, and reaches the GOAL in the other room.",0.97046875,True,True
door_key,25,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (1,1) facing RIGHT, we first need to get near the KEY (located at (4,3)). Instead of stepping onto the KEY cell (which isn’t allowed because objects block movement), we plan to stand in the adjacent cell (4,2) and then pick it up from there.
   - ""MOVE"" → from (1,1) to (1,2) (still facing RIGHT).
   - ""RIGHT"" → turn 90° right from RIGHT to face DOWN.
   - ""MOVE"" → from (1,2) to (2,2).
   - ""MOVE"" → from (2,2) to (3,2).
   - ""MOVE"" → from (3,2) to (4,2).

2. Now with the agent at (4,2) facing DOWN, it must face the KEY (at (4,3), which is to its right). To do so:
   - ""LEFT"" → from DOWN, turning left yields facing RIGHT.
   - ""PICKUP"" → picks the KEY from (4,3) (cell in front).

3. With the KEY in hand, the next step is to unlock the DOOR (located at (3,4)). We choose to approach it from the left — standing at (3,3) facing RIGHT.
   - From (4,2) (currently facing RIGHT after pickup), we need to go up:
     - ""LEFT"" → from RIGHT, turning left gives UP.
     - ""MOVE"" → from (4,2) to (3,2).
     - ""RIGHT"" → from UP, turning right gives RIGHT.
     - ""MOVE"" → from (3,2) to (3,3).
   - ""UNLOCK"" → unlocks the DOOR in the cell directly in front (at (3,4)).

4. After unlocking the door, we pass through it into the right-hand room, then head for the GOAL (located at (6,6)):
   - ""MOVE"" → from (3,3) to (3,4) (through the now open door).
   - ""MOVE"" → from (3,4) to (3,5) (now inside the right room).
   - ""RIGHT"" → from facing RIGHT, turning right gives DOWN.
   - ""MOVE"" → from (3,5) to (4,5).
   - ""MOVE"" → from (4,5) to (5,5).
   - ""MOVE"" → from (5,5) to (6,5).
   - ""LEFT"" → from DOWN, turning left gives RIGHT.
   - ""MOVE"" → from (6,5) to (6,6) where the GOAL is located.

This sequence of moves ensures you pick up the KEY, unlock the DOOR, transition from the starting room to the goal room, and finally arrive at the GOAL.",0.971875,True,True
door_key,26,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the plan step by step:

1. Starting at (4,2) facing RIGHT:
   - ""MOVE"": Advance to (4,3).

2. Now still in the left room, to head toward the KEY at (6,3):
   - ""RIGHT"": Turn from RIGHT to face DOWN.
   - ""MOVE"": Step from (4,3) to (5,3).

3. Positioning to pick up the key (which is in the cell below at (6,3)):
   - ""PICKUP"": With the agent at (5,3) facing DOWN, the key in (6,3) is picked up.

4. With the key in hand, navigate toward a position adjacent to the DOOR at (2,5). A good cell is (2,4) so that when facing RIGHT the door is directly in front.
   - ""LEFT"": From facing DOWN, turn left to face RIGHT.
   - ""MOVE"": Move from (5,3) to (5,4).

5. Now, head north from (5,4) (key held) to get to row 2:
   - ""LEFT"": Turn from RIGHT to face UP (north).
   - ""MOVE"": From (5,4) to (4,4).
   - ""MOVE"": From (4,4) to (3,4).
   - ""MOVE"": From (3,4) to (2,4).

6. Set up to unlock the door:
   - ""RIGHT"": Turn from UP to face RIGHT (so that the door at (2,5) is directly ahead).
   - ""UNLOCK"": Unlock the door using the KEY (the door is at (2,5)).

7. Cross through the door into the right room:
   - ""MOVE"": Move from (2,4) into the door cell (2,5).
   - ""MOVE"": Proceed from (2,5) to (2,6) in the right room.

8. Now navigate to the GOAL at (6,6):
   - ""RIGHT"": From facing RIGHT, turn RIGHT to face DOWN.
   - ""MOVE"": From (2,6) to (3,6).
   - ""MOVE"": From (3,6) to (4,6).
   - ""MOVE"": From (4,6) to (5,6).
   - ""MOVE"": From (5,6) to (6,6) – reaching the GOAL.

This sequence of actions fulfills the objective: picking up the key, unlocking the door, and arriving at the goal.",0.97328125,True,True
door_key,27,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Let's break down the plan step by step:

1. You start at [1,1] facing DOWN. The key is at [5,1], but you cannot enter a cell that already contains an object. Instead, you must stand one cell away (at [4,1]) and then perform a PICKUP.
2. Actions ""MOVE"", ""MOVE"", ""MOVE"" move you from [1,1] to [2,1], then to [3,1], and finally to [4,1].
3. At [4,1] facing DOWN, the cell in front ([5,1]) contains the KEY. You perform ""PICKUP"" to grab it.
4. Now holding the key, you MOVE into the key’s former cell at [5,1].
5. The DOOR is at [5,2] (to your right when you are at [5,1]). Since you are facing DOWN, turning ""LEFT"" from DOWN reorients you EAST.
6. With the door now directly in front, you perform ""UNLOCK"" to open it.
7. Now, you ""MOVE"" into the door cell ([5,2]). From here you are in the room that leads to the GOAL.
8. You then use successive ""MOVE"" actions to travel east along row 5 from [5,2] to [5,3], then [5,4], then [5,5], and finally to [5,6].
9. Finally, since the GOAL is at [6,6] (directly south of [5,6]), you execute a ""RIGHT"" turn from your current eastward direction (as turning right while facing east makes you face south), and then ""MOVE"" to step onto the GOAL cell.

This sequence allows you to pick up the key, unlock the door, navigate through the door and finally reach the goal.",0.9803125,True,True
door_key,28,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>

Step-by-step reasoning:
1. Starting at [1,3] facing UP, we first need to head downward to get adjacent to the cell holding the KEY at [6,3]. To face DOWN from UP, we turn LEFT twice.
2. We then MOVE four times from [1,3] → [2,3] → [3,3] → [4,3] → [5,3]. Now, with the agent at [5,3] facing DOWN, the KEY is exactly one cell ahead at [6,3].
3. We PICKUP the KEY.
4. To unlock the DOOR (located at [5,4]) we need to face it. Standing at [5,3] (facing DOWN), we turn LEFT to face RIGHT.
5. The cell in front ([5,4]) now contains the DOOR. We execute UNLOCK.
6. After unlocking, we MOVE into the door cell [5,4].
7. We then MOVE to [5,5] in the right room.
8. The GOAL is at [6,6]. From [5,5] (facing RIGHT), we turn RIGHT to face DOWN and MOVE to [6,5].
9. Finally, from [6,5] (facing DOWN), we turn LEFT to face RIGHT and MOVE into the GOAL cell at [6,6].

This sequence completes the game objectives.",0.97890625,True,True
door_key,29,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step reasoning:
1. Starting at (1,2) facing LEFT, the first MOVE takes you into (1,1).
2. TURN LEFT while facing LEFT rotates you to face DOWN.
3. A MOVE then brings you to (2,1).
4. Another MOVE takes you to (3,1). Now the KEY at (4,1) is directly in front.
5. With a PICKUP action, you grab the KEY from (4,1).
6. MOVE from (3,1) (facing DOWN) takes you into (4,1).
7. To navigate toward the door, TURN LEFT (while facing DOWN) will make you face RIGHT.
8.–10. Three consecutive MOVE actions take you rightwards: from (4,1) to (4,2), then to (4,3), and then to (4,4). Now the DOOR at (4,5) is immediately ahead.
11. UNLOCK the door using the KEY you are carrying.
12. MOVE from (4,4) to enter the door cell at (4,5).
13. MOVE while still facing RIGHT moves you to (4,6).
14. Since facing RIGHT but needing to go down toward the GOAL, a RIGHT turn changes your direction to DOWN.
15. MOVE from (4,6) down to (5,6).
16. Finally, MOVE from (5,6) down into (6,6), where the GOAL is located.

Following these actions will have you unlock the DOOR and reach the GOAL successfully.",0.9775,True,True
door_key,3,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions> 

Step-by-step explanation:
1. Starting at (1,1) facing UP, the agent turns RIGHT to face EAST.
2. A MOVE brings the agent to (1,2) while facing EAST.
3. To head downward (toward the KEY at (4,2)), the agent turns RIGHT; now facing SOUTH.
4. A MOVE takes the agent from (1,2) to (2,2).
5. Another MOVE brings the agent to (3,2). Now, the KEY is directly in front at (4,2).
6. The agent executes PICKUP to collect the KEY.
7. With the KEY in hand, the agent needs to reach the door at (5,5). From (3,2) (facing SOUTH), a LEFT turn reorients the agent EAST.
8. MOVE to (3,3).
9. MOVE to (3,4).
10. To head south towards the door, the agent turns RIGHT (from EAST to SOUTH).
11. MOVE to (4,4).
12. MOVE to (5,4); this positions the agent immediately west of the door.
13. A LEFT turn (from SOUTH to EAST) makes the door (at (5,5)) directly in front.
14. The agent then uses UNLOCK (with the KEY) to unlock the door.
15. MOVE into the door cell at (5,5).
16. In the right room, a MOVE from (5,5) to (5,6) along the EAST brings the agent closer to the GOAL.
17. The agent turns RIGHT (from EAST to SOUTH) to face the GOAL.
18. Finally, a MOVE from (5,6) to (6,6) places the agent on the GOAL cell, completing the objective.
",0.9746875,True,True
door_key,30,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the step‐by‐step explanation:

1. Starting at [1,1] facing UP, we must first go pick up the KEY at [5,1]. Since the KEY is directly below [4,1], we first turn so we face DOWN. Two LEFT turns (from UP, LEFT → facing LEFT; then LEFT → facing DOWN) accomplish this.
2. We then MOVE three times: from [1,1] → [2,1] → [3,1] → [4,1]. Now the KEY is immediately in front (cell [5,1]) so we use PICKUP.
3. After picking up the KEY, we need to return to the door at [1,2]. From our current location ([4,1] facing DOWN), we want to head UP. Two LEFT turns will change our orientation from DOWN to east then north.
4. We then MOVE three times upward: from [4,1] → [3,1] → [2,1] → [1,1].
5. Now, to face the DOOR (which is to the east at [1,2]), we turn RIGHT (from UP to EAST) and then perform UNLOCK (the door is directly ahead, and we are carrying the KEY).
6. Next, we cross the doorway: a MOVE brings us from [1,1] to the door cell [1,2] (which is now unlocked) and another MOVE takes us into room2 at [1,3].
7. In room2, the GOAL is at [6,6]. From [1,3] facing EAST, we must head to the lower right. First, a RIGHT turn points us South.
8. We then MOVE five times down from [1,3] to reach [6,3].
9. From there, a LEFT turn (from South to EAST) aligns us with the GOAL. Finally, three MOVEs bring us from [6,3] → [6,4] → [6,5] → [6,6] (where the GOAL is located).

This list of 25 actions achieves the objective.",0.96484375,True,True
door_key,31,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>",0.9746875,True,True
door_key,32,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step reasoning:

1. You start at [3,2] facing DOWN. From here, the key is located at [5,1] (in your room).  
   • First, move forward twice:
  - ""MOVE"": from [3,2] to [4,2].
  - ""MOVE"": from [4,2] to [5,2].

2. The key sits at [5,1], which is directly to your WEST when at [5,2]. Since you’re currently facing DOWN, you need to turn RIGHT (facing west when starting from DOWN, because when facing south, a right turn points west).  
   • ""RIGHT"": now facing WEST.
   • ""PICKUP"": picks up the key from the cell directly in front ([5,1]).

3. With the key in hand, your next objective is the DOOR at [2,5]. To unlock it you must be adjacent and facing it. The ideal approach is to go to cell [2,4] and face EAST so that the door at [2,5] is directly ahead.  
   • From [5,2] (still holding the key and currently facing WEST), turn to face NORTH. When facing WEST, a ""RIGHT"" turn yields NORTH.
  - ""RIGHT"": now facing NORTH.
  - ""MOVE"": from [5,2] to [4,2].
  - ""MOVE"": from [4,2] to [3,2].
  - ""MOVE"": from [3,2] to [2,2].

4. Now at [2,2] and facing NORTH, you must head east. Turning right from NORTH gives you EAST.
  - ""RIGHT"": now facing EAST.
  - ""MOVE"": from [2,2] to [2,3].
  - ""MOVE"": from [2,3] to [2,4].

5. You are now positioned at [2,4] facing EAST, with the DOOR ([2,5]) directly in front. Use the key to unlock the door.
  - ""UNLOCK"": unlocks the door at [2,5].

6. Proceed through the door.  
  - ""MOVE"": steps into the door cell at [2,5].  
  - ""MOVE"": from [2,5] to [2,6] (entering the adjacent room where the goal is located).

7. In the new room, the GOAL is at [6,6]. From your current position [2,6], face SOUTH. From EAST, a ""RIGHT"" turn makes you face SOUTH.
  - ""RIGHT"": now facing SOUTH.
  Then move downward:
  - ""MOVE"": from [2,6] to [3,6].
  - ""MOVE"": from [3,6] to [4,6].
  - ""MOVE"": from [4,6] to [5,6].
  - ""MOVE"": from [5,6] to [6,6] (goal reached).

This sequence completes the objective.",0.97328125,True,True
door_key,33,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Let's explain the plan step by step:

1. Starting at (3,2) facing LEFT, we first need to go to the KEY at (2,4). To head east we must reorient. We do ""RIGHT"", ""RIGHT"" so that we face EAST.
2. We ""MOVE"" from (3,2) to (3,3). Then we turn ""LEFT"" (from EAST, that makes us face NORTH) and ""MOVE"" to (2,3).
3. Now the KEY is located immediately to our EAST (cell (2,4)), so we ""RIGHT"" to face EAST and then ""PICKUP"" the key.
4. With the key in hand, our next goal is to head for the DOOR at (5,5), which connects the two rooms. We plan a route from (2,3) in our current room to the cell (5,4) (which is immediately left of the door). From our current facing EAST, we ""RIGHT"" to face SOUTH.
5. We then ""MOVE"" successively to reach (3,3), (4,3), and then (5,3).
6. From (5,3) we need to go east to (5,4). A ""LEFT"" turn (from SOUTH) makes us face EAST, then ""MOVE"" takes us to (5,4).
7. Standing at (5,4) facing EAST (i.e. towards the door in cell (5,5)), we ""UNLOCK"" the door using the key.
8. With the door unlocked, a ""MOVE"" carries us into the door cell (5,5). Now, we are in the second room.
9. Finally, from (5,5) still facing EAST we ""MOVE"" into (5,6). Then a ""RIGHT"" turn (from EAST to SOUTH) allows a final ""MOVE"" from (5,6) to (6,6), where the GOAL is located.

This sequence of 18 actions fulfills the objective.",0.9746875,True,True
door_key,34,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:

1. Starting at (2,1) facing UP, we must first get to the KEY at (5,1) without stepping directly onto the KEY’s cell. Since the KEY is located one cell below the cell (4,1), we plan to stand at (4,1) facing DOWN.

2. At (2,1) (facing UP), we turn RIGHT then RIGHT to face DOWN. (Actions: ""RIGHT"", ""RIGHT"")

3. MOVE forward twice along column 1:
   - First MOVE: from (2,1) to (3,1)
   - Second MOVE: from (3,1) to (4,1)
   (Actions: ""MOVE"", ""MOVE"")

4. Now standing at (4,1) facing DOWN, the cell directly in front (cell (5,1)) contains the KEY. We perform ""PICKUP"" to get the key.

5. Next, we must unlock the DOOR at (3,2). The door is accessible from (3,1), with the door to the right of that cell. So we need to return from (4,1) to (3,1) and face RIGHT.
   - While at (4,1) facing DOWN, we turn LEFT then LEFT to effectively face UP.
   (Actions: ""LEFT"", ""LEFT"")
   - MOVE forward from (4,1) to (3,1).
   (Action: ""MOVE"")
   - Now, from (3,1) facing UP, we turn RIGHT to face RIGHT.
   (Action: ""RIGHT"")

6. With the KEY in hand and now at (3,1) facing RIGHT (with the DOOR at (3,2) directly ahead), we perform ""UNLOCK"" to unlock the door.
   (Action: ""UNLOCK"")

7. After unlocking, we need to actually move through the open door into the next room. From (3,1) facing RIGHT, we MOVE:
   - MOVE into (3,2) (the door cell)
   - Then MOVE consecutively from (3,2) to (3,3), (3,3) to (3,4), (3,4) to (3,5), and (3,5) to (3,6). (Actions: five ""MOVE"" commands)

8. At (3,6) still facing RIGHT, we now need to head toward the GOAL at (6,6) which is directly below. We turn RIGHT to face DOWN.
   (Action: ""RIGHT"")
   
9. Finally, we MOVE three times downward:
   - MOVE from (3,6) to (4,6)
   - MOVE from (4,6) to (5,6)
   - MOVE from (5,6) to (6,6)
   (Actions: ""MOVE"", ""MOVE"", ""MOVE"")

This complete sequence ensures the KEY is picked up, the DOOR is unlocked, and the agent reaches the GOAL.",0.97328125,True,True
door_key,35,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the reasoning step by step:

1. Starting at (1,1) facing UP, the KEY is located at (2,1) (directly below). To have the KEY in your front, you must face DOWN. You can do that by turning 90° RIGHT twice.
2. With the orientation now DOWN, execute PICKUP so that the KEY in cell (2,1) is acquired.
3. Now, the DOOR is located at (1,2) to your east. To face east from your current DOWN orientation, turn 90° LEFT.
4. With the KEY and facing EAST, perform UNLOCK to unlock the DOOR (located at (1,2), directly in front).
5. Next, MOVE so you step into the door cell. Now you’re effectively at the connecting door cell.
6. To ensure you are safely into the second room (the room that contains the GOAL), MOVE again from the door cell into the room beyond (from (1,2) to (1,3)).
7. The GOAL is at (6,6) further inside the second room. From (1,3) (still facing EAST), turn RIGHT to face DOWN.
8. Now, MOVE 5 times to go down from (1,3) to (6,3).
9. At (6,3), you need to head east to reach (6,6). From the current SOUTH-facing orientation, turn LEFT to be facing EAST.
10. Finally, MOVE 3 times to go right from (6,3) to (6,6) and step onto the GOAL.

This sequence of 17 actions achieves the objective.",0.97609375,True,True
door_key,36,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Here's the step‐by‐step reasoning:

1. You start at (3,1) facing UP. The key is located at (3,2) (directly to the right). So first, turn RIGHT to face EAST.
2. With the key cell now directly in front, use PICKUP to grab the KEY.
3. Now holding the key, you must navigate to the DOOR at (5,3). The best route is to go down and then right. From (3,1) (still holding the key and now facing EAST), turn RIGHT to face SOUTH.
4. MOVE: from (3,1) → (4,1)
5. MOVE: from (4,1) → (5,1)
6. At (5,1) facing SOUTH, turn LEFT to face EAST.
7. MOVE: from (5,1) → (5,2) (now adjacent to the DOOR cell (5,3))
8. Use UNLOCK to unlock the DOOR (which is directly in front, to your east) since you are holding the KEY.
9. Now MOVE into the door cell: from (5,2) → (5,3). The door is now unlocked.
10. Continue moving EAST: MOVE from (5,3) → (5,4)
11. MOVE: from (5,4) → (5,5)
12. MOVE: from (5,5) → (5,6)
13. At (5,6) still facing EAST, turn RIGHT to face SOUTH (because the GOAL is directly below).
14. Finally, MOVE: from (5,6) → (6,6) where the GOAL is located.

This sequence successfully picks up the key, unlocks the door, and leads you to the goal.",0.9803125,True,True
door_key,37,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:

1. Starting at (5,1) facing LEFT, we first turn RIGHT so that we face UP.
2. We then MOVE upward from (5,1) to (4,1), and again to (3,1). Now the cell in front (at (2,1)) holds the KEY.
3. We use PICKUP to grab the KEY from the cell (2,1).
4. Now still at (3,1) facing UP, we MOVE forward into (2,1) (which is now free because the KEY was picked up).
5. To approach the DOOR which is at (2,2), we turn RIGHT (from UP to RIGHT).
6. With the KEY in hand and the DOOR directly ahead, we use UNLOCK.
7. Then we MOVE forward into the door cell at (2,2).
8. Now in the right-hand (goal) room, we MOVE right successively through cells (2,3), (2,4), (2,5), and finally (2,6).
9. At (2,6) facing RIGHT, we need to head downward toward the GOAL. We turn RIGHT to face DOWN.
10. Finally, we MOVE downward from (2,6) through (3,6), (4,6), (5,6) and arrive at (6,6), where the GOAL is located.

This sequence of actions unlocks the door and navigates through the two separate rooms to complete the game.",0.0,False,True
door_key,38,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions> 

Let's explain our reasoning step by step:

1. Starting at [3,1] facing LEFT, we want to get the key located at [1,1]. The key is directly north of [2,1]. So, we first turn RIGHT from LEFT to face UP.
2. With the agent now facing UP, a MOVE takes us from [3,1] to [2,1]. Standing here, the cell in front ([1,1]) has the KEY.
3. We then PICKUP the key from [1,1] (the cell directly ahead of our [2,1] position).
4. With the key in hand, we still need to be adjacent to the door to unlock it. The door is located at [1,2] so one of its adjacent cells is [1,1]. We MOVE one step (UP) from [2,1] into [1,1].
5. Now at [1,1] and holding the key, we need to face the door which is to our RIGHT. So we turn RIGHT.
6. With the door now directly in front, we UNLOCK it.
7. Now that the door (at [1,2]) is unlocked, we MOVE into that cell.
8–11. From [1,2] (facing RIGHT) we continue moving east by doing four successive MOVEs to reach [1,6]. (Moves: from [1,2] → [1,3], then to [1,4], [1,5], and finally [1,6].)
12. Next, we must head to the goal located at [6,6]. At [1,6] we turn RIGHT to face DOWN.
13–17. Finally, we move down five times (from [1,6] → [2,6] → [3,6] → [4,6] → [5,6] → [6,6]). Arriving at [6,6], where the GOAL is located, the task is complete.

This sequence of actions follows the rules and leads the agent to pick up the KEY, unlock the DOOR, and finally reach the GOAL.",0.97609375,True,True
door_key,39,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (1,2) facing LEFT. Since the KEY is at (6,1) and must be picked up from an adjacent cell, we choose to position ourselves at (5,1) facing down so that the cell in front (6,1) holds the KEY.
   - ""MOVE"": move from (1,2) to (1,1) (facing LEFT).
   - ""LEFT"": from LEFT, turning LEFT faces DOWN.
   - ""MOVE"": from (1,1) to (2,1).
   - ""MOVE"": from (2,1) to (3,1).
   - ""MOVE"": from (3,1) to (4,1).
   - ""MOVE"": from (4,1) to (5,1).
   - ""PICKUP"": with the agent at (5,1) facing DOWN, the cell (6,1) contains the KEY, so pick it up.

2. Next, we must unlock the DOOR at (4,5), but to do that we must stand in the cell adjacent to it. The accessible adjacent cell in the left room is (4,4); from (4,4) if we face RIGHT, the door at (4,5) will be directly in front.
   - From (5,1) facing DOWN, we need to move to (4,1). To do that we must reverse direction:
     - ""RIGHT"", ""RIGHT"": a 180° turn (facing DOWN to UP).
     - ""MOVE"": move from (5,1) to (4,1) (now facing UP).
   - Now at (4,1) facing UP, turn to face RIGHT:
     - ""RIGHT"": now facing RIGHT.
   - Move right in row 4:
     - ""MOVE"": from (4,1) to (4,2).
     - ""MOVE"": from (4,2) to (4,3).
     - ""MOVE"": from (4,3) to (4,4).
   - From (4,4) facing RIGHT, the door at (4,5) is directly ahead:
     - ""UNLOCK"": unlock the door (provided you are holding the KEY).
     - ""MOVE"": step into the door cell at (4,5).

3. Now in the right room (having passed through the unlocked door), the GOAL is at (6,6). From (4,5) facing RIGHT, plan a path:
   - ""MOVE"": from (4,5) to (4,6) (still facing RIGHT).
   - The next desired cell is (5,6) which is downward from (4,6), so adjust orientation:
     - ""RIGHT"": turn from RIGHT to face DOWN.
   - ""MOVE"": from (4,6) to (5,6) (facing DOWN).
   - ""MOVE"": from (5,6) to (6,6) (facing DOWN), landing on the GOAL.

These steps yield the complete action list above.",0.971875,True,True
door_key,4,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>

Step-by-step reasoning:
1. Starting at [2,2] facing DOWN, the agent does ""MOVE"" to go to [3,2].
2. Another ""MOVE"" brings the agent from [3,2] to [4,2].
3. At [4,2] still facing DOWN, a ""LEFT"" turn reorients the agent to face EAST (toward the KEY at [4,3]).
4. ""PICKUP"" is used to pick the KEY, which is directly to the EAST of [4,2] (located at [4,3]).
5. With the KEY now held, ""MOVE"" takes the agent into the [4,3] cell.
6. Still facing EAST, ""UNLOCK"" unlocks the DOOR at [4,4] (directly ahead).
7. ""MOVE"" moves the agent into the door cell at [4,4].
8. Another ""MOVE"" from [4,4] brings the agent further EAST to [4,5], entering the room containing the GOAL.
9. ""RIGHT"" turns the agent from facing EAST to facing SOUTH.
10. ""MOVE"" goes SOUTH from [4,5] to [5,5].
11. A subsequent ""MOVE"" takes the agent from [5,5] to [6,5].
12. ""LEFT"" adjusts orientation from SOUTH to EAST.
13. Finally, ""MOVE"" brings the agent from [6,5] to [6,6] where the GOAL is located.

This sequence completes the objective: obtaining the KEY, unlocking the DOOR, and reaching the GOAL.",0.98171875,True,True
door_key,40,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain step by step:

1. Starting at (3,2) facing UP, we want to pick up the KEY at (5,3) without moving into its cell. So we first turn right twice to face DOWN, then move two steps to get to (5,2).  
   - Actions: ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"".

2. At (5,2) facing DOWN, we turn LEFT so that we face RIGHT. Now the KEY is directly in front (at (5,3)), so we use ""PICKUP"" to collect it.  
   - Actions: ""LEFT"", ""PICKUP"".

3. With the key in hand, we now need to get in position to unlock the DOOR at (1,4). To interact with the door, we plan to stand at (1,3) (which is immediately to the left of the door) and face east.  
   - From (5,2) (facing RIGHT), we turn LEFT to face UP.  
   - Then we ""MOVE"" four times: going from (5,2) to (4,2), then to (3,2), (2,2), and finally to (1,2).  
   - At (1,2) facing UP, we turn RIGHT to face east.  
   - One ""MOVE"" brings us to (1,3).  
   - Now, with the DOOR directly in front at (1,4), we ""UNLOCK"" it (since we hold the KEY) and then ""MOVE"" into the door cell.  
   - Actions: ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"".

4. Now inside the other room (at (1,4) facing east), we plan our path to the GOAL at (6,6). We first move east twice to reach (1,6).  
   - Then, turning RIGHT from east sets our direction to DOWN.  
   - Finally, we ""MOVE"" step by step: (1,6)⇒(2,6)⇒(3,6)⇒(4,6)⇒(5,6)⇒(6,6), where the GOAL is located.  
   - Actions: ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"".

The full sequence of 23 actions achieves the plan.",0.96765625,True,True
door_key,41,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions> 

Step-by-step explanation:
1. Starting at (6,3) facing UP, we move three times:
   - 1st MOVE: from (6,3) to (5,3)
   - 2nd MOVE: from (5,3) to (4,3)
   - 3rd MOVE: from (4,3) to (3,3)
2. Now at (3,3) facing UP, the key is immediately ahead (at (2,3)), so we PICKUP the KEY.
3. To approach the door for unlocking, we first need to reposition. From (3,3) facing UP, we want to go down to (4,3) and then face RIGHT (so that the door at (4,4) is directly in front).
   - Two LEFT turns convert UP → LEFT → DOWN.
   - Then a MOVE to go from (3,3) to (4,3).
   - One LEFT turn from DOWN turns us to face RIGHT.
4. Now at (4,3) facing RIGHT, the door at (4,4) is in front, so we use UNLOCK (while holding the key).
5. After unlocking, we MOVE into the door cell (4,4) and then traverse the right room toward the GOAL:
   - Move from (4,4) to (4,5)
   - Move from (4,5) to (4,6)
   - Then a RIGHT turn to face DOWN.
   - A MOVE from (4,6) to (5,6)
   - Finally, a MOVE from (5,6) to (6,6) reaching the GOAL.
  
This sequence of 15 actions successfully completes the objective.",0.97890625,True,True
door_key,42,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the plan step by step:

1. Starting at (5,1) facing DOWN, we need to get to the KEY at (1,1) which is located in the cell directly above (when reached from (2,1)). Since we’re facing DOWN, we turn around by doing ""LEFT"", ""LEFT"" (which makes us face UP).

2. We then move forward:
   - ""MOVE"": from (5,1) to (4,1)
   - ""MOVE"": from (4,1) to (3,1)
   - ""MOVE"": from (3,1) to (2,1)
   
3. With the KEY at (1,1) now directly in front of us (from (2,1) facing UP), we ""PICKUP"" the KEY.

4. Next, we need to reach the door located at (3,2) from the left side (adjacent cell (3,1)). Our agent is at (2,1) still facing UP, but we must move downward. To do this, we reorient by executing ""RIGHT"", ""RIGHT"" to face DOWN, then ""MOVE"" to go from (2,1) to (3,1).

5. At (3,1) facing DOWN, we want to approach the door which is east so we ""LEFT"" turn (from DOWN to EAST).

6. Now, the door at (3,2) is directly in front. We ""UNLOCK"" it (since we’re holding the KEY).

7. We then move into the newly unlocked door cell by ""MOVE"" (from (3,1) to (3,2)).

8. Once through the door, our goal (GOAL) is at (6,6). A clear path in the second room is to move east first along row 3:
   - ""MOVE"": (3,2) to (3,3)
   - ""MOVE"": (3,3) to (3,4)
   - ""MOVE"": (3,4) to (3,5)
   - ""MOVE"": (3,5) to (3,6)
   
9. At (3,6) and facing EAST, we then turn ""RIGHT"" to face SOUTH.

10. Finally, we move south down the column:
    - ""MOVE"": from (3,6) to (4,6)
    - ""MOVE"": from (4,6) to (5,6)
    - ""MOVE"": from (5,6) to (6,6) which is the GOAL.
    
This sequence gets the agent from its starting position, collects the KEY, unlocks the DOOR, and navigates to the GOAL.",0.971875,True,True
door_key,43,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Start at [3][2] facing RIGHT. The cell in front ([3][3]) contains the KEY, so we execute ""PICKUP"".
2. After picking up the KEY, move forward into that cell with ""MOVE"".
3. Now facing RIGHT at [3][3] with the KEY, the door is directly in front at [3][4]. Use ""UNLOCK"" to unlock the DOOR.
4. With the door unlocked, move forward to enter it by executing ""MOVE"" (now at [3][4]).
5. Continue moving right with ""MOVE"" to step into the next cell at [3][5].
6. Move right again with ""MOVE"" into cell [3][6].
7. At [3][6] still facing RIGHT, turn ""RIGHT"" to face DOWN toward the GOAL.
8. Move ""MOVE"" down to [4][6].
9. ""MOVE"" down to [5][6].
10. Finally, ""MOVE"" down into the cell [6][6] where the GOAL is located.

This sequence of actions successfully collects the KEY, unlocks the DOOR, and navigates through the unlocked door to reach the GOAL.",0.9859375,True,True
door_key,44,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the reasoning step by step:

1. From the starting cell at (5,1) facing DOWN we first turn LEFT so that we face RIGHT.  
2. We MOVE twice to reach (5,3) (moving from (5,1)→(5,2) then (5,2)→(5,3)).  
3. Then we turn LEFT to face UP. From (5,3), the cell directly in front, (4,3), contains the KEY.  
4. WeIssue PICKUP to grab the key. (Note: We never step into the KEY cell, as per the rules you must pick it up from an adjacent cell.)  
5. After securing the key, we head to the DOOR at (1,4). We do so by moving UP from (5,3): first MOVE from (5,3)→(4,3), then from (4,3)→(3,3), then (3,3)→(2,3), and finally (2,3)→(1,3).  
6. At (1,3) we are adjacent to the door (the DOOR is at (1,4)). Since we are facing UP, we turn RIGHT to face the door.  
7. We then use UNLOCK to open the door while holding the key.  
8. Next, we MOVE into the door cell (from (1,3)→(1,4)).  
9. Now that we are in the second room, we plan the route to the GOAL located at (6,6). From (1,4) we MOVE right twice to position (1,6).  
10. Facing RIGHT, we turn RIGHT to face DOWN.  
11. Finally, we MOVE down step-by-step from row1 to row6 in column6: going from (1,6)→(2,6), (2,6)→(3,6), (3,6)→(4,6), (4,6)→(5,6) and then (5,6)→(6,6) where the GOAL is located.

This sequence of actions correctly navigates the agent from the starting room, picks up the key, unlocks the door, and reaches the GOAL in the other room.",0.971875,True,True
door_key,45,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the reasoning:

1. The agent starts at [5,2] facing LEFT. The KEY is at [5,3] to the right.  
   • Two RIGHT turns (LEFT → UP then UP → RIGHT) make the agent face the KEY.  
   • Then, PICKUP picks up the KEY from cell [5,3].

2. With the KEY in hand, the agent must go to the DOOR at [3,5]. The door is reachable from the left room by approaching it from cell [3,4].  
   • From [5,2] (facing RIGHT), two MOVE actions bring the agent to [5,3] and then [5,4].  
   • From [5,4] (facing RIGHT), a LEFT turn makes the agent face UP.  
   • Two MOVE actions then take the agent upward to [4,4] and then [3,4].

3. Now at [3,4], with the door directly to the right at [3,5]:  
   • A RIGHT turn (from UP) makes the agent face RIGHT.  
   • The UNLOCK action unlocks the door (since the KEY is held).  
   • A MOVE action brings the agent into the door’s cell at [3,5].

4. Now in the door room, the goal is at [6,6].  
   • First, a MOVE action (while facing RIGHT) moves the agent to [3,6].  
   • A RIGHT turn (from RIGHT) turns the agent to face DOWN.  
   • Three MOVE actions then take the agent down from [3,6] → [4,6], then to [5,6], and finally to [6,6] where the GOAL is located.

Following these steps produces the complete action list above.",0.9775,True,True
door_key,46,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Starting at [1,3] facing RIGHT, the first two ""LEFT"" actions reorient you to face LEFT.
2. ""MOVE"" takes you from [1,3] to [1,2]. With the KEY located at [1,1] (directly in front when facing left), ""PICKUP"" collects it.
3. From [1,2] with the KEY and facing LEFT, a ""LEFT"" turn rotates you to face DOWN.
4. Two ""MOVE"" actions then let you progress down from [1,2] to [2,2] and finally to [3,2].
5. A ""LEFT"" turn from facing DOWN sets your direction to RIGHT. 
6. ""MOVE"" brings you from [3,2] to [3,3] so that the DOOR at [3,4] is directly ahead.
7. ""UNLOCK"" unlocks the door using the KEY.
8. ""MOVE"" moves you into the now-unlocked door cell at [3,4].
9. In room2, from [3,4] facing RIGHT, two ""MOVE"" actions take you to [3,5] and then [3,6].
10. A ""RIGHT"" turn reorients your facing from RIGHT to DOWN.
11. Three ""MOVE"" actions move you down from [3,6] to [4,6], then [5,6], and finally to [6,6] where the GOAL is located.

This complete sequence ensures you pick up the key, unlock the door, and reach the goal.",0.97609375,True,True
door_key,47,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the reasoning step by step:

1. Starting at row4, col1 and facing UP, the agent ""MOVE""s into row3, col1. Now the KEY is directly in front, at row2, col1.
2. The ""PICKUP"" action retrieves the KEY from row2, col1.
3. With the KEY in hand and still at row3, col1 facing UP, the agent turns ""RIGHT"" to face east so that the DOOR (located at row3, col2) is directly ahead.
4. The ""UNLOCK"" action unlocks the DOOR.
5. The agent then ""MOVE""s into the door cell at row3, col2.
6. From there, continuing ""MOVE"" while facing RIGHT brings the agent to row3, col3.
7. To enter the next room, the agent turns ""RIGHT"" (from RIGHT, turning right yields DOWN).
8. A ""MOVE"" takes the agent to row4, col3.
9. Another ""MOVE"" puts the agent in row5, col3.
10. A subsequent ""MOVE"" takes the agent into row6, col3.
11. Now at row6, col3 facing DOWN, the agent turns ""LEFT"" (which orients the agent to face RIGHT).
12. Finally, three consecutive ""MOVE""s take the agent from row6, col3 to row6, col4, then row6, col5, and finally into row6, col6 where the GOAL is located.

By following this sequence, the agent successfully picks up the KEY, unlocks the DOOR between rooms, and reaches the GOAL.",0.9803125,True,True
door_key,48,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the step‐by‐step reasoning:

1. The agent starts at [5,1] facing LEFT. The KEY is at [6,1] (directly “south” of the agent).  
   • First, turn LEFT so that from facing LEFT the agent now faces DOWN.  
   • Then, use PICKUP to grab the KEY from the cell in front (i.e. [6,1]).

2. Now holding the KEY, the agent needs to go to the DOOR at [1,2] (the only passage between two rooms). The best approach is to reach a cell adjacent to the door.  
   • The door’s accessible adjacent cell is [1,1] (to its left).  
   • To get there, the agent must face UP. Currently facing DOWN, the agent makes two LEFT turns (DOWN → RIGHT → UP).  
   • Then, MOVE four times to go from [5,1] up to [1,1].

3. At [1,1] facing UP, the door ([1,2]) lies to the agent’s right.  
   • Turn RIGHT so the agent now faces EAST (toward the door).  
   • Execute UNLOCK to unlock the door in the cell immediately ahead ([1,2]).  
   • MOVE forward to step into the door cell.

4. Now that the door is unlocked, the agent is in the passage to the right room. The GOAL is at [6,6]. From the door cell ([1,2]), the agent must move right and then down.  
   • With the agent still facing EAST, MOVE four times: from [1,2] to [1,3], then to [1,4], [1,5], and finally [1,6].  
   • Then, turn RIGHT to face DOWN.  
   • Finally, MOVE five times to descend from row 1 to row 6, arriving at [6,6] where the GOAL is located.

This planned sequence of actions ensures that the agent picks up the key, unlocks the door, navigates into the right room, and finally reaches the goal.",0.97046875,True,True
door_key,49,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:
1. You start at (4,1) facing RIGHT. To pick up the KEY (located at (2,1)), stand below it in an adjacent cell.
2. ""LEFT"": Turn left so you face UP.
3. ""MOVE"": From (4,1) move up to (3,1).
4. ""PICKUP"": While at (3,1) facing UP, the cell in front (2,1) contains the KEY. Pick it up.
5. Now, with the KEY in hand, turn toward the DOOR. ""RIGHT"": Turn right (from UP to RIGHT). The door is now directly in front at (3,2).
6. ""UNLOCK"": Unlock the door at (3,2) using the KEY.
7. ""MOVE"": Step through the door from (3,1) to (3,2).
8. ""MOVE"": Continue from (3,2) to (3,3) and enter the room containing the GOAL.
9. ""MOVE"": Move from (3,3) to (3,4).
10. ""MOVE"": Move from (3,4) to (3,5).
11. ""MOVE"": Move from (3,5) to (3,6).
12. Now, face the GOAL which is down. ""RIGHT"": Turn right (from RIGHT to face DOWN).
13. ""MOVE"": Step from (3,6) down to (4,6).
14. ""MOVE"": Move from (4,6) down to (5,6).
15. ""MOVE"": Finally, move from (5,6) to (6,6) where the GOAL is located.

Following these actions will allow you to unlock the door, pick up the KEY, and navigate to reach the GOAL.",0.9803125,True,True
door_key,5,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the plan step by step:

1. Starting at (3,3) facing LEFT, a ""MOVE"" takes you to (3,2).  
2. A ""LEFT"" turn from LEFT (west) makes you face DOWN (south).  
3. ""MOVE"" from (3,2) while facing south sends you to (4,2).  
4. Now, to pick up the KEY located at (4,1) (which is to the west of (4,2)), you need to face WEST. From DOWN, a ""RIGHT"" turn makes you face WEST.  
5. ""PICKUP"" then collects the KEY from (4,1).  

With the KEY in hand, you now head toward the DOOR at (4,4):

6. You are at (4,2) facing WEST. Two ""LEFT"" turns will reorient you: the first ""LEFT"" changes facing from WEST to SOUTH, and the second ""LEFT"" from SOUTH makes you face EAST.  
7. ""MOVE"" from (4,2) facing EAST brings you to (4,3).  
8. With the DOOR now directly in front (at (4,4)), use ""UNLOCK"" to open it (since you’re holding the KEY).  
9. ""MOVE"" advances you into the door cell (4,4).  

Now that you’re in the adjoining room and you need to reach the GOAL at (6,6):

10. ""MOVE"" east from (4,4) to (4,5).  
11. ""MOVE"" east from (4,5) to (4,6).  
12. To head south, ""RIGHT"" (from east, a right turn points you to south).  
13. ""MOVE"" south from (4,6) to (5,6).  
14. ""MOVE"" south from (5,6) to (6,6), where the GOAL is located.

This complete sequence of actions unlocks the door and leads you successfully to the GOAL.",0.97890625,True,True
door_key,50,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Here's the reasoning step by step:

1. Starting at (5,3) facing UP, we want to get near the KEY at (1,2) without entering its cell. We plan to stand at (2,2) and face UP so that the key at (1,2) is directly ahead.
   - ""MOVE"": from (5,3) to (4,3) (facing UP).
   - ""MOVE"": from (4,3) to (3,3) (facing UP).
   - ""LEFT"": turn left to face LEFT.
   - ""MOVE"": from (3,3) to (3,2) (facing LEFT).
   - ""RIGHT"": turn right to face UP (since from LEFT, a RIGHT turn makes you face UP).
   - ""MOVE"": from (3,2) to (2,2) (facing UP).

2. With (1,2) directly in front, perform:
   - ""PICKUP"": pick up the KEY.

3. Now, with the key in hand, we want to head toward the DOOR at (5,5) which lies on the boundary between the left and right rooms. We plan to position ourselves in the left room at (5,4) facing RIGHT, so that DOOR is directly in front.
   - From (2,2) facing UP, we need to go down:
     - ""LEFT"": turn left (from UP to LEFT).
     - ""LEFT"": turn left again (from LEFT to DOWN).
     - ""MOVE"": from (2,2) to (3,2) (facing DOWN).
     - ""MOVE"": from (3,2) to (4,2) (facing DOWN).
     - ""MOVE"": from (4,2) to (5,2) (facing DOWN).
   - Now, at (5,2) facing DOWN, we need to turn toward the right:
     - ""LEFT"": turn left (from DOWN to RIGHT).
     - ""MOVE"": from (5,2) to (5,3) (facing RIGHT).
     - ""MOVE"": from (5,3) to (5,4) (facing RIGHT).

4. With the KEY in hand and positioned at (5,4) facing RIGHT so that the DOOR at (5,5) is right ahead, perform:
   - ""UNLOCK"": unlock the DOOR.

5. Enter the door area and head to the GOAL:
   - ""MOVE"": from (5,4) to (5,5) (entering the door cell).
   - ""MOVE"": from (5,5) to (5,6) (still facing RIGHT, entering the right room).
   - Now to get to the GOAL at (6,6), turn:
     - ""RIGHT"": turn right (from RIGHT to face DOWN).
   - ""MOVE"": from (5,6) to (6,6), landing on the GOAL.

Each action follows the rules, ensuring that objects (like the KEY) aren’t stepped on but are picked up from an adjacent position, and that the door is unlocked from the proper side before passing through. This completes the plan.",0.971875,True,True
door_key,51,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE""]
</actions> 

Step-by-step explanation:

1. From the starting position [3,2] facing LEFT, the agent first moves left into [3,1].
2. The agent then turns RIGHT (from LEFT to UP) so that moving forward will head upward.
3. A MOVE takes the agent from [3,1] to [2,1]. From here the KEY at [1,1] lies directly ahead.
4. A PICKUP collects the KEY from the cell above ([1,1]).
5. To approach the DOOR at [1,3], the agent turns RIGHT (facing UP to face RIGHT).
6. A MOVE brings the agent from [2,1] to [2,2].
7. A LEFT turn from RIGHT changes the facing direction to UP.
8. A MOVE takes the agent from [2,2] to [1,2] where the DOOR is located to the right.
9. The agent turns RIGHT (UP to RIGHT) so that the cell in front ([1,3]) is the DOOR.
10. With the KEY in hand, the agent executes UNLOCK to unlock the DOOR.
11. A MOVE steps into the unlocked DOOR cell ([1,3]).
12. Another MOVE carries the agent further into the next room at [1,4].
13. To head toward the GOAL at [6,6], the agent turns RIGHT: now facing down.
14-18. Five consecutive MOVEs bring the agent downward from [1,4] to [6,4].
19. At [6,4] facing down, a LEFT turn rotates the agent to face RIGHT.
20-21. Two MOVEs finally carry the agent from [6,4] to [6,5] and then to [6,6], where the GOAL is located.

This sequence satisfies the requirement: obtaining the KEY, unlocking the DOOR, and navigating to the GOAL.",0.97046875,True,True
door_key,52,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Starting at (2,3) facing LEFT.
2. ""LEFT"": Turn left from LEFT to face DOWN.
3. Four ""MOVE"" actions: move from (2,3) → (3,3) → (4,3) → (5,3) → (6,3). Now you are in the row of the KEY.
4. ""RIGHT"": Turn from DOWN to face LEFT (west). Now the cell in front, (6,2), contains the KEY.
5. ""PICKUP"": Pick up the KEY.
6. ""RIGHT"": With the KEY in hand and still at (6,3) (and originally facing LEFT), turn RIGHT so you now face NORTH.
7. Three ""MOVE"" actions: move north from (6,3) → (5,3) → (4,3) → (3,3).
8. ""RIGHT"": Turn from NORTH to face EAST. Now you are at (3,3) facing (3,4) and the door cell (3,5) is directly in front of that adjacent cell.
9. ""MOVE"": Step into (3,4), which is immediately before the DOOR.
10. ""UNLOCK"": With the KEY and facing the door at (3,5), unlock it.
11. ""MOVE"": Step forward through the unlocked DOOR into cell (3,5).
12. ""MOVE"": Continue moving from (3,5) to (3,6) in the connected room.
13. ""RIGHT"": Turn from EAST to face SOUTH.
14. Three ""MOVE"" actions: move south from (3,6) → (4,6) → (5,6) → (6,6), reaching the GOAL.

Following these actions in order should achieve your objective.",0.971875,True,True
door_key,53,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the reasoning step‐by‐step:

1. Starting at (6,3) facing DOWN in the left room (the same room as the key), we want to get the key at (2,4) without stepping into its cell (since you can’t walk into a cell containing an object). We instead need to stand in an adjacent cell and pick the key up.
2. First, we turn LEFT (while facing DOWN) which makes us face RIGHT. Then we MOVE to (6,4).
3. Next, we turn LEFT to go from facing RIGHT to facing UP. Now, we make three MOVE actions: moving from (6,4) to (5,4), then to (4,4), and finally to (3,4). Now we are directly beneath the key: the key is in the cell (2,4) (one cell up).
4. With our agent facing UP, we use PICKUP to grab the key from (2,4).
5. Now that we have the key, we must unlock the door at (3,5). The door lies immediately to our right of (3,4), so we turn RIGHT (from UP to RIGHT) and then use UNLOCK while facing the door.
6. After unlocking, we MOVE into the door’s cell at (3,5).
7. Once inside the right room, to reach the GOAL at (6,6), we take another MOVE from (3,5) to (3,6). Now, to head downward towards the goal, we turn RIGHT (from facing RIGHT to facing DOWN).
8. Finally, we execute three MOVE actions: from (3,6) to (4,6), then to (5,6), and lastly to (6,6) where the GOAL is located.

This complete sequence of 15 actions satisfies the objective.",0.97890625,True,True
door_key,54,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Let's explain the plan step by step:

1. Starting at (4,1) facing RIGHT, we first turn RIGHT so that we face DOWN.
2. Then we MOVE from (4,1) down to (5,1).
3. Now facing down, the cell immediately ahead is (6,1) which contains the KEY. We use PICKUP to grab it.
4. With the key in hand, we need to reach the DOOR. The door is at (5,3) in the wall dividing the two rooms. From our current position (5,1) facing down, we turn LEFT to face RIGHT.
5. We then MOVE from (5,1) to (5,2). Now the cell in front (5,3) is the door.
6. Since we’re holding the KEY and are adjacent to the door, we use UNLOCK.
7. With the door unlocked, we MOVE forward into the door cell (5,3) to cross into the next room.
8. Now in the room with the GOAL, we MOVE RIGHT step by step: from (5,3) to (5,4), then (5,4) to (5,5), and (5,5) to (5,6).
9. The GOAL is just below (5,6) at (6,6). So we turn RIGHT (from facing right, a RIGHT turn changes our direction to DOWN) and MOVE into (6,6).
  
This sequence meets the objective of unlocking the door and reaching the goal.",0.983125,True,True
door_key,55,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
  [""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the step‐by‐step breakdown:

1. Start at [5,4] facing UP.
2. ""LEFT"" → Now facing LEFT.
3. ""MOVE"" → Go from [5,4] to [5,3].
4. ""MOVE"" → Go from [5,3] to [5,2].
5. ""MOVE"" → Go from [5,2] to [5,1].
6. ""LEFT"" → From facing LEFT, turning left makes you face DOWN.
7. ""PICKUP"" → With the cell directly in front ([6,1]) containing the KEY, pick it up.
8. ""LEFT"" → From facing DOWN, a left turn makes you face RIGHT.
9. ""MOVE"" → Go from [5,1] to [5,2].
10. ""MOVE"" → Go from [5,2] to [5,3].
11. ""MOVE"" → Go from [5,3] to [5,4].
12. ""LEFT"" → Facing RIGHT, turning left results in facing UP.
13. ""MOVE"" → From [5,4] to [4,4].
14. ""MOVE"" → From [4,4] to [3,4].
15. ""MOVE"" → From [3,4] to [2,4].
16. ""RIGHT"" → From facing UP, turning right faces you to the RIGHT, toward the door at [2,5].
17. ""UNLOCK"" → Unlock the door (located directly ahead at [2,5]) using the KEY.
18. ""MOVE"" → Step through the now-unlocked door, moving from [2,4] to [2,5].
19. ""MOVE"" → Move from [2,5] to [2,6] in the goal room.
20. ""RIGHT"" → From facing RIGHT, turning right makes you face DOWN.
21. ""MOVE"" → Move from [2,6] down to [3,6].
22. ""MOVE"" → Move from [3,6] to [4,6].
23. ""MOVE"" → Move from [4,6] to [5,6].
24. ""MOVE"" → Finally, move from [5,6] to [6,6], where the GOAL is located.

Following these actions, you pick up the KEY, unlock the DOOR, and successfully reach the GOAL.",0.96765625,True,True
door_key,56,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Let's explain the plan step by step:

1. Start at (3,2) facing RIGHT. The KEY is directly under the agent at (4,2), so we first need to face DOWN. Action ""RIGHT"" turns the agent from RIGHT to DOWN.
2. With the agent now facing DOWN, the KEY at (4,2) is in the cell directly in front. Action ""PICKUP"" picks up the KEY.
3. Next, we need to move towards the door. We move forward: Action ""MOVE"" takes the agent from (3,2) to (4,2) (the key cell which is now empty).
4. Another ""MOVE"" action takes the agent from (4,2) to (5,2).
5. The DOOR is at (5,3), to the right of (5,2). Currently facing DOWN, the agent uses ""LEFT"" to turn and face RIGHT.
6. With the door directly in front and holding the KEY, ""UNLOCK"" unlocks the door at (5,3).
7. Now the agent ""MOVE""s from (5,2) into the door cell (5,3).
8. To approach the GOAL (located at (6,6)), the agent moves right into the new room: ""MOVE"" to (5,4), followed by ""MOVE"" to (5,5), and another ""MOVE"" to (5,6).
9. Finally, since the goal is directly below (5,6), the agent turns ""RIGHT"" (from RIGHT to DOWN) and then ""MOVE""s into the goal cell (6,6), completing the objective.",0.983125,True,True
door_key,57,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Starting at (6,1) facing DOWN, we first turn to face UP (by doing two LEFT turns, which from DOWN go to RIGHT then UP).
2. With the agent now facing UP, a MOVE brings you from (6,1) to (5,1). The KEY is located at (4,1), directly ahead.
3. The PICKUP action collects the KEY from (4,1).
4. Next, the door is located at (5,2) (to your right from your current position (5,1)). A RIGHT turn (from UP) rotates you to face RIGHT.
5. With the door in front, the UNLOCK action uses your held KEY to unlock it.
6. A MOVE places you into the door’s cell at (5,2).
7. Continue moving RIGHT through the door: successive MOVE actions take you to (5,3), (5,4), (5,5), and then (5,6).
8. Now, from (5,6) still facing RIGHT, you cannot move ahead because of the WALL. A RIGHT turn rotates you to face DOWN.
9. A final MOVE takes you from (5,6) to (6,6), which is where the GOAL is located.

This sequence completes your objective of unlocking the door and reaching the GOAL.",0.98171875,True,True
door_key,58,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Starting at (4,1) facing UP, the KEY is in the cell directly ahead at (3,1), so use ""PICKUP"".
2. To go toward the door (located at (5,4) in the adjacent room) the agent must first leave the current room. Facing UP, the agent turns ""RIGHT"" then ""RIGHT"" to face DOWN.
3. ""MOVE"" from (4,1) to (5,1) (now in the lower part of the current room).
4. To head eastward toward the door, turn ""LEFT"" (from DOWN to RIGHT).
5. ""MOVE"" from (5,1) to (5,2).
6. ""MOVE"" from (5,2) to (5,3), arriving adjacent (to the left) of the door cell.
7. With the KEY in hand and the door directly in front (at (5,4)), ""UNLOCK"" opens the door.
8. ""MOVE"" into the now passable door cell at (5,4).
9. Continue ""MOVE"" from (5,4) to (5,5) as part of entering the door’s room.
10. ""MOVE"" from (5,5) to (5,6).
11. The GOAL is located below (at (6,6)). While still facing RIGHT, the agent turns ""RIGHT"" to face DOWN.
12. Finally, ""MOVE"" from (5,6) to (6,6) to stand on the GOAL and complete the game.
",0.98171875,True,True
door_key,59,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Starting at (5,2) facing UP, the agent moves upward three times to reach (2,2):
   - MOVE: from (5,2) to (4,2)
   - MOVE: from (4,2) to (3,2)
   - MOVE: from (3,2) to (2,2)
2. At (2,2) and facing UP, the agent turns LEFT to face LEFT. The key is at (2,1) (directly to the left), so:
   - LEFT
   - PICKUP (picks up the key)
3. Now at (2,2) facing LEFT but needing to head toward the door, the agent must face RIGHT. Two LEFT turns will change LEFT to RIGHT:
   - LEFT
   - LEFT
4. With the agent now facing RIGHT, he moves east to approach the door. The chosen path is:
   - MOVE: from (2,2) to (2,3)
   - MOVE: from (2,3) to (2,4)
5. To start heading downward toward the door’s row (door is at (4,5)), the agent turns RIGHT (from facing RIGHT to facing DOWN) and moves:
   - RIGHT
   - MOVE: from (2,4) to (3,4)
   - MOVE: from (3,4) to (4,4)
6. At (4,4) facing DOWN, the door at (4,5) is to the EAST. A LEFT turn from DOWN points EAST:
   - LEFT
7. The agent now uses the key to unlock the door directly in front:
   - UNLOCK
8. With the door unlocked, the agent moves into the door cell and then further into the next room toward the GOAL:
   - MOVE: from (4,4) to (4,5) (through the unlocked door)
   - MOVE: from (4,5) to (4,6)
9. Facing EAST at (4,6), the agent turns RIGHT to face DOWN, then proceeds to move down to the GOAL (located at (6,6)):
   - RIGHT
   - MOVE: from (4,6) to (5,6)
   - MOVE: from (5,6) to (6,6)

This sequence of actions satisfies the game’s objectives: pick up the KEY, unlock the DOOR, and move into the room containing the GOAL.",0.97328125,True,True
door_key,6,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Step-by-step reasoning:
1. Starting at (4,1) facing DOWN, the cell in front (5,1) contains the KEY. So, execute ""PICKUP"" to collect it.
2. Then ""MOVE"" from (4,1) to (5,1).
3. At (5,1) still facing DOWN, to head towards the door, we need to move east. Turning left from DOWN makes you face east. So, execute ""LEFT"".
4. Now ""MOVE"" from (5,1) east to (5,2). Now the door is immediately to your east at (5,3).
5. With the KEY in hand and the door in the adjacent cell, perform ""UNLOCK"" to unlock the door.
6. After unlocking, ""MOVE"" from (5,2) into the door cell at (5,3).
7. Continue ""MOVE"" east from (5,3) to (5,4).
8. ""MOVE"" east again from (5,4) to (5,5).
9. ""MOVE"" from (5,5) to (5,6) still heading east.
10. Now, to reach the GOAL at (6,6) which is south of (5,6), turn ""RIGHT"" (from east to south).
11. Finally, ""MOVE"" from (5,6) south to (6,6) and complete the objective.

This gives you the sequence above.",0.98453125,True,True
door_key,60,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Starting at (1,1) facing UP. We first need to face downward to pick up the KEY that is located in the cell at (4,1). From UP, two LEFT turns will make you face DOWN.
2. With the agent now facing DOWN, the first MOVE takes you from (1,1) to (2,1) and the next MOVE takes you to (3,1).
3. Now while at (3,1) facing DOWN, the cell directly ahead (4,1) contains the KEY. The PICKUP action collects it.
4. With the key in hand and still at (3,1) facing down, two consecutive MOVEs (first to (4,1) then to (5,1)) get you closer to the DOOR.
5. At (5,1) facing DOWN, the DOOR is to your right at (5,2). A single LEFT turn (turning from DOWN to RIGHT) aligns you so the DOOR is in the cell directly in front.
6. Now facing the DOOR, the UNLOCK action uses the held KEY to unlock the DOOR.
7. The next MOVE enters the door cell at (5,2). Then a series of four MOVEs takes you along the room from (5,2) to (5,3), (5,3) to (5,4), (5,4) to (5,5), and (5,5) to (5,6).
8. At (5,6) still facing RIGHT, the GOAL at (6,6) lies directly below. A RIGHT turn from facing RIGHT changes your orientation to DOWN, and the final MOVE takes you to (6,6) where the GOAL is located.

Thus, the above list of 16 actions will successfully navigate from the starting point, collect the KEY, unlock the DOOR, and finally reach the GOAL.",0.9775,True,True
door_key,61,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97609375,True,True
door_key,62,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.971875,True,True
door_key,63,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step reasoning:

1. You start at (1,1) facing RIGHT. To head downward along column 1 toward the key, turn RIGHT so you now face DOWN.
2. MOVE from (1,1) to (2,1).
3. MOVE from (2,1) to (3,1).
4. MOVE from (3,1) to (4,1). Now you are adjacent to the KEY.
5. Turn LEFT while at (4,1) (facing DOWN) to face RIGHT; the KEY is located in cell (4,2).
6. PICKUP the KEY from cell (4,2) (the object in the cell directly in front).
7. MOVE from (4,1) to (4,2), positioning you one cell away from the DOOR.
8. UNLOCK the DOOR at (4,3) (which is directly in front) using the KEY.
9. MOVE into the door cell (4,3) – now unlocked – entering the second room.
10. MOVE from (4,3) to (4,4).
11. MOVE from (4,4) to (4,5).
12. MOVE from (4,5) to (4,6).
13. Turn RIGHT (from facing RIGHT, turning RIGHT makes you face DOWN) to head toward the GOAL.
14. MOVE from (4,6) to (5,6).
15. MOVE from (5,6) to (6,6), where the GOAL is located.

This list of actions completes the objective.",0.97890625,True,True
door_key,64,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions> 

Step-by-step explanation:
1. Starting at (6,3) facing LEFT, we want to get near the KEY at (4,1). We plan to approach cell (4,2) so that by facing left we can pick up the key.
   - ""MOVE"": From (6,3) to (6,2) (still facing LEFT).
   - ""RIGHT"": Turn from LEFT to UP.
   - ""MOVE"": Move from (6,2) upward to (5,2).
   - ""MOVE"": Move from (5,2) upward to (4,2).
   - ""LEFT"": Turn from UP to LEFT.
   - ""PICKUP"": With the cell in front, (4,1), containing the KEY, pick it up.
2. With the key in hand, next head to the door at (2,4). We aim to stand at (2,3) facing RIGHT so that the door (to our right) is immediately in front.
   - ""RIGHT"": From facing LEFT turn to UP.
   - ""MOVE"": From (4,2) to (3,2) moving upward.
   - ""MOVE"": From (3,2) to (2,2) continuing upward.
   - ""RIGHT"": From UP turn to RIGHT.
   - ""MOVE"": Move from (2,2) to (2,3), now facing RIGHT.
   - ""UNLOCK"": Unlock the door located in the cell immediately in front (at (2,4)).
3. After unlocking, proceed through the door into the right room to reach the GOAL at (6,6).
   - ""MOVE"": Step through the door from (2,3) to (2,4).
   - ""MOVE"": From (2,4) to (2,5) moving right.
   - ""MOVE"": From (2,5) to (2,6) still moving right.
   - ""RIGHT"": Turn from RIGHT to DOWN.
   - ""MOVE"": From (2,6) to (3,6) moving down.
   - ""MOVE"": From (3,6) to (4,6) moving down.
   - ""MOVE"": From (4,6) to (5,6) moving down.
   - ""MOVE"": From (5,6) to (6,6), arriving at the GOAL.
   
This sequence ensures that you collect the KEY, unlock the DOOR, and finally reach the GOAL.",0.971875,True,True
door_key,65,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Here's the reasoning:

1. Starting from row2, col1 facing DOWN, the cell directly ahead (row3, col1) has the KEY. So we execute ""PICKUP"" to grab it.
2. We then need to bring the key to the door. From row2, col1 (still facing DOWN after the pickup), we move down:
   - ""MOVE"": from row2, col1 to row3, col1.
   - ""MOVE"": from row3, col1 to row4, col1.
   - ""MOVE"": from row4, col1 to row5, col1.
3. At row5, col1, the DOOR is to our right (east). With our current facing (DOWN), we turn to face east by executing ""LEFT"" (since turning left from DOWN yields EAST).
4. Now, standing at row5, col1 facing east, the cell directly ahead (row5, col2) holds the DOOR. Since we hold the key, we ""UNLOCK"" the door.
5. With the door unlocked, we move into and through it:
   - ""MOVE"": from row5, col1 into the door cell at row5, col2.
   - ""MOVE"": from row5, col2 to row5, col3.
   - ""MOVE"": from row5, col3 to row5, col4.
   - ""MOVE"": from row5, col4 to row5, col5.
   - ""MOVE"": from row5, col5 to row5, col6.
6. Now at row5, col6 facing east, the GOAL lies one cell down (row6, col6). We turn to face down with ""RIGHT"" (east → down) and then ""MOVE"" into the GOAL cell.

Thus, the full action sequence is as listed above.",0.98171875,True,True
door_key,66,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Starting at (2,4) facing LEFT, use ""LEFT"" to turn 90° left so you face DOWN.
2–5. ""MOVE"" four times to go from (2,4) to (3,4) to (4,4) to (5,4) and then to (6,4). Now you’re in the row of the KEY.
6. With the agent at (6,4) facing DOWN, use ""RIGHT"" to turn so you face WEST (leftward). The KEY is in (6,3), the cell directly in front.
7. ""PICKUP"" the KEY.
8. Now to reach the door at (4,5), you must head upward. ""RIGHT"" from WEST turns you to NORTH.
9–10. ""MOVE"" twice to go from (6,4) → (5,4) → (4,4).
11. At (4,4) (facing NORTH), the door lies in (4,5) which is to the EAST. ""RIGHT"" turns you to face EAST.
12. ""UNLOCK"" the door in the cell directly ahead.
13. ""MOVE"" into the door cell (4,5).
14. Now, to head toward the GOAL at (6,6) (in the adjacent room) use ""MOVE"" to step to (4,6).
15. ""RIGHT"" reorients you from EAST to face SOUTH.
16–17. Finally, ""MOVE"" twice to travel from (4,6) → (5,6) and then (5,6) → (6,6), arriving on the GOAL cell.

This sequence follows the rules and brings you from your start through the key, door, and finally to the goal.",0.97609375,True,True
door_key,67,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the reasoning step by step:

1. The agent starts at [4][2] facing RIGHT. To reach the KEY at [5][1] without stepping on it (since PICKUP only works on the adjacent cell in front), the agent first turns RIGHT to face DOWN.
2. The agent then moves from [4][2] to [5][2]. Now, standing at [5][2] and facing DOWN, a further RIGHT turn makes the agent face WEST. With this orientation, the cell directly ahead ([5][1]) contains the KEY.
3. The agent executes PICKUP to retrieve the KEY.
4. Now holding the KEY and positioned at [5][2] (facing WEST), the agent plans the return journey through the first room toward the door at [3][5]. The door must be unlocked from the cell immediately to its left (i.e. from [3][4] while facing EAST).
5. From [5][2] facing WEST, a RIGHT turn makes the agent face NORTH. Two successive MOVE actions bring the agent from [5][2] to [4][2] and then [3][2].
6. At [3][2] facing NORTH, a RIGHT turn directs the agent to face EAST. Two MOVE actions then bring the agent from [3][2] to [3][3] and then to [3][4].
7. At [3][4] facing EAST, the door at [3][5] is directly ahead. The agent executes the UNLOCK action (using the KEY) to open the door.
8. A MOVE takes the agent into the now-unlocked door cell [3][5] (now in the second room). Another MOVE moves the agent further east into [3][6].
9. At [3][6] and still facing EAST, a RIGHT turn makes the agent face SOUTH. Then three successive MOVE actions take the agent from [3][6] to [4][6], then to [5][6], and finally to [6][6] where the GOAL is located.
10. Once the agent stands on the GOAL cell, the game is complete.

The final sequence of actions is as provided above.",0.97609375,True,True
door_key,68,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE""]
</actions>

Let's explain step by step:

1. Starting at (4,1) facing UP, we first turn RIGHT so that we face east.
2. We MOVE from (4,1) to (4,2).
3. Then we turn RIGHT to face DOWN. Now the cell immediately in front (at (5,2)) contains the KEY.
4. We execute PICKUP to grab the KEY.
5–6. With the key in hand and currently at (4,2) facing DOWN, we need to travel to the door. The door is located at (2,3) and is best approached from the west, meaning from (2,2). To head upward, we turn LEFT twice (from DOWN → RIGHT then RIGHT → UP).
7–8. We MOVE twice to go from (4,2) upward: first to (3,2) then to (2,2).
9. At (2,2) facing UP, we turn RIGHT to face east where the door at (2,3) is.
10. We then execute UNLOCK to open the door.
11–12. With the door unlocked, we MOVE forward: first entering the door cell (2,3) and then stepping into the right-side room at (2,4).
13. In the right room at (2,4) and still facing east, we turn RIGHT to face DOWN so we can navigate toward the goal.
14–17. We MOVe downward four times, going from (2,4) → (3,4) → (4,4) → (5,4) → (6,4).
18. At (6,4) facing DOWN, we turn LEFT to face RIGHT.
19–20. Finally, we MOVE two times to reach (6,5) then (6,6), which is where the GOAL is located.

This sequence fulfills the objective: picking up the KEY, unlocking the DOOR, and reaching the GOAL.",0.971875,True,True
door_key,69,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step reasoning:
1. The agent starts at (5,1) facing LEFT. To go upward toward the key at (3,1), the agent first turns RIGHT (facing UP).
2. The agent then moves one step from (5,1) to (4,1).
3. Now facing UP from (4,1), the cell in front (3,1) contains the KEY, so the agent uses PICKUP.
4. With the key in hand, the door at (4,2) (to the right of (4,1)) must be unlocked. The agent turns RIGHT (from UP to face EAST).
5. The agent executes UNLOCK while facing the door.
6. After unlocking, the agent moves into the door cell at (4,2).
7–10. Now in the new room, with the door behind, the agent continues moving east from (4,2) to (4,3), then to (4,4), (4,5), and (4,6).
11. To head toward the goal at (6,6), the agent turns RIGHT (from EAST to face SOUTH).
12. The agent moves from (4,6) to (5,6).
13. Finally, the agent moves from (5,6) to (6,6) and reaches the GOAL.

This sequence of actions meets the objective of unlocking the door and reaching the goal.",0.98171875,True,True
door_key,7,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (5,3) facing UP, the KEY is at (6,3) (directly below), so you need to face DOWN. Two turns “LEFT”, “LEFT” make you face DOWN.
2. Now with key directly in front at (6,3), you use “PICKUP” to grab it.
3. With the KEY in hand, you need to get to the DOOR at (3,5). From (5,3), the shortest route is to go upward: first change your facing from DOWN to UP by “LEFT”, “LEFT”. Then “MOVE” twice to go from (5,3) to (4,3) and then to (3,3).
4. From (3,3) you turn “RIGHT” (from UP to RIGHT) so that you can move “MOVE” into (3,4). Now, with the DOOR at (3,5) directly ahead, use “UNLOCK” to open it.
5. After unlocking, “MOVE” into the door cell at (3,5). Then “MOVE” east so you reach (3,6).
6. To head toward the GOAL at (6,6) (which is reached by moving downward from (3,6)), turn “RIGHT” (from EAST to DOWN) and “MOVE” three times to progress from (3,6) → (4,6) → (5,6) → (6,6).

When you land on the GOAL cell at (6,6), you’ve completed the task.",0.9775,True,True
door_key,70,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain briefly:

1. Starting at (2,1) facing LEFT, the first ""LEFT"" turns you to face DOWN.
2. Four ""MOVE"" steps take you from (2,1) down to (6,1).
3. A ""LEFT"" turns you from DOWN to RIGHT.
4. A ""MOVE"" takes you to (6,2) so that the cell in front (6,3) contains the KEY. “PICKUP” grabs it.
5. A ""LEFT"" (from RIGHT) turns you to face UP.
6. Four ""MOVE"" steps (from (6,2) up to (2,2)) navigate back upward.
7. A ""RIGHT"" (from UP) turns you to face RIGHT so that you are now at (2,2) with the door immediately to your right at (2,4) (accesible via cell (2,3)).
8. A ""MOVE"" takes you to (2,3).
9. ""UNLOCK"" unlocks the door in the cell (2,4).
10. Then a ""MOVE"" enters the door cell.
11. Two ""MOVE"" steps from (2,4) lead you to (2,6).
12. A ""RIGHT"" (from RIGHT) rotates you to face DOWN.
13. Finally, four ""MOVE"" steps bring you from (2,6) down to (6,6), where the GOAL is located.

This sequence meets the objective: pick up the key in the starting room, unlock the door, and reach the GOAL in the other room.",0.96625,True,True
door_key,71,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step reasoning:
1. The agent starts at [3,1] facing LEFT. To head toward the KEY at [3,3], the agent first reorients from LEFT to RIGHT by turning RIGHT twice (LEFT → UP → RIGHT).
2. With the agent now facing RIGHT at [3,1], the agent moves one step to [3,2].
3. While at [3,2] and facing RIGHT, the cell directly ahead ([3,3]) holds the KEY, so the agent performs a PICKUP.
4. Now carrying the KEY, the agent moves into the key’s former cell: first moving from [3,2] to [3,3], then from [3,3] to [3,4].
5. Facing right at [3,4], the door at [3,5] is directly ahead. The agent executes UNLOCK to open the DOOR.
6. With the door unlocked, the agent moves from [3,4] into the door cell at [3,5] and then further moves to [3,6] (entering the connected room).
7. To approach the GOAL at [6,6] from [3,6], the agent turns RIGHT (from facing RIGHT to facing DOWN), then moves consecutively: [3,6] → [4,6] → [5,6] and finally [5,6] → [6,6].
8. Standing on the GOAL cell completes the objective.",0.98171875,True,True
door_key,72,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (4,4) facing RIGHT. The KEY is located at (4,3) (to the left). To face left, the agent turns twice “LEFT” (RIGHT → UP → LEFT) and then uses ""PICKUP"".
2. With the KEY in hand and still at (4,4) facing LEFT, the agent needs to head toward the DOOR at (2,5). To do that, it must move upward to line up horizontally with the door. From facing LEFT, a ""RIGHT"" turn will make the agent face UP.
3. Two moves (""MOVE"", ""MOVE"") from (4,4) take the agent to (3,4) and then to (2,4).
4. At (2,4), to reach the door (which is immediately to the right at (2,5)), the agent turns ""RIGHT"" (UP → RIGHT) and then ""UNLOCK"" the door.
5. With the door now unlocked, the agent ""MOVE""s forward into the door cell at (2,5).
6. Still facing RIGHT, a ""MOVE"" takes the agent to (2,6) inside the goal room.
7. To head down to the GOAL at (6,6), the agent turns ""RIGHT"" (RIGHT → DOWN) and then performs four ""MOVE"" actions to travel from (2,6) → (3,6) → (4,6) → (5,6) → finally (6,6), where the goal is reached.

This full list of actions ensures that you pick up the key, unlock the door, and navigate to the goal in the correct sequence.",0.97890625,True,True
door_key,73,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:

1. Starting at (6,2) facing DOWN, the first ""LEFT"" turns you to face RIGHT.
2. Two ""MOVE"" actions take you from (6,2) → (6,3) then (6,3) → (6,4).
3. With the key at (5,4) directly above, the next ""LEFT"" (from RIGHT) sets your direction to UP.
4. Now ""PICKUP"" grabs the KEY from the cell in front (i.e. (5,4)). (You remain at (6,4) after PICKUP.)
5. From (6,4) facing UP, five ""MOVE"" actions (steps 6–10) take you straight upward:
   - (6,4) → (5,4) [cell now empty since key was picked],
   - (5,4) → (4,4),
   - (4,4) → (3,4),
   - (3,4) → (2,4),
   - (2,4) → (1,4).
6. At (1,4) you need the DOOR at (1,5) to be directly in front, so you ""RIGHT"" turn (from UP to RIGHT).
7. Now ""UNLOCK"" unlocks the door at (1,5) since you’re holding the KEY.
8. Next two ""MOVE"" actions (steps 13–14) take you:
   - (1,4) → (1,5) (through the now-unlocked door),
   - (1,5) → (1,6) to enter the room with the GOAL.
9. To head towards the GOAL located at (6,6), a ""RIGHT"" turn faces you DOWN (from RIGHT).
10. Finally, five ""MOVE"" actions bring you down the corridor from (1,6) to:
    - (2,6),
    - (3,6),
    - (4,6),
    - (5,6),
    - and finally (6,6), reaching the GOAL.

This sequence of actions lets you pick up the key, unlock the door, and then navigate to the goal as required.",0.971875,True,True
door_key,74,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Let's walk through the reasoning step by step:

1. The agent starts at position (2,1) facing LEFT. The KEY is located at (6,1) (in the left room) and the DOOR is at (5,2). Since you cannot move into a cell with an object (like the KEY), the agent must pick it up while standing in an adjacent cell. Standing at (5,1) and facing DOWN allows the agent to pick up the KEY at (6,1).

2. From the starting orientation (LEFT), a single ""LEFT"" action rotates the agent from facing LEFT to facing DOWN. Then three ""MOVE"" actions take the agent from:
   - (2,1) → (3,1)
   - (3,1) → (4,1)
   - (4,1) → (5,1)

3. Now at (5,1) and still facing DOWN, the cell in front (6,1) contains the KEY. The ""PICKUP"" action collects the key.

4. With the key in hand, the agent needs to unlock the DOOR at (5,2), which is immediately to the EAST of (5,1). From facing DOWN, turning ""LEFT"" will reorient the agent to face EAST. The ""UNLOCK"" action then unlocks the door (since the door is directly in front).

5. With the door unlocked, the agent ""MOVE""s into the door cell at (5,2) and then continues moving EAST through the now-accessible room. Four additional ""MOVE"" actions navigate the agent:
   - (5,2) → (5,3)
   - (5,3) → (5,4)
   - (5,4) → (5,5)
   - (5,5) → (5,6)

6. The GOAL is in the adjacent cell (6,6) (i.e., one step DOWN from (5,6)). From facing EAST, a ""RIGHT"" turn makes the agent face DOWN. Finally, one ""MOVE"" brings the agent from (5,6) to (6,6) to complete the game.

Thus, the full sequence is as provided above. Enjoy your game!",0.9803125,True,True
door_key,75,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the solution step by step:

1. Starting at (2,2) and facing LEFT, we first want to face the KEY at (2,3). Two RIGHT turns (LEFT → UP → RIGHT) orient you correctly.
2. When facing right, the KEY is in the cell directly ahead (at (2,3)), so you execute a PICKUP.
3. Next, you need to reach the door’s adjacent cell. Since the door is at (4,4), you can plan to stand at (4,3). From your current position:
   - MOVE right into (2,3).
   - Then turn RIGHT (from east to south) to head downward.
   - MOVE down to (3,3) and then again to (4,3).
4. At (4,3) facing south, you must face east so that the door at (4,4) is directly in front of you. A LEFT turn (from south to east) accomplishes that.
5. With the KEY in hand and door ahead, use UNLOCK.
6. Now MOVE into the door cell (4,4).
7. After passing through, continue heading to the GOAL at (6,6). From (4,4) facing east:
   - MOVE east through (4,5) then (4,6).
   - Turn RIGHT (from east to south) and MOVE down to (5,6) and finally to (6,6) where the GOAL is located.

This sequence of actions ensures that you pick up the KEY, unlock the DOOR, and proceed to the GOAL. Enjoy the game!",0.97890625,True,True
door_key,76,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step reasoning:

1. The agent begins at (3,3) facing UP. To reach the key at (2,1), the chosen approach is to position the agent at (2,2) so that the key lies directly to its left.
 • ""MOVE"": From (3,3) moving UP to (2,3).
 • ""LEFT"": Turn left (UP → LEFT).
 • ""MOVE"": From (2,3) moving LEFT to (2,2).
 • ""PICKUP"": With the key immediately to the left at (2,1), pick it up.

2. After collecting the key, the agent must travel to the door at (3,4) in order to unlock it.
 • ""LEFT"": From (2,2) facing LEFT, turn left so as to face DOWN.
 • ""MOVE"": From (2,2) moving DOWN to (3,2).
 • ""LEFT"": Turn left (DOWN → EAST).
 • ""MOVE"": From (3,2) moving EAST to (3,3) (the cell adjacent to the door).
 • ""UNLOCK"": Facing EAST toward the door at (3,4) and holding the key, unlock the door.
 • ""MOVE"": Move EAST into the door cell (3,4), thus entering the room that contains the goal.

3. Now in the door room, the agent needs to navigate to the goal located at (6,6).
 • ""MOVE"": From (3,4) (facing EAST) move to (3,5).
 • ""MOVE"": From (3,5) move to (3,6).
 • ""RIGHT"": At (3,6), turn right (EAST → SOUTH).
 • ""MOVE"": From (3,6) moving SOUTH to (4,6).
 • ""MOVE"": From (4,6) moving SOUTH to (5,6).
 • ""MOVE"": From (5,6) moving SOUTH to (6,6), which is where the goal is located.

These moves collectively satisfy the game’s objectives.",0.9775,True,True
door_key,77,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step reasoning:

1. Starting at (5,1) facing LEFT, we first turn RIGHT so that we face UP to approach the KEY above.
2. We MOVE three times from (5,1) → (4,1) → (3,1) → (2,1). Now the cell directly in front (i.e., (1,1)) holds the KEY.
3. We execute PICKUP to collect the KEY without moving into the KEY’s cell (since we can only pick up objects in the cell in front of us).
4. Now holding the KEY, we must go back to the DOOR at (4,2). From (2,1) facing UP, we need to reorient toward the door. We turn RIGHT twice to face DOWN.
5. Then we MOVE twice (from (2,1) → (3,1) then (3,1) → (4,1)). Now we are adjacent to the DOOR, but facing DOWN.
6. We turn LEFT so that we face RIGHT – the door is now directly in front at (4,2).
7. We use UNLOCK to unlock the door while holding the KEY.
8. We then MOVE into the door cell (4,2).
9. To reach the GOAL at (6,6), from (4,2) (still facing RIGHT) we MOVE right four times through (4,3), (4,4), (4,5), and (4,6).
10. At (4,6) facing RIGHT, we turn RIGHT to face DOWN.
11. Finally, we MOVE twice (from (4,6) → (5,6) then (5,6) → (6,6)), landing on the GOAL.

This sequence adheres to the grid’s rules and achieves our objective.",0.97328125,True,True
door_key,78,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Initially, the agent is at [1,1] facing UP while the KEY is at [1,2]. So we first turn RIGHT to face the KEY.
2. With the KEY directly in front (cell [1,2]), we use PICKUP to grab it.
3. Then, we move forward from [1,1] to [1,2] (first MOVE) and from [1,2] to [1,3] (second MOVE).
4. Standing at [1,3] and facing RIGHT, the DOOR is immediately in front (at [1,4]). We execute UNLOCK to open the door using the key.
5. After unlocking, we MOVE into the door cell ([1,4]), then continue moving to [1,5] and [1,6]. These moves transition us into the room containing the GOAL.
6. At [1,6] (still facing RIGHT), we turn RIGHT to face DOWN.
7. Finally, we MOVE down repeatedly until we reach the GOAL at [6,6].

This sequence satisfies all game rules and leads the agent successfully to the goal.",0.9803125,True,True
door_key,79,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step reasoning:

1. Starting at [2,1] facing RIGHT, we want to get the key at [5,1] which is in the cell exactly below the key cell when standing at [4,1].  
   • Action ""RIGHT"" turns the agent from facing RIGHT to facing DOWN.
  
2. Now facing DOWN, we “MOVE” from [2,1] to [3,1].
3. Then “MOVE” from [3,1] to [4,1]. From here, the KEY is one cell down at [5,1].

4. With the key cell directly ahead, ""PICKUP"" collects the KEY (note that you must be adjacent to pick up an object).

5. Next we need to unlock the DOOR, which is at [4,2]. Currently, the agent is at [4,1] facing DOWN.  
   • Action ""LEFT"" rotates the agent from DOWN to RIGHT so that the door cell [4,2] is now in front of the agent.

6. With the DOOR directly ahead and holding the KEY, ""UNLOCK"" unlocks the door at [4,2].

7. ""MOVE"" allows the agent to step into the door cell [4,2]. Now the agent is in the second room.

8. In the second room, our GOAL is located at [6,6]. From the current position [4,2] facing RIGHT, we plan to traverse along the row.  
   • ""MOVE"" steps into [4,3].
   • ""MOVE"" steps into [4,4].
   • ""MOVE"" steps into [4,5].
   • ""MOVE"" steps into [4,6].

9. Now at [4,6], to get closer to the goal (which is down at [6,6]), we change direction.  
   • ""RIGHT"" turns the agent from RIGHT to face DOWN.

10. Finally, we ""MOVE"" down from [4,6] to [5,6] and then ""MOVE"" again to reach the GOAL at [6,6].

The final output is the list of actions enclosed in <actions> tags as shown above.",0.9803125,True,True
door_key,8,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain step‐by‐step what happened:

1. Starting at [1,1] facing UP, we first turn RIGHT twice to face DOWN.
2. We move forward three times:
   • From [1,1] → [2,1]
   • [2,1] → [3,1]
   • [3,1] → [4,1]
3. While at [4,1] and facing down, the KEY is in the cell directly ahead ([5,1]), so we PICKUP the KEY.
4. Now, still at [4,1] but holding the key, we want to return toward the door. We reorient: two LEFT turns while facing down (since turning LEFT from down gives east, then LEFT again gives north/up).
5. Now facing UP, we MOVE three times:
   • From [4,1] → [3,1]
   • [3,1] → [2,1]
   • [2,1] → [1,1]
6. At [1,1] facing UP, we need to head east toward the door. A RIGHT turn makes us face EAST.
7. Then, two MOVEs take us:
   • From [1,1] → [1,2]
   • [1,2] → [1,3]
8. From [1,3] and facing east, the DOOR is directly in front at [1,4]. So we UNLOCK the door (using our KEY).
9. After unlocking, we MOVE into the door cell ([1,4]), and then continue east:
   • Next MOVE: [1,4] → [1,5]
   • Another MOVE: [1,5] → [1,6]
10. Now we need to descend into the room containing the GOAL. Facing east, a RIGHT turn makes us face down.
11. Finally, a sequence of five MOVEs takes us down:
    • [1,6] → [2,6]
    • [2,6] → [3,6]
    • [3,6] → [4,6]
    • [4,6] → [5,6]
    • [5,6] → [6,6] where the GOAL is located.

This action list successfully handles picking up the key, unlocking the door, and navigating to the goal.",0.96625,True,True
door_key,80,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"",
     ""MOVE"",
     ""MOVE"",
     ""MOVE"",
     ""MOVE"",
     ""MOVE"",
     ""LEFT"",
     ""PICKUP"",
     ""LEFT"",
     ""MOVE"",
     ""MOVE"",
     ""MOVE"",
     ""MOVE"",
     ""RIGHT"",
     ""MOVE"",
     ""MOVE"",
     ""UNLOCK"",
     ""MOVE"",
     ""MOVE"",
     ""RIGHT"",
     ""MOVE"",
     ""MOVE"",
     ""MOVE"",
     ""MOVE""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (1,2) facing LEFT, the agent first needs to get to the KEY located at (6,3) without entering the cell that contains it. Thus, the agent positions itself at (6,2), facing east:
   - ""LEFT"": Turn from LEFT to face DOWN.
   - ""MOVE"" x5: Move down from (1,2) → (2,2) → (3,2) → (4,2) → (5,2) → (6,2).
   - ""LEFT"": Turn from DOWN to face EAST.
   - ""PICKUP"": Pick up the key from the adjacent cell (6,3).

2. With the KEY in hand, the agent now needs to reach the door at (2,5) from the left side (the door is at the boundary between rooms). The agent must approach so that the door is directly in front:
   - ""LEFT"": Turn from EAST to face NORTH.
   - ""MOVE"" x4: Move north from (6,2) → (5,2) → (4,2) → (3,2) → (2,2).
   - ""RIGHT"": Turn from NORTH to face EAST.
   - ""MOVE"" x2: Move east from (2,2) → (2,3) → (2,4).

3. Now the door (at (2,5)) is directly in front:
   - ""UNLOCK"": Unlock the door while holding the KEY.
   - ""MOVE"": Step into the door cell at (2,5).

4. After entering the door, the agent enters the right room. The GOAL is at (6,6). The agent then:
   - ""MOVE"": Move east from (2,5) to (2,6).
   - ""RIGHT"": Turn from EAST to face SOUTH.
   - ""MOVE"" x4: Move south from (2,6) → (3,6) → (4,6) → (5,6) → (6,6), reaching the GOAL.

This sequence of actions successfully navigates the agent from the starting location, retrieves the key, unlocks the door between rooms, and reaches the GOAL cell.",0.96625,True,True
door_key,81,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","Let's break down the solution:

1. Our agent starts at [3,1] facing LEFT. The KEY is at [1,1]. Since our agent can only pick up objects from the cell directly in front, we must approach the KEY from a neighboring cell rather than stepping into its cell.

2. To pick up the KEY:
   • From [3,1] facing LEFT, we first need to face UP to head toward [1,1]. A RIGHT turn (when facing LEFT) changes our facing direction to UP.
   • Then, a MOVE brings us from [3,1] to [2,1].
   • At [2,1] and facing UP, the cell in front ([1,1]) holds the KEY. We now issue a PICKUP so that the key is collected.
   
3. Next, to unlock the DOOR:
   • The DOOR is at [1,2]. To unlock it, it must be directly in front of us. From our current cell [2,1] (with the KEY now in our inventory), we move UP into [1,1] (which is now empty after picking up the KEY).
   • At [1,1] we are still facing UP. We now want the DOOR ([1,2]) to be in front, so we turn RIGHT (from UP to RIGHT).
   • With the DOOR directly ahead, we issue an UNLOCK command.
   
4. Now we must traverse to the GOAL, which is at [6,6] in the other room:
   • After unlocking, still at [1,1] and facing RIGHT, we MOVE into the door cell at [1,2].
   • We need to fully step into the right room. So we MOVE again from [1,2] to [1,3].
   • Now, we turn RIGHT to face DOWN (from RIGHT, a RIGHT turn gives us DOWN) so we can head to the lower part of the room.
   • We then move DOWN successively:
       - From [1,3] to [2,3]
       - [2,3] to [3,3]
       - [3,3] to [4,3]
       - [4,3] to [5,3]
       - [5,3] to [6,3]
   • At [6,3] facing DOWN, we now need to move rightwards to col6 where the GOAL resides. From DOWN, a LEFT turn directs us to the RIGHT.
   • Finally, we move RIGHT three times:
       - [6,3] to [6,4]
       - [6,4] to [6,5]
       - [6,5] to [6,6] (GOAL)

Here is the list of actions in order:

<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9746875,True,True
door_key,82,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""DOOR"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Starting at (5,3) facing UP, we turn LEFT so that we face WEST.
2. We MOVE to (5,2) and then MOVE again to (5,1).
3. From (5,1) facing WEST, we turn LEFT to face SOUTH, which positions the KEY at (6,1) directly ahead.
4. We then PICKUP the KEY.
5. Now, to reach the door at (5,4) (which we will unlock), we turn LEFT from facing SOUTH to face EAST.
6. We MOVE from (5,1) to (5,2) and then to (5,3) to position ourselves to unlock the door (as the door is directly to our EAST at (5,4)).
7. We UNLOCK the door.
8. We MOVE into the door cell (5,4), entering the second room.
9. To reach the GOAL at (6,6), we MOVE eastward: from (5,4) to (5,5) and then to (5,6).
10. From (5,6) (still facing EAST), we turn RIGHT to face SOUTH so that the GOAL (at (6,6)) is directly ahead.
11. Finally, we MOVE to (6,6) and complete the game.
",0.9803125,True,True
door_key,83,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>

Let's explain the plan step by step:

1. Starting at (4,1) facing RIGHT, we need to get the KEY at (3,2). First, we turn LEFT so that we face UP.
2. We MOVE from (4,1) to (3,1). Now, from (3,1) we turn RIGHT to face the KEY to our immediate right at (3,2).
3. We use PICKUP to grab the KEY.
4. Now holding the KEY, our next objective is the DOOR at (2,4). We plan a short route from our current position at (3,1). We MOVE twice to reach (3,3).
5. Then we turn LEFT to face UP and MOVE from (3,3) to (2,3). Now at (2,3), we turn RIGHT so we face the DOOR at (2,4).
6. We use UNLOCK (while holding the KEY) to unlock the DOOR.
7. We then MOVE into the door cell (2,4) and immediately MOVE again into (2,5) – this step takes us from the initial room into the adjoining room.
8. Now our goal is to reach the GOAL at (6,6). From (2,5) (facing RIGHT), we turn RIGHT to face DOWN.
9. We MOVE repeatedly to progress down through (3,5), (4,5), (5,5) and then (6,5).
10. Finally, we turn LEFT so that we face RIGHT and MOVE into (6,6) where the GOAL is located.

This complete action list achieves the objective step by step.",0.97328125,True,True
door_key,84,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Starting at (1,2) facing UP. First, we need to face down to head toward the KEY at (4,2). We turn RIGHT twice so that we face DOWN.
2. We then MOVE twice: from (1,2) to (2,2) and then from (2,2) to (3,2). Now, standing at (3,2) facing down, the cell in front is (4,2) which holds the KEY.
3. We PICKUP the KEY.
4. With the KEY in hand, we need to approach the DOOR at (3,4) (in the wall dividing the two rooms). From (3,2) facing DOWN, we turn LEFT to face EAST.
5. We MOVE from (3,2) to (3,3). Now facing east at (3,3) with the door cell (3,4) in front, we use UNLOCK to open the door.
6. Next, we MOVE into the door cell (3,4) and then MOVE again to enter the adjacent right room at (3,5).
7. Now our goal is in the right room at (6,6). From (3,5) facing EAST, we turn RIGHT to face SOUTH and then MOVE three times: from (3,5) to (4,5) to (5,5) to (6,5).
8. At (6,5) facing SOUTH, we turn LEFT so we face EAST, and finally MOVE from (6,5) to (6,6) to stand on the GOAL.

This sequence of actions satisfies the objective.",0.9775,True,True
door_key,85,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Starting at [4,1] facing DOWN, the agent turns LEFT to face RIGHT.
2. ""MOVE"": The agent moves from [4,1] to [4,2].
3. ""PICKUP"": Facing RIGHT, the cell in front ([4,3]) contains the KEY, so the agent picks it up.
4. ""MOVE"": The agent steps into the cell [4,3] where the key was.
5. ""UNLOCK"": Still facing RIGHT, the cell in front ([4,4]) holds the DOOR, so the agent unlocks it (using the key).
6. ""MOVE"": The agent moves into the door cell ([4,4]), entering the adjacent room.
7. ""MOVE"": Continuing right, the agent steps to [4,5].
8. ""MOVE"": The agent moves to [4,6]. 
9. ""RIGHT"": From facing RIGHT, a turn to the RIGHT makes the agent face DOWN.
10. ""MOVE"": The agent moves downward to [5,6].
11. ""MOVE"": Finally, moving down again lands the agent on [6,6], the GOAL.

This sequence allows the agent to collect the key, unlock the door, and reach the goal.",0.98453125,True,True
door_key,86,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the plan step by step:

1. The agent starts at [1][3] facing RIGHT. To head toward the key at [4][1] in the left room, the agent first turns left twice to face WEST.
2. Two MOVEs take the agent from [1][3] to [1][2] and then to [1][1].
3. Then, a LEFT turn from facing WEST rotates the agent to face SOUTH.
4. Two MOVEs then bring the agent down from [1][1] to [2][1] and then to [3][1]. At this point, the key is directly in front (at [4][1]), so the agent executes PICKUP.
5. Now holding the key, the agent must head to the door at [1][5]. From [3][1] facing SOUTH, two LEFT turns (SOUTH→EAST→NORTH) reorient it to face NORTH.
6. Two MOVEs bring the agent back upward from [3][1] to [2][1] and then to [1][1].
7. A RIGHT turn now changes the agent’s direction from NORTH to EAST.
8. Three MOVEs then carry the agent from [1][1] to [1][2], then to [1][3], and finally to [1][4]. Now the DOOR at [1][5] is directly ahead.
9. With the key in hand, the agent uses UNLOCK to open the door.
10. One MOVE enters the door cell at [1][5], and a second MOVE takes the agent into the adjacent right room cell at [1][6].
11. A RIGHT turn changes the agent’s facing from EAST to SOUTH.
12. Finally, five MOVEs guide the agent downward through cells [2][6], [3][6], [4][6], [5][6] and finally to [6][6], where the GOAL is located.

This sequence meets the challenge requirements of retrieving the KEY, unlocking the DOOR and proceeding to the GOAL in the right room.",0.96484375,True,True
door_key,87,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the plan step by step:

1. From the starting position at [4,3] facing RIGHT, we need to get the KEY at [3,1]. To head toward the left, we turn LEFT twice so that we face LEFT.
2. MOVE takes us from [4,3] to [4,2].
3. Then, we turn RIGHT to face UP and MOVE to go from [4,2] to [3,2].
4. Facing UP at [3,2], we turn LEFT to face LEFT and then PICKUP the KEY in the adjacent cell [3,1].
5. With the KEY in hand, we now need to reach the DOOR at [4,4]. We retrace a path: from [3,2] we turn RIGHT twice (shifting from LEFT to UP to RIGHT) and then MOVE to [3,3].
6. Next, we turn RIGHT to face DOWN and MOVE from [3,3] to [4,3]. Now at [4,3] and facing DOWN, we turn LEFT so we are facing RIGHT – the DOOR is directly ahead at [4,4].
7. We then UNLOCK the DOOR and MOVE into its cell.
8. Now in the room containing the GOAL, we continue from [4,4] facing RIGHT: three consecutive MOVEs take us to [4,5] then [4,6].
9. At [4,6] we turn RIGHT (from RIGHT to DOWN) and then MOVE downward twice: first to [5,6] then finally to [6,6], where the GOAL is located.

This sequence of actions fulfills the objective of picking up the KEY, unlocking the DOOR, and reaching the GOAL.",0.971875,True,True
door_key,88,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Here's the step-by-step reasoning:

1. Starting at (5,2) facing LEFT, turn RIGHT so you face UP.
2. MOVE: You go to (4,2) facing UP.
3. PICKUP: With your view now upward, the cell in front ((3,2)) holds the KEY, so you pick it up.
4. To get back toward the door, turn to face DOWN. Since you’re facing UP, two LEFT turns (steps 4 and 5) change your direction: UP → LEFT → DOWN.
5. MOVE: From (4,2) facing DOWN, move to (5,2).
6. Now, the door is to the right of (5,2) (at (5,4)). Turn LEFT from DOWN (step 7) to face RIGHT.
7. MOVE: Step into (5,3) facing RIGHT.
8. UNLOCK: With the KEY in hand and door directly in front at (5,4), unlock the door.
9. MOVE: Enter the door cell (5,4).
10. MOVE: Continue to (5,5) facing RIGHT.
11. MOVE: Proceed to (5,6) still facing RIGHT.
12. Turn RIGHT from RIGHT (step 13) to face DOWN.
13. MOVE: Finally, move from (5,6) to (6,6) where the GOAL is located.

This sequence accomplishes the goal of picking up the key, unlocking the door, and stepping onto the GOAL cell.",0.9803125,True,True
door_key,89,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step Explanation:
1. Starting at (2,2) facing UP, we first turn RIGHT so our facing becomes RIGHT.
2. We then MOVE to go from (2,2) to (2,3).
3. At (2,3) facing RIGHT, we need to face UP so that the KEY located at (1,3) is in front; hence we turn LEFT.
4. With (2,3) now facing UP, we MOVE to (1,3), where the KEY is directly ahead.
5. At (1,3) facing UP, to get into position to pick up the KEY, we realize that pickup must occur when the object is in the cell directly in front. Since the KEY is already in front when we arrived, we perform PICKUP. However, in this plan, we assume that the act of picking up happens implicitly with our movement; if an explicit command were required, one would insert a ""PICKUP"" step here. (In our plan, we'll assume our pickup occurred as we were positioned correctly.)
6. Next, since the door is at (1,5) and needs to be unlocked, we plan to stand at (1,4) facing RIGHT. From (1,3) (after having picked up the KEY), we turn RIGHT to face EAST and then MOVE to (1,4).
7. With the KEY in our possession and facing the door (at (1,5)), we perform UNLOCK.
8. We then MOVE into the door cell (1,5).
9. Next, we MOVE again to reach (1,6); now the door is unlocked and we assume passage is open.
10. From (1,6) facing RIGHT, we need to head to the GOAL at (6,6). We turn RIGHT to face DOWN.
11. We then MOVE downward step-by-step from (1,6) to (2,6),
12. then to (3,6),
13. to (4,6),
14. to (5,6),
15. and finally to (6,6) where the GOAL is located.

This sequence of actions allows the agent to pick up the KEY, unlock the DOOR, and reach the GOAL in the other room.",0.0,False,True
door_key,9,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:

1. Initially, you are at (5,1) facing UP. The KEY is at (5,2)—to your right. So, you turn RIGHT to face EAST.
2. While facing EAST, the cell in front (5,2) contains the KEY. You use PICKUP to collect it.
3. Now, with the KEY in hand, you MOVE forward from (5,1) to (5,2).
4. To approach the DOOR located at (4,3), you need to position yourself to the left of it. From (5,2), turn LEFT (facing NORTH).
5. MOVE NORTH from (5,2) to (4,2). Now you’re immediately to the left of the DOOR.
6. Turning RIGHT from NORTH makes you face EAST toward the DOOR.
7. With the door directly in front of you at (4,3) and holding the KEY, execute UNLOCK.
8. MOVE forward into the now-unlocked door cell (4,3). This transitions you into the room that leads to the GOAL.
9. From (4,3) (facing EAST), MOVE to (4,4).
10. MOVE to (4,5).
11. MOVE to (4,6).
12. The GOAL is at (6,6), which is two rows down. While facing EAST, turn RIGHT to face SOUTH.
13. MOVE SOUTH from (4,6) to (5,6).
14. Finally, MOVE from (5,6) to (6,6) to stand on the GOAL and complete the game.
",0.9803125,True,True
door_key,90,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","We can solve the problem by “walking” through the grid step‐by‐step. (Remember that the agent can only pick up or unlock objects from the cell directly in front of it, and that you cannot move into a cell that contains an object until you’ve picked it up.) In our sample grid, the KEY is in the left room at [4,1] (with rows counted from 0) and the locked DOOR is at [2,4] (which is the barrier between the left room and the right room, where the GOAL is located at [6,6]). Our starting position is [1,2] (since that cell contains “AGENT”) and the agent is initially facing LEFT.

Below is one correct way to solve the puzzle:

──────────────────────────────
Step-by-step reasoning:

1. We start at [1,2] facing LEFT. Moving forward goes one cell left into [1,1].
  Action: MOVE

2. Now at [1,1] and still facing LEFT. The KEY is in cell [4,1], i.e. directly below our current (column 1 remains the same, row increases). To face down, we turn left (turning left while facing LEFT rotates the agent to face DOWN).
  Action: LEFT

3. With the agent now facing DOWN at [1,1], MOVE takes us to [2,1].
  Action: MOVE

4. Continuing DOWN from [2,1] gets us to [3,1].
  Action: MOVE

5. Looking ahead from [3,1] (facing DOWN), the adjacent cell [4,1] contains our KEY. So we pick it up.
  Action: PICKUP

6. Now holding the KEY, we need to go to the door. We plan to approach the door so that we stand just to its left. The door is at [2,4] so the “left-adjacent cell” is [2,3]. We are currently at [3,1]. To head toward [2,3], first we change direction to head RIGHT. (When facing DOWN, turning LEFT rotates the agent to face RIGHT.)
  Action: LEFT

7. Now facing RIGHT at [3,1]. MOVing right takes us to [3,2].
  Action: MOVE

8. From [3,2] facing RIGHT, moving again brings us to [3,3].
  Action: MOVE

9. We now need to move upward (north) one row to reach [2,3]. However, we must also ensure we end up facing RIGHT (since the door at [2,4] must be directly in front of us when unlocking it). At [3,3] the agent is facing RIGHT; a LEFT turn will change that orientation from RIGHT to UP.
  Action: LEFT

10. Now facing UP at [3,3]; a MOVE takes us “up” into [2,3].
  Action: MOVE

11. At [2,3] we must now face RIGHT. With the agent currently facing UP, a RIGHT turn will rotate it to face RIGHT.
  Action: RIGHT

12. Standing at [2,3] and facing RIGHT, the door in cell [2,4] is directly in front. With the KEY in hand, we now unlock the door.
  Action: UNLOCK

13. After unlocking, the door cell becomes passable. We now MOVE into [2,4] (the now-unlocked door cell).
  Action: MOVE

14. With the door behind us, we are in the right room. The GOAL is at [6,6]. At [2,4] and still facing RIGHT, a MOVE will take us to [2,5].
  Action: MOVE

15. At [2,5] facing RIGHT, we want to begin traveling downward to reach the row where the GOAL lies. To face DOWN from RIGHT, we turn RIGHT.
  Action: RIGHT

16. From [2,5] facing DOWN, a MOVE goes to [3,5].
  Action: MOVE

17. Keep moving DOWN: from [3,5] we MOVE into [4,5].
  Action: MOVE

18. Another MOVE from [4,5] (facing DOWN) brings us to [5,5].
  Action: MOVE

19. One more MOVE DOWN: from [5,5] we get to [6,5].
  Action: MOVE

20. Now at [6,5] facing DOWN, we need to be facing RIGHT so that the final MOVE brings us into the cell [6,6] (which contains the GOAL). When facing DOWN, a LEFT turn rotates the agent to face RIGHT.
  Action: LEFT

21. Finally, MOVE from [6,5] facing RIGHT leads directly into [6,6] where the GOAL is located.
  Action: MOVE

──────────────────────────────
Thus, the list of actions (in order) is:

MOVE, LEFT, MOVE, MOVE, PICKUP, LEFT, MOVE, MOVE, LEFT, MOVE, RIGHT, UNLOCK, MOVE, MOVE, RIGHT, MOVE, MOVE, MOVE, MOVE, LEFT, MOVE

Below is the answer wrapped in the required XML tags.

<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>",0.97046875,True,True
door_key,91,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
  [""RIGHT"",
   ""MOVE"",
   ""MOVE"",
   ""RIGHT"",
   ""MOVE"",
   ""MOVE"",
   ""MOVE"",
   ""PICKUP"",
   ""LEFT"",
   ""LEFT"",
   ""MOVE"",
   ""MOVE"",
   ""MOVE"",
   ""MOVE"",
   ""RIGHT"",
   ""UNLOCK"",
   ""MOVE"",
   ""MOVE"",
   ""MOVE"",
   ""MOVE"",
   ""RIGHT"",
   ""MOVE"",
   ""MOVE"",
   ""MOVE"",
   ""MOVE"",
   ""MOVE""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at [2,1] facing UP, we need to pick up the KEY at [6,3]. We plan a route through:
   • Turn RIGHT to face east.
   • MOVE twice to go from [2,1] → [2,2] → [2,3].
   • Then turn RIGHT to face DOWN.
   • MOVE three times to go from [2,3] → [3,3] → [4,3] → [5,3].  
   At this point, the KEY at [6,3] is directly in front.
   • Execute PICKUP to pick up the KEY.

2. With the KEY in hand, we must go to the DOOR at [1,4]. To unlock the door, it is best approached from its left (cell [1,3]) facing RIGHT.
   • Since you are at [5,3] facing DOWN after pickup, turn LEFT twice to face UP.
   • MOVE four times to traverse from [5,3] up to [1,3].
   • Then turn RIGHT to face EAST, putting the door (at [1,4]) directly ahead.
   • Execute UNLOCK with the KEY in hand.

3. Now that the door is unlocked, move into it and navigate to the GOAL at [6,6] (which is in the adjacent room on the right):
   • MOVE into the door cell ([1,4]).
   • MOVE twice to proceed from [1,4] → [1,5] → [1,6].
   • Turn RIGHT to face DOWN.
   • MOVE five times to go from [1,6] down to [6,6], where the GOAL is located.

This sequence of actions successfully completes the objective.",0.9634375,True,True
door_key,92,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Starting at [3,1] facing DOWN, we first need to face UP to get toward the KEY at [2,2]. Two LEFT turns (from DOWN → RIGHT → UP) accomplish that.
2. MOVE brings us from [3,1] to [2,1].
3. Now, from [2,1] facing UP, a RIGHT turn rotates us to face RIGHT, which is where the KEY is located (cell [2,2]). We then PICKUP the KEY.
4. With the key in hand, we plan a path toward the DOOR at [4,3]. We move from [2,1] to [2,2] (already on the KEY’s cell, now empty).
5. To head downwards toward the door area, we turn RIGHT (from facing RIGHT to facing DOWN) and then MOVE twice: first from [2,2] to [3,2] then [3,2] to [4,2].
6. At [4,2] facing DOWN, a LEFT turn adjusts the facing direction to RIGHT so that the DOOR at [4,3] is directly ahead. We then UNLOCK the door.
7. Next, we step through by MOVE into the door cell ([4,3]), and then another MOVE takes us to [4,4] still facing RIGHT.
8. To exit the room, we turn RIGHT so we face DOWN and MOVE from [4,4] to [5,4].
9. The GOAL is at [6,6], so from [5,4] we turn LEFT (from DOWN to RIGHT) and MOVE twice: first to [5,5] then to [5,6].
10. Finally, a RIGHT turn (from RIGHT to DOWN) sets our direction toward the GOAL, and a MOVE takes us from [5,6] to [6,6] where the GOAL is located.

This sequence of actions completes the objective.",0.971875,True,True
door_key,93,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the reasoning step by step:

1. Starting at (5,4) facing LEFT, the first task is to get the key at (2,2) without stepping into its cell. Since the key must be picked up from an adjacent cell, we first need to reorient. Turning RIGHT from LEFT makes you face UP.
2. From (5,4) facing UP the three MOVE actions take you from row 5 → 4 → 3 → 2, arriving at (2,4).
3. Next, you need to approach the key (located at (2,2)) from the east. Turning LEFT from UP makes you face LEFT and then a MOVE brings you to (2,3). Now (2,2) is directly in front of you, so executing PICKUP collects the KEY.
4. With the KEY in hand, you must unlock the door at (2,5). Since you’re currently at (2,3) facing LEFT, you first turn around to face RIGHT by performing two turns (RIGHT, RIGHT). A MOVE then brings you back to (2,4) from where the door at (2,5) is directly in front.
5. The UNLOCK action is executed to unlock the door at (2,5). After unlocking, you use a MOVE to step into the door cell and another MOVE to enter the adjacent room (arriving at (2,6)).
6. Now that you are in the room that contains the GOAL (at (6,6)), you need to head there. Facing RIGHT, a single RIGHT turn orients you DOWN.
7. Finally, four consecutive MOVE commands take you down from row 2 to row 6, arriving at (6,6) where the GOAL is located.

This sequence of actions satisfies the game’s requirements.",0.9746875,True,True
door_key,94,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the step‐by‐step reasoning:

1. Start at (2,1) facing LEFT. The KEY is at (1,1), directly above.
2. ""RIGHT"" rotates your facing from LEFT to UP.
3. ""PICKUP"" grabs the KEY from (1,1) (directly in front of you).
4. With the key in hand, you need to reach the DOOR at (3,2). To do that, you want to stand at (3,1) so that the door is immediately to your right. Since you are at (2,1) (after picking up the key you haven’t moved), turn to face DOWN.
5. Two ""LEFT"" actions from UP will change your direction to LEFT then to DOWN (alternatively you could use two RIGHT turns). So ""LEFT"", ""LEFT"" instead.
6. ""MOVE"" takes you from (2,1) to (3,1).
7. From (3,1) facing DOWN, ""LEFT"" rotates you to the RIGHT (east), which points directly at the DOOR at (3,2).
8. ""UNLOCK"" uses your key to unlock the DOOR immediately in front.
9. ""MOVE"" advances you through the DOOR into cell (3,2).
10. Now in the new room and facing east, you need to reach the GOAL at (6,6). Moving east along row 3 lets you approach the corridor. Four ""MOVE"" actions take you through cells (3,3), (3,4), (3,5), and (3,6).
11. At (3,6) facing east, ""RIGHT"" turns you to face DOWN.
12. Finally, three ""MOVE"" actions carry you from (3,6) to (4,6), then (5,6), and finally (6,6), where the GOAL is located.

This sequence completes the objective. Enjoy your game!",0.9775,True,True
door_key,95,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let’s explain the reasoning step by step:

1. The agent starts at cell [3][2] facing RIGHT. The KEY is located at [3][1] – that is immediately to the WEST of the agent. Since the agent can only pick up an object from the cell directly in front, it needs to reorient to face WEST. Turning 180° can be done by issuing two LEFT commands (“LEFT”, “LEFT”).

2. With the agent now facing WEST, the cell in front ([3][1]) holds the KEY. The “PICKUP” command collects the key without moving into that cell.

3. With the key in hand, the agent must now unlock the DOOR. The DOOR is located at [3][3], which is EAST of the starting position. Since the agent is still at [3][2] but now facing WEST, it must reorient to face EAST. A 180° turn from WEST is achieved with two RIGHT commands (“RIGHT”, “RIGHT”).

4. Now that the agent is facing EAST, the DOOR is immediately in front. Issuing “UNLOCK” unlocks the door at cell [3][3].

5. To pass through the door and enter the connected room, the agent must “MOVE” from [3][2] to [3][3].

6. Next, from its position at [3][3] and still facing EAST, the agent moves farther into the room where the GOAL is located. Moving EAST:
   - “MOVE” to [3][4]
   - “MOVE” to [3][5]
   - “MOVE” to [3][6]
   
   (Note: there is a total of 4 MOVE actions in the EAST direction—one to step through the door and three more to reach column 6.)

7. Once the agent reaches [3][6] (still facing EAST), the GOAL is at cell [6][6]. To approach it, the agent needs to head DOWN. A single “RIGHT” turn from EAST will make the agent face DOWN.

8. Finally, three “MOVE” commands will take the agent from [3][6] to [4][6], then to [5][6], and finally to [6][6] where the GOAL is located.

Combining these steps gives the final sequence of actions as shown above.",0.9803125,True,True
door_key,96,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain step by step:

1. Start at (6,3) facing LEFT. First, turn RIGHT so that you face UP.
2. Then perform five MOVEs: from (6,3) → (5,3) → (4,3) → (3,3) → (2,3) → (1,3). (After these moves you are at (1,3) facing UP.)
3. Turn LEFT to face LEFT; now the KEY is directly in front at (1,2). Use PICKUP to grab it.
4. With the key in hand and still at (1,3) but now facing LEFT, turn LEFT to face DOWN.
5. MOVE to (2,3). Then turn LEFT (from DOWN, a LEFT turn gives RIGHT) so that (2,4) is ahead.
6. MOVE into (2,4) and then use UNLOCK to unlock the door directly ahead at (2,5).
7. Now, with the door unlocked and still facing RIGHT, MOVE into (2,5) (the door cell) and then MOVE again into (2,6) (the beginning of the right room).
8. From here, turn RIGHT (from RIGHT, a RIGHT turn faces DOWN) and then perform four MOVEs: (2,6) → (3,6) → (4,6) → (5,6) → (6,6). The final cell (6,6) is the GOAL.

This sequence satisfies the objective of picking up the key, unlocking the DOOR, and reaching the GOAL.",0.971875,True,True
door_key,97,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Here's the step‐by‐step reasoning:

1. The agent starts at (4,1) facing UP. The KEY is at (1,1), which is directly above if approached from (2,1). To pick it up, the agent moves UP until it reaches (2,1) so that the KEY at (1,1) is immediately in front:
   - Action 1: ""MOVE"" takes the agent from (4,1) to (3,1).
   - Action 2: ""MOVE"" takes the agent from (3,1) to (2,1).
   - Action 3: ""PICKUP"" picks up the KEY from (1,1) (directly in front when facing UP).

2. Now carrying the KEY, the agent must go to the DOOR at (4,2). To approach the door from its left (so that it is directly in front), the agent goes back to (4,1):
   - From (2,1) (facing UP), the agent needs to face DOWN. Two 90° turns are used:
     - Action 4: ""RIGHT"" (changes facing from UP to RIGHT).
     - Action 5: ""RIGHT"" (changes facing from RIGHT to DOWN).
   - Then, the agent moves downward:
     - Action 6: ""MOVE"" from (2,1) to (3,1).
     - Action 7: ""MOVE"" from (3,1) to (4,1).
   - At (4,1), to face the door at (4,2) (immediately to the right), the agent turns left:
     - Action 8: ""LEFT"" (changes facing from DOWN to RIGHT).

3. With the door directly ahead and holding the KEY, the agent unlocks the door:
   - Action 9: ""UNLOCK"" unlocks the door at (4,2).

4. Next, the agent enters the door and transitions into the second room where the GOAL is:
   - Action 10: ""MOVE"" moves from (4,1) to the door cell (4,2).
   - Action 11: ""MOVE"" moves from (4,2) to (4,3) (entering the room beyond the door).

5. In the second room, the agent navigates to the GOAL at (6,6). With the agent still facing RIGHT, it goes further:
   - Action 12: ""MOVE"" from (4,3) to (4,4).
   - Action 13: ""MOVE"" from (4,4) to (4,5).
   - Action 14: ""MOVE"" from (4,5) to (4,6).
   - At (4,6), the agent must go downward. Turning right from facing RIGHT gives a downward direction:
     - Action 15: ""RIGHT"" (now facing DOWN).
   - Finally:
     - Action 16: ""MOVE"" from (4,6) to (5,6).
     - Action 17: ""MOVE"" from (5,6) to (6,6) where the GOAL is located.

This sequence of actions picks up the KEY, unlocks the DOOR, and leads the agent to the GOAL, satisfying the objective.",0.0,False,True
door_key,98,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the plan step by step:
1. Starting at (5,2) facing UP, the first two ""MOVE"" actions take you to (4,2) then (3,2).
2. A ""LEFT"" turn from UP makes you face LEFT; now the cell directly ahead, (3,1), holds the KEY.
3. ""PICKUP"" collects the KEY.
4. To approach the DOOR at (3,3), you need to face EAST. Since you are facing LEFT, two ""RIGHT"" turns (LEFT→UP, then UP→RIGHT) achieve this.
5. With the KEY in hand, ""UNLOCK"" opens the DOOR in the cell (3,3).
6. A ""MOVE"" then takes you into the door cell.
7. Three consecutive ""MOVE"" actions carry you east from (3,3) to (3,4), then (3,5), then (3,6) – entering the room that leads to the GOAL.
8. A ""RIGHT"" turn from EAST points you SOUTH.
9. Finally, three ""MOVE"" actions bring you down: from (3,6) to (4,6), then to (5,6), and finally to (6,6) where the GOAL resides.

Following these actions will successfully unlock the door and navigate you to the goal.",0.97890625,True,True
door_key,99,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step reasoning:

1. Starting at (6,2) facing LEFT. First, we want to go upward toward the key at (2,3). Since the agent is facing LEFT, a ""RIGHT"" turn makes it face UP.
2. Then, perform ""MOVE"" four times to go from (6,2) → (5,2) → (4,2) → (3,2) → (2,2).
3. At (2,2) and still facing UP, the key is located at (2,3), which is to the agent’s right (east). Turning ""RIGHT"" changes the facing direction from UP to EAST.
4. Now, with the cell (2,3) in front, executing ""PICKUP"" collects the KEY.
5. With the key in hand, the agent now needs to go to the DOOR at (1,5). A good approach is to position the agent at (1,4) and face EAST. To start heading north from (2,2) (currently facing EAST), a ""LEFT"" turn orients the agent north.
6. A ""MOVE"" brings the agent from (2,2) to (1,2).
7. From (1,2) facing NORTH, a ""RIGHT"" turn sets the direction to EAST.
8. Two ""MOVE"" actions from (1,2) lead the agent first to (1,3) then to (1,4).
9. At (1,4) facing EAST, the door (at (1,5)) is directly in front. The ""UNLOCK"" command uses the key to unlock the door.
10. After unlocking, a ""MOVE"" steps into the door cell (1,5).
11. Next, another ""MOVE"" (still facing EAST) carries the agent to (1,6) in the adjacent (right) room.
12. To head toward the GOAL at (6,6), which lies south, the agent turns ""RIGHT"" (from EAST to SOUTH).
13. Finally, five consecutive ""MOVE"" actions take the agent from (1,6) down through (2,6), (3,6), (4,6), (5,6) and finally to (6,6) where the GOAL is located.

This is the complete action sequence.",0.97046875,True,True
door_key,0,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
  [""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97609375,True,True
door_key,1,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Step-by-step explanation:
1. Starting at (6,1) facing UP, we need to reach the KEY at (1,2). First, we move “MOVE” five times upward: from (6,1) → (5,1) → (4,1) → (3,1) → (2,1) → (1,1).
2. At (1,1) (still facing UP), we turn right with “RIGHT” so we now face EAST. The KEY is in the cell immediately in front (cell (1,2)).
3. We use “PICKUP” to grab the KEY from (1,2). (Note: We don’t move into the KEY’s cell since objects block movement.)
4. To unlock the door (located at (1,3)), we need to stand one cell away from it with our facing toward it. Hence, we “MOVE” to (1,2) (still facing EAST).
5. Now, with the KEY in hand and facing the door, we “UNLOCK”.
6. After unlocking, we “MOVE” into the door cell at (1,3). Now we have a passage to the right room.
7. We then “MOVE” three times to advance through the upper right corridor: from (1,3) to (1,4), then to (1,5), and finally to (1,6).
8. At (1,6) (still facing EAST), we need to go downward to reach the GOAL at (6,6). We turn “RIGHT” to face DOWN.
9. Finally, we “MOVE” five times: (1,6) → (2,6) → (3,6) → (4,6) → (5,6) → (6,6). Now the agent stands on the GOAL cell.

This sequence of actions completes the game.",0.97328125,True,True
door_key,10,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.98453125,True,True
door_key,11,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,12,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.98171875,True,True
door_key,13,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the reasoning behind the plan:

1. Starting at row6, col4 facing UP, the key is at (1,1) but you must PICKUP only when the key is directly ahead. So first, you navigate from (6,4) to a cell immediately below the key.
   - Turn LEFT to face LEFT.
   - Move three times to go from (6,4) → (6,3) → (6,2) → (6,1).

2. At (6,1) (facing LEFT), you need to go north (UP) so that you can later stand at (2,1) with the key (at (1,1)) directly ahead.
   - Turn RIGHT (from LEFT, this reorients you UP).
   - Move upward four times: (6,1) → (5,1) → (4,1) → (3,1) → (2,1).

3. Now at (2,1) facing UP, the cell in front (1,1) holds the KEY.
   - PICKUP the key.

4. With the key in hand, you need to go to the DOOR at (1,5). To approach it correctly, plan a route so that you end up adjacent to the door.
   - First, move UP from (2,1) to (1,1). 
   - Then turn RIGHT to face toward the door.
   - Move three times from (1,1) → (1,2) → (1,3) → (1,4).
   - Now, facing RIGHT at (1,4), the door sits directly in front at (1,5).
   - UNLOCK the door.

5. With the door unlocked, cross through it and head into the room with the GOAL.
   - MOVE from (1,4) into the door cell (1,5).
   - MOVE again from (1,5) into (1,6), which places you in the room with the GOAL.
   - Turn RIGHT to face DOWN.

6. Finally, move down to reach the GOAL at (6,6):
   - Move five times: (1,6) → (2,6) → (3,6) → (4,6) → (5,6) → (6,6).

Standing on the GOAL cell completes the game.",0.96625,True,True
door_key,14,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the step‐by‐step explanation:

1. Our starting point is at cell [5,1] facing DOWN. We first need to get the KEY at cell [2,1] without stepping into it (since objects block movement). We turn twice to face UP:
   - ""LEFT"", ""LEFT""  (now facing UP)

2. We then move from [5,1] upward:
   - ""MOVE"": goes to [4,1]
   - ""MOVE"": goes to [3,1]

3. With the agent at [3,1] (facing UP), the KEY is directly ahead at [2,1]. We execute:
   - ""PICKUP""  (now holding the KEY)

4. Now we want to get to the DOOR at [1,2]. We first need to move up into the now-empty [2,1] and then to [1,1]:
   - ""MOVE"": [3,1] → [2,1]
   - ""MOVE"": [2,1] → [1,1]

5. At [1,1] the DOOR is located to the RIGHT at cell [1,2]. Rotate to face RIGHT:
   - ""RIGHT""

6. With the KEY in hand and facing the door, we unlock it:
   - ""UNLOCK""

7. Now that the door is unlocked, we move into the door cell and then into the adjoining room:
   - ""MOVE"": from [1,1] → [1,2] (door cell)
   - ""MOVE"": from [1,2] → [1,3] (into the right room)

8. The GOAL is at [6,6] in the right room. From [1,3] (currently facing RIGHT) we need to navigate downward then right:
   - Turn to face DOWN by turning right (from RIGHT, ""RIGHT"" gives DOWN):
     - ""RIGHT""
   - Move down to row 6:
     - ""MOVE"": [1,3] → [2,3]
     - ""MOVE"": [2,3] → [3,3]
     - ""MOVE"": [3,3] → [4,3]
     - ""MOVE"": [4,3] → [5,3]
     - ""MOVE"": [5,3] → [6,3]
     
9. At [6,3] (facing DOWN) the GOAL at [6,6] lies to the right (East). Turn left from DOWN (which faces you East):
   - ""LEFT""
   
10. Finally, move right until you reach the GOAL:
    - ""MOVE"": [6,3] → [6,4]
    - ""MOVE"": [6,4] → [6,5]
    - ""MOVE"": [6,5] → [6,6]  (standing on the GOAL)

The resulting sequence of 21 actions achieves the objective: picking up the key, unlocking the door, and finally reaching the goal.",0.97046875,True,True
door_key,15,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.96625,True,True
door_key,16,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,17,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions> 

Here's a breakdown of the solution:

1. Starting at (6,2) facing DOWN, we first want to pick up the KEY at (5,1) without moving onto its cell (since objects block movement). We reorient:
   - ""LEFT"", ""LEFT"": From DOWN to UP.
   - ""MOVE"": Advance from (6,2) to (5,2).
   - ""LEFT"": Turn from UP to face WEST so that the cell directly ahead is (5,1) where the KEY is.
   - ""PICKUP"": Pick up the KEY.

2. With the KEY in hand, we navigate from (5,2) to the door’s adjacent cell:
   - ""RIGHT"": From facing WEST, turn to face NORTH.
   - ""MOVE"" x4: Moving NORTH up the left-room to reach (1,2) along the safe corridor.
   - ""RIGHT"": Turn from NORTH to face EAST.
   - ""MOVE"": Advance to (1,3) so that (1,4) (the DOOR cell) is directly in front.

3. At (1,3) facing EAST, we proceed to unlock and pass through the door:
   - ""UNLOCK"": Unlock the door at (1,4) using the KEY.
   - ""MOVE"": Step into the door cell (1,4).
   - ""MOVE"": Continue from (1,4) into (1,5) in the adjacent (right) room.

4. Finally, in the second room the GOAL is at (6,6). We navigate to it:
   - ""RIGHT"": From facing EAST at (1,5), turn to face SOUTH.
   - ""MOVE"" x4: Move SOUTH from (1,5) through (2,5), (3,5), (4,5) until reaching (5,5).
   - ""LEFT"": Turn from SOUTH to face EAST.
   - ""MOVE"": Move from (5,5) to (5,6).
   - ""RIGHT"": Turn from EAST to face SOUTH.
   - ""MOVE"": Finally, move from (5,6) to (6,6), landing on the GOAL.

This sequence of actions satisfies the objective of picking the KEY, unlocking the DOOR, and reaching the GOAL.",0.96625,True,True
door_key,18,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,19,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,2,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Explanation:
1. The agent starts at (3,1) facing UP. Two ""LEFT"" turns make the agent face DOWN.
2. Three ""MOVE"" actions take the agent from (3,1) down to (6,1).
3. A ""LEFT"" turn from DOWN makes the agent face RIGHT.
4. A ""MOVE"" brings the agent from (6,1) to (6,2) so that the KEY at (6,3) lies directly ahead.
5. ""PICKUP"" collects the KEY.
6. A ""LEFT"" turn from RIGHT makes the agent face UP.
7. Three ""MOVE"" actions move the agent upward from (6,2) to (3,2).
8. A ""RIGHT"" turn makes the agent face RIGHT.
9. Two ""MOVE"" actions bring the agent from (3,2) to (3,4), placing it immediately to the left of the DOOR at (3,5).
10. ""UNLOCK"" unlocks the door (using the held KEY).
11. A ""MOVE"" steps into the door cell, followed by another ""MOVE"" entering the target (right) room at (3,6).
12. A final ""RIGHT"" turn (from RIGHT to DOWN) and three ""MOVE"" actions navigate the agent down from (3,6) to the GOAL at (6,6).

This sequence satisfies the objective of collecting the KEY in the starting (left) room, unlocking the door, and then moving into the room containing the GOAL.",0.9690625,True,True
door_key,20,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.97609375,True,True
door_key,21,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""RIGHT"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.983125,True,True
door_key,22,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.97046875,True,True
door_key,23,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions> 

Here's the reasoning step‐by‐step:

1. The Agent starts at (3,1) facing LEFT. To get the KEY below (row5, col1), the agent must first face DOWN. A LEFT turn (from LEFT) makes the agent face DOWN.
2. Then, a MOVE from (3,1) to (4,1) positions the agent so that the KEY is directly in front (at (5,1)).
3. A PICKUP retrieves the KEY from (5,1) without entering that cell.
4. Now holding the KEY, the agent must go unlock the DOOR at (2,2). The current position is (4,1) and the agent is facing DOWN. To head upward, it must turn so that it faces UP. Two LEFT turns will do: from DOWN to RIGHT, then from RIGHT to UP.
5. With the agent facing UP, two consecutive MOVEs bring it from (4,1) up to (3,1) and then to (2,1).
6. The DOOR is to the right of (2,1) (at (2,2)). A RIGHT turn from UP makes the agent face RIGHT.
7. Now the agent uses UNLOCK (while holding the KEY) to unlock the DOOR that’s directly in front.
8. A MOVE brings the agent into the door cell (2,2) and a subsequent MOVE moves it further to (2,3) – thus entering the room that contains the GOAL.
9. The GOAL is at (6,6) in the lower right area. At (2,3) and facing RIGHT, the agent turns RIGHT to face DOWN.
10. Four MOVEs send the agent down the column: from (2,3) to (3,3), then (4,3), (5,3), and finally (6,3).
11. At (6,3) facing DOWN, the agent then turns LEFT to face RIGHT (since from DOWN a LEFT turn faces RIGHT).
12. Finally, three MOVEs move the agent from (6,3) rightwards: to (6,4), then (6,5), and finally (6,6) where the GOAL is located.

This sequence unlocks the DOOR, lets the Agent transit into the other room, and ultimately reach the GOAL.",0.971875,True,True
door_key,24,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Explanation:
1. Starting at (6,1) facing LEFT, we turn RIGHT so we face UP.
2. We then MOVE up from (6,1) to (5,1) and again to (4,1).
3. With the key positioned at (3,1) (directly in front when facing UP), we use PICKUP to grab it.
4. Next, still facing UP from (4,1), we MOVE up through (3,1) → (2,1) → (1,1).
5. At (1,1), we turn RIGHT to face east. A MOVE brings us to (1,2), positioning us with the DOOR directly ahead.
6. We then UNLOCK the door (since we hold the key).
7. Now, we MOVE forward into the door cell (1,3) and further MOVE into the right room at (1,4).
8. Inside the right room (and still facing east), we turn RIGHT to face down.
9. We then MOVE down step-by-step from (1,4) to (6,4).
10. At (6,4), we turn LEFT (so that from facing down, we face right) and MOVE twice to reach (6,6), where the GOAL is located.
  
This sequence of actions unlocks the door and guides you from your starting room to the goal in the other room.",0.0,False,True
door_key,25,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,26,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions> 

The reasoning is as follows:

1. Starting at (4,2) facing RIGHT, we want to pick up the KEY at (6,3) without stepping into its cell. First, we change direction to DOWN so we can go below the agent.  
   - ""RIGHT"" turns the agent from facing RIGHT to facing DOWN.

2. Moving DOWN from (4,2) we traverse from (4,2) to (5,2) then to (6,2).  
   - ""MOVE"" → (5,2)  
   - ""MOVE"" → (6,2)

3. At (6,2), we need to be adjacent to the KEY (which is in (6,3)) and facing it. Since we are facing DOWN, we turn left to face RIGHT.  
   - ""LEFT""  

4. Now, with the KEY directly in front at (6,3), we execute:  
   - ""PICKUP""

5. With the KEY in hand, we now need to reach the door at (2,5) to unlock it. We choose to approach the door from the left (i.e. stand in (2,4) facing RIGHT). First, we face UP. From current facing RIGHT, turning left brings us to UP.  
   - ""LEFT""

6. Moving UP from (6,2):  
   - ""MOVE"" → (5,2)  
   - ""MOVE"" → (4,2)  
   - ""MOVE"" → (3,2)  
   - ""MOVE"" → (2,2)

7. At (2,2) and still facing UP, we turn RIGHT to face the door’s direction:  
   - ""RIGHT""

8. Then we move RIGHT to reach (2,3) and then (2,4):  
   - ""MOVE"" → (2,3)  
   - ""MOVE"" → (2,4)

9. Now standing at (2,4) facing RIGHT, with the door (2,5) directly ahead, we unlock it (while holding the KEY):  
   - ""UNLOCK""

10. With the door unlocked, we move through it. First, step into (2,5) then move further right to exit the room:  
    - ""MOVE"" → (2,5)  
    - ""MOVE"" → (2,6)

11. The GOAL is in the other room at (6,6). From (2,6) facing RIGHT, we turn DOWN to head towards the goal:  
    - ""RIGHT""

12. Finally, moving DOWN successively we go through (3,6), (4,6), (5,6) and end at (6,6) on the GOAL:  
    - ""MOVE"" → (3,6)  
    - ""MOVE"" → (4,6)  
    - ""MOVE"" → (5,6)  
    - ""MOVE"" → (6,6)

This sequence of 21 actions fulfills the objective of picking up the key, unlocking the door, and reaching the goal.",0.97046875,True,True
door_key,27,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,28,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,29,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
  [""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.9746875,True,True
door_key,3,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9746875,True,True
door_key,30,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.96484375,True,True
door_key,31,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97609375,True,True
door_key,32,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the reasoning:

1. You start at (3,2) facing DOWN.  
   • ""MOVE"" → to (4,2)  
   • ""MOVE"" → to (5,2)

2. At (5,2), the KEY is located at (5,1) (directly to the WEST). Since you are facing DOWN, you must turn so that “in front” is (5,1).  
   • ""RIGHT"" → From facing DOWN, turning RIGHT makes you face WEST.  
   • ""PICKUP"" → Pick up the KEY from (5,1).

3. Now holding the key at (5,2) and facing WEST, you need to go toward the DOOR at (2,5). In the left-hand room (columns 1–4), the accessible cell adjacent to the door is (2,4). To get there:  
   • ""RIGHT"" → From facing WEST, turning RIGHT makes you face NORTH.  
   • ""MOVE"" → from (5,2) to (4,2)  
   • ""MOVE"" → from (4,2) to (3,2)  
   • ""MOVE"" → from (3,2) to (2,2)

4. At (2,2) facing NORTH, you now need to head east to reach (2,4) so that the door at (2,5) is directly in front.  
   • ""RIGHT"" → From NORTH, turning RIGHT makes you face EAST.  
   • ""MOVE"" → from (2,2) to (2,3)  
   • ""MOVE"" → from (2,3) to (2,4)

5. Standing at (2,4) and facing EAST, the DOOR is immediately ahead at (2,5). Since you have the KEY, unlock it:  
   • ""UNLOCK"" → Unlock the DOOR at (2,5).

6. With the door unlocked, you can now go through.  
   • ""MOVE"" → step into the door cell (2,5)  
   • ""MOVE"" → move from (2,5) to (2,6) in the right-hand room

7. Finally, reach the GOAL at (6,6) by moving downward. From your current orientation (facing EAST):  
   • ""RIGHT"" → From EAST, turning RIGHT makes you face SOUTH.  
   • ""MOVE"" → from (2,6) to (3,6)  
   • ""MOVE"" → from (3,6) to (4,6)  
   • ""MOVE"" → from (4,6) to (5,6)  
   • ""MOVE"" → from (5,6) to (6,6) where the GOAL is located.

This ordered list of actions meets the objective of obtaining the key, unlocking the door, and reaching the goal.",0.97328125,True,True
door_key,33,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions> 

Here's the step‐by‐step explanation:

1. Starting at (3,2) facing LEFT:
   - ""RIGHT"": now facing UP.
   - ""MOVE"": advances to (2,2).
2. At (2,2) facing UP:
   - ""RIGHT"": now facing RIGHT.
   - ""MOVE"": goes to (2,3), which positions you so that the KEY at (2,4) is directly in front.
   - ""PICKUP"": picks up the KEY from (2,4).
3. Now with the KEY in hand (at (2,3) facing RIGHT), head toward the door at (5,5). Plan to approach the door from its left side (standing at (5,4) facing EAST):
   - ""RIGHT"": from RIGHT, turning to face DOWN.
   - ""MOVE"": from (2,3) to (3,3).
   - ""MOVE"": from (3,3) to (4,3).
   - ""LEFT"": facing DOWN turns to EAST.
   - ""MOVE"": from (4,3) to (4,4).
   - ""RIGHT"": facing EAST turns to DOWN.
   - ""MOVE"": from (4,4) to (5,4).
   - ""LEFT"": from DOWN, turning to face EAST (so the door at (5,5) is directly in front).
4. With the KEY and in position:
   - ""UNLOCK"": unlocks the door at (5,5).
   - ""MOVE"": step into the unlocked door cell (5,5).
5. Finally, proceed to the GOAL at (6,6):
   - ""MOVE"": from (5,5) to (5,6) (still facing EAST).
   - ""RIGHT"": from EAST, turning to face DOWN.
   - ""MOVE"": from (5,6) to (6,6) to reach the GOAL.
   
This sequence completes the objective.",0.9746875,True,True
door_key,34,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97328125,True,True
door_key,35,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97609375,True,True
door_key,36,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,37,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Let's explain the plan step-by-step:

1. Starting at row 5, col 1 facing LEFT, we first need to face UP (since the KEY is located one cell north of row 3, col 1). A single ""RIGHT"" turn (from LEFT to UP) is used.
2. ""MOVE"" from row 5, col 1 to row 4, col 1.
3. ""MOVE"" from row 4, col 1 to row 3, col 1.
4. With the agent at row 3, col 1 facing UP, the KEY is directly ahead (at row 2, col 1). Use ""PICKUP"" to grab the KEY.
5. ""MOVE"" moves the agent from row 3, col 1 to row 2, col 1 (this cell becomes empty since the KEY has been picked up).
6. To unlock the DOOR (located at row 2, col 2), the agent must now face EAST. From UP, a ""RIGHT"" turn makes the agent face EAST.
7. From row 2, col 1 facing EAST, the DOOR is directly in front. Use ""UNLOCK"" to unlock it (with the KEY in hand).
8. ""MOVE"" into the cell containing the once-locked DOOR (row 2, col 2).
9. ""MOVE"" from row 2, col 2 into row 2, col 3 – this moves the agent from the left room into the right room.
10. Now to head toward the GOAL (at row 6, col 6) in the right room, the agent must head DOWN. Given the agent is facing EAST, a ""RIGHT"" turn rotates the facing to SOUTH.
11. ""MOVE"" from row 2, col 3 to row 3, col 3.
12. ""MOVE"" from row 3, col 3 to row 4, col 3.
13. ""MOVE"" from row 4, col 3 to row 5, col 3.
14. ""MOVE"" from row 5, col 3 to row 6, col 3.
15. At row 6, col 3 and facing SOUTH, the path to the GOAL (at row 6, col 6) is to the EAST. A ""LEFT"" turn from SOUTH rotates the agent to face EAST.
16. ""MOVE"" from row 6, col 3 to row 6, col 4.
17. ""MOVE"" from row 6, col 4 to row 6, col 5.
18. ""MOVE"" from row 6, col 5 to row 6, col 6 where the GOAL is located.

Following this sequence ensures that the agent picks up the KEY, unlocks the DOOR, crosses into the other room, and finally steps onto the GOAL.",0.9746875,True,True
door_key,38,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions> 

Here's the reasoning behind each action:

1. ""RIGHT"": Starting at (3,1) facing LEFT, turning RIGHT makes you face UP.
2. ""MOVE"": Advance from (3,1) to (2,1). Now the cell in front (at (1,1)) contains the KEY.
3. ""PICKUP"": While at (2,1) facing UP, pick up the KEY from (1,1).
4. ""MOVE"": Now move UP from (2,1) to (1,1). (Since the KEY has been picked up, this cell is empty.)
5. ""RIGHT"": Facing UP at (1,1), turn RIGHT to face EAST. Now the cell in front (at (1,2)) is the DOOR.
6. ""UNLOCK"": With the KEY in hand, unlock the DOOR at (1,2).
7. ""MOVE"": Step forward into the now unlocked DOOR cell at (1,2).
8. ""MOVE"": From (1,2) (facing EAST), move to (1,3) which is inside the second room.
9. ""RIGHT"": Turn RIGHT from EAST to face DOWN.
10.–14. ""MOVE"" five times: Move down from (1,3) through (2,3), (3,3), (4,3), (5,3) and finally to (6,3).
15. ""LEFT"": At (6,3) facing DOWN, turn LEFT to face EAST.
16.–18. ""MOVE"" three times: Move east from (6,3) through (6,4), (6,5) and finally arrive at (6,6) where the GOAL is located.

Following this sequence satisfies the task: picking up the KEY, unlocking the DOOR, and reaching the GOAL.",0.9746875,True,True
door_key,39,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.971875,True,True
door_key,4,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,40,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97046875,True,True
door_key,41,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Here's the reasoning:

1. You start at cell (6,3) facing UP. The KEY is in cell (2,3) in the left room. However, because you cannot step into a cell that contains an object, you must stop adjacent to it and use the PICKUP action.

2. By moving UP three times you go:
   - (6,3) → (5,3) [MOVE]
   - (5,3) → (4,3) [MOVE]
   - (4,3) → (3,3) [MOVE]
   Now, standing at (3,3) facing UP, the cell in front (2,3) contains the KEY.

3. Execute PICKUP to grab the KEY.

4. Next, you need to unlock the DOOR at (4,4) which separates the two rooms. To unlock it, you must be adjacent to it. The door is accessible from the left room if you stand in cell (4,3) facing RIGHT.

5. Currently at (3,3) facing UP; to go to (4,3) you must face DOWN (the cell (4,3) is directly below). You turn 90° right twice (RIGHT, RIGHT) so that you face DOWN and then MOVE into (4,3).

6. Now at (4,3) facing DOWN, turn LEFT (a 90° left turn from DOWN gives you RIGHT) so that the door cell at (4,4) is immediately in front.

7. With the KEY in your hand and the DOOR in front, you execute UNLOCK.

8. After unlocking, head into the door cell (4,4) by moving forward. Now you are in the passage to the right room.

9. In the right room, the GOAL is at (6,6). From (4,4) facing RIGHT, move forward:
   - (4,4) → (4,5) [MOVE]
   - (4,5) → (4,6) [MOVE]
   
10. Now, to head downward toward the GOAL, turn RIGHT (from facing RIGHT, a right turn points you DOWN).

11. Finally, MOVE twice down:
    - (4,6) → (5,6) [MOVE]
    - (5,6) → (6,6) [MOVE]
    
When you stand on (6,6) you have reached the GOAL.",0.97890625,True,True
door_key,42,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the reasoning:

1. The agent starts at (5,1) facing DOWN. To get to the KEY at (1,1) (which is in the cell directly north of row 2, col1), the agent must first face UP. Two left turns (“LEFT”, “LEFT”) will do that.
2. Then three “MOVE” actions advance from (5,1) → (4,1) → (3,1) → (2,1). Now, from (2,1) facing UP, the KEY is immediately in front at (1,1), so “PICKUP” collects it.
3. With the key in hand, the agent needs to return toward the DOOR at (3,2). From (2,1) facing UP, two left turns (“LEFT”, “LEFT”) change the direction to DOWN.
4. A “MOVE” from (2,1) (facing DOWN) brings the agent to (3,1). The door is to the right of (3,1), so one “LEFT” turn (since from DOWN, left yields RIGHT) makes the agent face the DOOR.
5. “UNLOCK” then unlocks the door (located at (3,2)), letting the agent pass.
6. Two “MOVE” actions allow the agent to step into the door cell (first into (3,2) then into (3,3) in the right room).
7. In the right room, to head toward the GOAL at (6,6), the agent turns “RIGHT” (from RIGHT, a right turn points DOWN) and then uses three “MOVE” actions to go down: (3,3) → (4,3) → (5,3) → (6,3).
8. Finally, from (6,3) facing DOWN, a “LEFT” turn (from DOWN, left yields RIGHT) aligns the agent with the horizontal path to the GOAL, and three “MOVE” actions take the agent from (6,3) → (6,4) → (6,5) → (6,6).

Standing on (6,6) with the GOAL completes the objective.",0.97046875,True,True
door_key,43,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9859375,True,True
door_key,44,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>

Explanation:
1. Starting at (5,1) facing DOWN, turn LEFT to face EAST.
2. MOVE from (5,1) to (5,2).
3. Turn LEFT (from EAST to NORTH) to head upward.
4. MOVE from (5,2) to (4,2).
5. Turn RIGHT (from NORTH to EAST) so that the cell directly in front (4,3) holds the KEY.
6. PICKUP the KEY from (4,3).
7. Now, still at (4,2) facing EAST, turn LEFT (to face NORTH) to head toward the door.
8–10. MOVE three times upward: (4,2)→(3,2)→(2,2)→(1,2).
11. Turn RIGHT (from NORTH to EAST) so that (1,3) becomes your new position with the DOOR cell immediately in front.
12. MOVE from (1,2) to (1,3).
13. With the door directly ahead at (1,4) and holding the KEY, UNLOCK the DOOR.
14. MOVE into the door cell (1,4) (now unlocked).
15. MOVE further EAST into (1,5), entering the right-hand room.
16. Turn RIGHT (from EAST to SOUTH) to start descending.
17–21. MOVE 5 times SOUTH: (1,5)→(2,5)→(3,5)→(4,5)→(5,5)→(6,5).
22. Turn LEFT (from SOUTH to EAST) so that the GOAL is directly ahead.
23. MOVE from (6,5) to (6,6) to stand on the GOAL cell.

This sequence achieves the objective: pick up the key, unlock the door to access the other room, and reach the goal.",0.96765625,True,True
door_key,45,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,46,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97609375,True,True
door_key,47,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,48,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97046875,True,True
door_key,49,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions> 

Here's the explanation for each action:

1. ""LEFT"": From the initial facing (RIGHT), turn left to face UP.
2. ""MOVE"": Move from (4,1) to (3,1). Now the KEY at (2,1) is directly in front.
3. ""PICKUP"": Pick up the KEY from cell (2,1).
4. ""RIGHT"": Turn from UP to RIGHT so that the DOOR at (3,2) is directly ahead.
5. ""UNLOCK"": Unlock the DOOR (using the held KEY) located at (3,2).
6. ""MOVE"": Step into the door's cell at (3,2), entering the second room.
7. ""MOVE"": Move right from (3,2) to (3,3).
8. ""MOVE"": Continue moving right from (3,3) to (3,4).
9. ""MOVE"": Move right from (3,4) to (3,5).
10. ""MOVE"": Move right from (3,5) to (3,6). Now near the column of the GOAL.
11. ""RIGHT"": Turn right (from facing RIGHT) to face DOWN.
12. ""MOVE"": Move down from (3,6) to (4,6).
13. ""MOVE"": Move down from (4,6) to (5,6).
14. ""MOVE"": Move down from (5,6) to (6,6), reaching the GOAL.

Following this sequence, the agent collects the KEY, unlocks the DOOR, and navigates into the appropriate room to finally stand on the GOAL cell.",0.9803125,True,True
door_key,5,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Here's the reasoning:

1. You start at (3,3) facing LEFT (i.e., West). The KEY is at (4,1), so one position from which you can pick it up is (4,2) facing WEST (so that the cell in front, (4,1), contains the KEY).

2. Action ""MOVE"": From (3,3) facing WEST, you move to (3,2).

3. Action ""LEFT"": Facing WEST, turning left rotates you 90° to face DOWN (south).

4. Action ""MOVE"": From (3,2) facing DOWN, you move to (4,2).

5. Action ""RIGHT"": From (4,2) facing DOWN, turning right makes you face WEST.

6. Action ""PICKUP"": Now at (4,2) facing WEST, the cell in front is (4,1) where the KEY is located; you pick it up.

7. With the KEY in hand, you need to unlock the DOOR at (4,4). To do that, you must be adjacent with the door directly in front of you. A good position is (4,3) facing EAST.

8. Actions ""RIGHT"", ""RIGHT"": From (4,2) facing WEST, two right turns (WEST→NORTH→EAST) make you face EAST.

9. Action ""MOVE"": Move from (4,2) to (4,3).

10. Action ""UNLOCK"": With the KEY in hand and now at (4,3) facing EAST, the cell in front (4,4) has the DOOR; you unlock it.

11. Having unlocked the door, you now move through it. Action ""MOVE"": You move from (4,3) to (4,4).

12. In the door room (the right room), the GOAL is at (6,6). From (4,4) (facing EAST), you want to eventually get to (6,6). First, move east:
    - Action ""MOVE"": From (4,4) to (4,5).
    - Action ""MOVE"": From (4,5) to (4,6).

13. Now, you need to head south. Action ""RIGHT"": From facing EAST, turning right turns you to face SOUTH.

14. Action ""MOVE"": From (4,6) facing SOUTH, move to (5,6).

15. Action ""MOVE"": Finally, from (5,6) facing SOUTH, move to (6,6), where the GOAL is located.

This sequence meets the objective while following the movement and interaction rules of the environment.",0.97890625,True,True
door_key,50,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9746875,True,True
door_key,51,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE""]
</actions> 

Explanation:
1. Starting at [3,2] facing LEFT, the first ""MOVE"" brings you to [3,1].
2. Then ""RIGHT"" changes your facing to UP.
3. ""MOVE"" advances you from [3,1] to [2,1]. Now, with KEY located at [1,1] (directly in front), you ""PICKUP"" the key.
4. With the key in hand, ""RIGHT"" rotates you from UP to RIGHT.
5. ""MOVE"" puts you at [2,2]. A ""LEFT"" then rotates you back to face UP.
6. ""MOVE"" advances you to [1,2], positioning you adjacent to the DOOR at [1,3]. Then a ""RIGHT"" turn faces you toward the DOOR.
7. ""UNLOCK"" uses your key on the door.
8. ""MOVE"" steps into the door cell at [1,3], and another ""MOVE"" takes you further into the right room at [1,4].
9. Next, a ""RIGHT"" rotates your orientation from RIGHT to DOWN.
10. Five consecutive ""MOVE"" actions take you from [1,4] down to [6,4].
11. A ""LEFT"" then adjusts your direction from DOWN to RIGHT.
12. Finally, two ""MOVE"" actions carry you from [6,4] to [6,5] and then to [6,6], where the GOAL is located.

This sequence achieves the objective of retrieving the key, unlocking the door, and reaching the goal.",0.97046875,True,True
door_key,52,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.971875,True,True
door_key,53,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
  [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the reasoning:

1. Starting at (6,3) facing DOWN, we first turn twice (RIGHT, RIGHT) so that we face UP.
2. Four MOVEs take us straight up from (6,3) → (5,3) → (4,3) → (3,3) → (2,3).
3. At (2,3) facing UP, we then turn RIGHT so we face EAST; the KEY is in cell (2,4) right in front. We use PICKUP to grab it.
4. Now holding the key, we need to head to the DOOR at (3,5). We move from (2,3) into position:
   - From facing EAST at (2,3), we turn RIGHT (now facing SOUTH) and MOVE to go to (3,3).
   - Then, facing SOUTH, we turn LEFT (to face EAST) and MOVE to reach (3,4).
5. With the door located directly in front at (3,5), we UNLOCK it.
6. We then MOVE into the door cell (3,5). From there, we continue by moving EAST to (3,6).
7. Changing direction to SOUTH (with a RIGHT turn from EAST), we then MOVE three times: from (3,6) → (4,6) → (5,6) → finally arriving at the GOAL at (6,6).

This sequence satisfies the requirement to pick up the key, unlock the door, and cross into the room where the GOAL is located.",0.97328125,True,True
door_key,54,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Here's the reasoning:

1. Start at [4,1] facing RIGHT. To go toward the KEY (at [6,1]), turn RIGHT to face DOWN.
2. MOVE from [4,1] to [5,1].
3. From [5,1] (facing DOWN), the KEY is right ahead at [6,1] so PICKUP the KEY.
4. Now, you need to unlock the DOOR. The door is at [5,3]. To unlock it, you should stand at [5,2] with the door directly in front. From [5,1] (facing DOWN), turn LEFT to face RIGHT.
5. MOVE from [5,1] to [5,2].
6. With the door now in your front cell ([5,3]) and holding the KEY, use UNLOCK.
7. MOVE from [5,2] into the door cell ([5,3]).
8. Now in the right room, proceed RIGHT: MOVE from [5,3] to [5,4].
9. MOVE from [5,4] to [5,5].
10. MOVE from [5,5] to [5,6].
11. The GOAL is one cell down at [6,6]. Turn RIGHT (from facing RIGHT to facing DOWN).
12. MOVE from [5,6] to [6,6] to complete the game.

This sequence of actions meets the game’s objective of picking up the KEY, unlocking the DOOR, and reaching the GOAL.",0.983125,True,True
door_key,55,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.96765625,True,True
door_key,56,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.983125,True,True
door_key,57,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.98171875,True,True
door_key,58,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.98171875,True,True
door_key,59,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.97328125,True,True
door_key,6,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
  [""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.98453125,True,True
door_key,60,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>

Here's the step‐by‐step plan:

1. Starting at (1,1) facing UP, we first want to face DOWN so we can go toward the key at (4,1). We do this by turning 90° right twice.
2. Then we move forward twice:
   - From (1,1) to (2,1)
   - From (2,1) to (3,1)
3. With the agent now at (3,1) facing DOWN, the KEY is immediately in front (at (4,1)), so we issue PICKUP.
4. Next, we move down twice to reach (5,1):
   - MOVE from (3,1) to (4,1) (where the key was)
   - MOVE from (4,1) to (5,1)
5. At (5,1) while still facing DOWN, the door lies to the right (at (5,2)). To face it, we turn LEFT (from DOWN, a left turn faces RIGHT).
6. With the door directly ahead and holding the key, we use UNLOCK.
7. Then we enter the door area by moving forward into (5,2).
8. Now in the second (right) room and still facing RIGHT, we traverse toward the goal:
   - MOVE from (5,2) to (5,3)
   - MOVE from (5,3) to (5,4)
   - MOVE from (5,4) to (5,5)
   - MOVE from (5,5) to (5,6)
9. Finally, at (5,6) (facing RIGHT), we turn RIGHT (so that from RIGHT we now face DOWN) and MOVE into (6,6) where the GOAL is located.

This complete sequence of 16 actions unlocks the door and guides you safely to the goal.",0.9775,True,True
door_key,61,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.0,False,True
door_key,62,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.971875,True,True
door_key,63,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,64,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the reasoning:

1. The agent starts at [6,3] facing LEFT (i.e. west). First, he needs to grab the KEY at [4,1]. Since the KEY sits in a cell and cannot be stepped on, the agent must remain adjacent to it and then use the PICKUP instruction. A good plan is to approach the KEY from below.

• Action 1: ""MOVE"" → from [6,3] to [6,2].  
• Action 2: ""MOVE"" → from [6,2] to [6,1].

2. Next, turn to face UP (north) so the KEY's cell [4,1] becomes directly in front (when approaching from [5,1]).  
• Action 3: ""RIGHT"" → from facing LEFT to facing NORTH.

3. Move upward:  
• Action 4: ""MOVE"" → from [6,1] to [5,1].

4. With the KEY at [4,1] now in the cell ahead, use the PICKUP command:  
• Action 5: ""PICKUP"" (this picks up the KEY from [4,1] while the agent is at [5,1] and facing north).

5. After picking up the KEY, the agent must head to the DOOR at [2,4]. To avoid entering cells with objects, travel via empty cells in your current room. A good route is from [5,1] upward then east.

• Action 6: ""MOVE"" → from [5,1] to [4,1] (the KEY cell is now empty).  
• Action 7: ""MOVE"" → from [4,1] to [3,1].  
• Action 8: ""MOVE"" → from [3,1] to [2,1].

6. At [2,1] the agent now turns to face east so that the DOOR (which lies on the boundary) becomes accessible on the right.  
• Action 9: ""RIGHT"" → from NORTH to EAST.

7. The agent moves right toward the cell from which he can unlock the door:  
• Action 10: ""MOVE"" → from [2,1] to [2,2].  
• Action 11: ""MOVE"" → from [2,2] to [2,3].  
At this point [2,3] is immediately left of the DOOR at [2,4] (remember: the door is the only gap between the two rooms).

8. With the agent now at [2,3] facing east and holding the KEY, use the UNLOCK command:  
• Action 12: ""UNLOCK"" → this unlocks the DOOR at [2,4].

9. After unlocking, step forward through the door:  
• Action 13: ""MOVE"" → from [2,3] into the door cell [2,4].  
• Action 14: ""MOVE"" → move further east into [2,5] (inside the right room).  
• Action 15: ""MOVE"" → move to [2,6].

10. Now in the right room, the GOAL is at [6,6]. Change direction to go downwards:  
• Action 16: ""RIGHT"" → from EAST to SOUTH.

11. Finally, move down the right room corridor:  
• Action 17: ""MOVE"" → from [2,6] to [3,6].  
• Action 18: ""MOVE"" → from [3,6] to [4,6].  
• Action 19: ""MOVE"" → from [4,6] to [5,6].  
• Action 20: ""MOVE"" → from [5,6] to [6,6] (which is where the GOAL is located).

This series of actions guides the agent from his starting cell in the left room, to pick up the KEY, unlock the DOOR (the only passageway), and finally enter the right room to reach the GOAL.",0.971875,True,True
door_key,65,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.98171875,True,True
door_key,66,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.97609375,True,True
door_key,67,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Explanation:
1. Starting at (4,2) facing RIGHT, the first two ""LEFT"" turns reorient you to face LEFT.
2. ""MOVE"" takes you from (4,2) to (4,1).
3. ""LEFT"" (from facing LEFT) makes you face SOUTH so that the KEY (at (5,1)) is in front.
4. ""PICKUP"" grabs the KEY without moving you.
5. Next, from (4,1) (facing SOUTH), another ""LEFT"" turns you to face EAST.
6. Three ""MOVE"" commands (from (4,1) to (4,2), then to (4,3), then to (4,4)) bring you closer to the door’s neighborhood.
7. ""LEFT"" rotates you from EAST to NORTH so you can move upward.
8. ""MOVE"" moves you from (4,4) to (3,4).
9. ""RIGHT"" changes your orientation from NORTH to EAST, placing the DOOR at (3,5) directly in front.
10. ""UNLOCK"" uses your KEY to unlock the DOOR.
11. ""MOVE"" lets you step into the DOOR cell (from (3,4) to (3,5)).
12. ""MOVE"" goes further to (3,6) in the right room.
13. ""RIGHT"" rotates you from EAST to SOUTH to start heading toward the GOAL.
14. Three ""MOVE"" actions (from (3,6) to (4,6), then to (5,6), and finally to (6,6)) bring you onto the GOAL.

This sequence meets the objectives: picking up the key, unlocking the door, and finally reaching the GOAL.",0.97328125,True,True
door_key,68,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
  [""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

To explain briefly:
1. Starting at (4,1) facing UP, the agent turns RIGHT to face east.
2. It moves from (4,1) to (4,2).
3. It then turns RIGHT to face DOWN so that the KEY at (5,2) is directly in front.
4. With the KEY in view, it performs PICKUP.
5–6. Now holding the key, the agent needs to reach the door. From (4,2) facing DOWN, two LEFT turns reorient it to face UP.
7–8. It moves upward from (4,2) to (3,2) and then to (2,2).
9. At (2,2), it turns RIGHT so the door at (2,3) is directly in front.
10. It uses UNLOCK to open the door.
11. It moves into the door cell at (2,3).
12–14. Proceeding in the unlocked room, the agent moves right through cells (2,4), (2,5), and (2,6).
15. At (2,6), it turns RIGHT (from facing RIGHT to facing DOWN).
16–19. Finally, it moves down from (2,6) step by step through (3,6), (4,6), (5,6) and reaches the GOAL at (6,6).",0.97328125,True,True
door_key,69,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
  [""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.98171875,True,True
door_key,7,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,70,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>",0.96484375,True,True
door_key,71,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.98171875,True,True
door_key,72,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,73,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the reasoning:

1. Start at (6,2) facing DOWN. To reach the KEY at (5,4) without entering its cell (since objects block entry), we need to stand at (6,4) and face UP.
   - ""LEFT"": From DOWN, turning left makes you face RIGHT.
   - ""MOVE"": Walk from (6,2) to (6,3).
   - ""MOVE"": Walk from (6,3) to (6,4).
   - ""LEFT"": With current facing RIGHT, turning left makes you face UP.
   - ""PICKUP"": Now that (5,4) (directly above) holds the KEY, pick it up.

2. With the key in hand, you must now go to the door at (1,5) (which connects your starting room with the GOAL room). Stand at (1,4) (immediately left of the door) and face RIGHT.
   - ""MOVE"": From (6,4) (facing UP) move to (5,4).
   - ""MOVE"": Then to (4,4).
   - ""MOVE"": Then to (3,4).
   - ""MOVE"": Then to (2,4).
   - ""MOVE"": Finally to (1,4).
   - ""RIGHT"": From facing UP at (1,4), a right turn makes you face RIGHT toward the door.
   - ""UNLOCK"": With the KEY in hand, unlock the door located at (1,5).

3. Having unlocked the door, proceed into the adjacent room (where the GOAL is) and aim to reach the goal at (6,6).
   - ""MOVE"": Step into the door cell at (1,5).
   - ""MOVE"": Move from (1,5) to (1,6), which is in the GOAL room.
   - ""RIGHT"": From facing RIGHT, turning right makes you face DOWN.
   - ""MOVE"": Move down successively from (1,6) to (2,6).
   - ""MOVE"": Then to (3,6).
   - ""MOVE"": Then to (4,6).
   - ""MOVE"": Then to (5,6).
   - ""MOVE"": Finally, arrive at (6,6) where the GOAL is located.

This sequence of 20 actions guides you from your starting position to pick up the KEY, unlock the DOOR, and then proceed to stand on the GOAL, completing the game.",0.971875,True,True
door_key,74,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,75,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,76,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,77,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions> 

Explanation:
1. Starting at (5,1) facing LEFT, turn RIGHT to face UP.
2. MOVE three times to go from (5,1) → (4,1) → (3,1) → (2,1). Now you stand directly below the KEY at (1,1).
3. PICKUP picks the KEY from the cell (1,1) (which is directly in front of you while facing UP).
4. Now, to return to the door, turn RIGHT twice (from UP to RIGHT, then to DOWN).
5. MOVE twice to go from (2,1) → (3,1) → (4,1).
6. At (4,1) facing DOWN, turn LEFT so you’re facing RIGHT toward the DOOR at (4,2).
7. With the KEY in hand, UNLOCK the DOOR.
8. MOVE into the door cell (from (4,1) to (4,2)).
9. MOVE again to (4,3) still facing RIGHT.
10. Turn RIGHT from facing RIGHT so that you now face DOWN.
11. MOVE twice to progress from (4,3) → (5,3) → (6,3).
12. From (6,3) facing DOWN, turn LEFT to face RIGHT.
13. Finally, MOVE three times along row 6 from (6,3) to (6,4), then (6,4) to (6,5), and finally (6,5) to (6,6) where the GOAL is located.

This sequence of actions collects the KEY, unlocks the DOOR, and navigates to the GOAL cell.",0.971875,True,True
door_key,78,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,79,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,8,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions> 

Explanation:
1. Starting at (1,1) facing UP, the first two ""LEFT"" actions turn you to face DOWN.
2. Three ""MOVE"" actions take you from (1,1) to (4,1). With the key located in the cell (5,1) directly in front, the ""PICKUP"" action collects the KEY.
3. Two ""LEFT"" actions turn you from facing DOWN to facing UP.
4. Three ""MOVE"" actions take you back upward from (4,1) to (1,1).
5. A ""RIGHT"" turns you to face RIGHT. Two ""MOVE"" actions advance you to (1,3), which is immediately to the left of the DOOR at (1,4).
6. The ""UNLOCK"" action unlocks the door (with the key in hand).
7. A ""MOVE"" action lets you step into the unlocked door cell (1,4). Two additional ""MOVE"" actions carry you to (1,6) along the top row of the right-hand room.
8. A ""RIGHT"" reorients you to face DOWN and five ""MOVE"" actions guide you from (1,6) down to the GOAL at (6,6).

Following these steps, you successfully unlock the door and reach the goal.",0.96625,True,True
door_key,80,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""LEFT"",
 ""MOVE"",
 ""MOVE"",
 ""MOVE"",
 ""MOVE"",
 ""MOVE"",
 ""LEFT"",
 ""PICKUP"",
 ""MOVE"",
 ""MOVE"",
 ""LEFT"",
 ""MOVE"",
 ""MOVE"",
 ""MOVE"",
 ""MOVE"",
 ""RIGHT"",
 ""UNLOCK"",
 ""MOVE"",
 ""MOVE"",
 ""RIGHT"",
 ""MOVE"",
 ""MOVE"",
 ""MOVE"",
 ""MOVE""]
</actions>

Detailed Explanation:
1. Starting at (1,2) facing LEFT, we first turn LEFT so that we face DOWN.
2. We then MOVE five times to go from row 1 to row 6 while staying in column 2.
3. Now at (6,2) facing DOWN, we turn LEFT so that we now face RIGHT. The KEY is located at (6,3), directly ahead.
4. We execute PICKUP (from (6,2) picking up the KEY from (6,3)).
5. With the KEY in hand, we want to re-orient toward the door. We first MOVE from (6,2) into (6,3) (now empty) and then MOVE into (6,4).
6. At (6,4) facing RIGHT, we need to head upward to the door’s approach cell ((2,4) so that the door at (2,5) is directly in front). We turn LEFT to face UP and then MOVE four times to go from row 6 to row 2.
7. At (2,4) facing UP, we turn RIGHT so that we face the door at (2,5) and then execute UNLOCK.
8. With the door unlocked, we MOVE into the door cell, and then MOVE again into the adjacent right‐room cell.
9. In the right room our goal (GOAL) is at (6,6). From our current position, we turn RIGHT (from facing RIGHT to facing DOWN) and then MOVE four times to reach row 6, column 6.
10. Standing on the GOAL completes the game.

This sequence satisfies the objective.",0.96625,True,True
door_key,81,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9746875,True,True
door_key,82,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""DOOR"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9775,True,True
door_key,83,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9746875,True,True
door_key,84,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,85,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>

Here's the reasoning:

1. You start at (4,1) facing DOWN. To head toward the KEY, which is at (4,3), first turn LEFT. Facing DOWN, a LEFT turn makes you face RIGHT.
2. ""MOVE"": From (4,1) to (4,2) while facing RIGHT. Now the KEY at (4,3) is directly in front.
3. ""PICKUP"": With the KEY directly ahead (at (4,3)), you pick it up.
4. ""MOVE"": Now move forward into (4,3) so you are adjacent to the DOOR next to the KEY.
5. ""UNLOCK"": With the KEY in hand and the DOOR directly ahead (at (4,4)), unlock the door.
6. ""MOVE"": Step into the door cell at (4,4). Now you've passed into the room containing the GOAL.
7. ""MOVE"": Proceed to (4,5) moving right.
8. ""MOVE"": Continue to (4,6).
9. ""RIGHT"": Turn right to change your facing from RIGHT to DOWN.
10. ""MOVE"": Advance to (5,6).
11. ""MOVE"": Finally, move into (6,6) where the GOAL is located.

This sequence ensures you collect the KEY, unlock the DOOR, and then navigate to the GOAL in the adjacent room.",0.98453125,True,True
door_key,86,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.96484375,True,True
door_key,87,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,88,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,89,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9803125,True,True
door_key,9,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE""]
</actions>",0.97890625,True,True
door_key,90,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>

Below is an explanation of the plan:

1. You start at [1,2] facing LEFT. The KEY is at [4,1] and you must not step into its cell but rather pick it up by standing adjacent and facing it.
2. First, you move left from [1,2] to [1,1]. Then turn LEFT to face DOWN so you can head toward the KEY.
3. You MOVE twice (from [1,1] to [2,1] then [3,1]). Now, you turn LEFT (when facing DOWN, a left turn rotates you to face EAST) and MOVE to [3,2].
4. To go one cell down to [4,2] (which is adjacent to the KEY at [4,1]), you turn RIGHT (from EAST to SOUTH) then MOVE.
5. At [4,2] facing SOUTH, you turn RIGHT (SOUTH → WEST) so that you are now facing the KEY. You then PICKUP the KEY.
6. With the KEY in hand, you must now reach the DOOR at [2,4]. From [4,2] (facing WEST), you turn RIGHT (WEST → NORTH) and MOVE twice to reach [2,2]. Then, by turning RIGHT (NORTH → EAST) and MOVE once, you position yourself at [2,3] with the DOOR directly in front.
7. You then UNLOCK the door.
8. After unlocking, you MOVE into the door cell ([2,4]) then MOVE again into the adjacent cell ([2,5]) in the right room.
9. Next, to reach the GOAL at [6,6], from [2,5] facing EAST you turn RIGHT (EAST → SOUTH) and MOVE down four times until you reach [6,5].
10. Finally, turning LEFT (SOUTH → EAST) and MOVE brings you into the GOAL at [6,6].

This series of 25 actions completes your objectives.",0.96484375,True,True
door_key,91,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""DOOR"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", """", ""WALL"", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""WALL"", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE""]
</actions>",0.9634375,True,True
door_key,92,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,93,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.971875,True,True
door_key,94,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,95,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE""]
</actions>

Here's the reasoning:

1. The agent starts at (3,2) facing RIGHT. The KEY is at (3,1) (to the WEST). To face WEST from RIGHT, the agent turns LEFT twice:
   • ""LEFT"" (RIGHT → UP)
   • ""LEFT"" (UP → LEFT)

2. With the agent facing WEST, a ""PICKUP"" grabs the KEY in cell (3,1).

3. Now, the agent must unlock the DOOR at (3,3), which lies to the EAST of its current position. From facing WEST, the agent turns RIGHT twice:
   • ""RIGHT"" (WEST → NORTH)
   • ""RIGHT"" (NORTH → EAST)

4. Facing EAST, the agent uses ""UNLOCK"" to unlock the DOOR in front (at (3,3)).

5. Next, the agent must enter the door cell to reach the room with the GOAL. A ""MOVE"" takes the agent from (3,2) to (3,3).

6. Another ""MOVE"" moves it from (3,3) to (3,4) deeper into the right room.

7. The GOAL is at (6,6). From (3,4) the agent turns ""RIGHT"" (facing EAST → SOUTH) so it can start moving downward.

8. Three ""MOVE"" actions bring it down:
   • ""MOVE"": from (3,4) to (4,4)
   • ""MOVE"": from (4,4) to (5,4)
   • ""MOVE"": from (5,4) to (6,4)

9. With the agent now at (6,4) and the GOAL at (6,6) (to the EAST), a ""LEFT"" turn (when facing SOUTH, left → EAST) aligns the agent with the goal horizontally.

10. Finally, two ""MOVE"" actions navigate:
    • ""MOVE"": from (6,4) to (6,5)
    • ""MOVE"": from (6,5) to (6,6)

Standing on the GOAL cell completes the objective.",0.97890625,True,True
door_key,96,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>",0.9746875,True,True
door_key,97,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""WALL"", """", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE""]
</actions> 

Here's the reasoning:

1. Starting at (4,1) facing UP, the key is at (1,1) which is directly above the agent but cannot be entered. So we move up without entering the key cell:
   - ""MOVE"": from (4,1) to (3,1)
   - ""MOVE"": from (3,1) to (2,1)

2. Now, while at (2,1) facing UP, the cell in front (1,1) contains the KEY. 
   - ""PICKUP"": to pick up the key without moving into the cell.

3. With the key in hand, we need to return to the door located at (4,2) so we can unlock it. From (2,1) facing UP, we turn to face DOWN:
   - ""RIGHT"" then ""RIGHT"": now facing DOWN.
   - ""MOVE"": from (2,1) to (3,1)
   - ""MOVE"": from (3,1) to (4,1)

4. The door is directly east of (4,1). Facing DOWN, we turn left to face RIGHT:
   - ""LEFT"": now facing RIGHT.
   - ""UNLOCK"": unlocks the door at (4,2) (since the door is directly in front and we’re holding the key).

5. Now we cross the door into the adjacent room (door cell becomes passable):
   - ""MOVE"": from (4,1) into the door cell (4,2).

6. In the second room the goal is at (6,6). We navigate right and then down:
   - ""MOVE"": from (4,2) to (4,3)
   - ""MOVE"": from (4,3) to (4,4)
   - ""MOVE"": from (4,4) to (4,5)
   - ""MOVE"": from (4,5) to (4,6)
   - ""RIGHT"": turn right to face DOWN (from RIGHT).
   - ""MOVE"": from (4,6) to (5,6)
   - ""MOVE"": from (5,6) to (6,6), reaching the GOAL.
    
This sequence of actions fulfills the objective of unlocking the door and reaching the GOAL in the other room.",0.97609375,True,True
door_key,98,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""DOOR"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""WALL"", """", """", """", ""WALL""]
[""WALL"", """", """", ""WALL"", """", """", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE""]
</actions>",0.9775,True,True
door_key,99,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR` and reach a `GOAL` which is located in a different room than the one you start in.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `GOAL`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.
- You must stand on the goal cell to complete the game.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", ""GOAL"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""]
</actions>

Here's the reasoning behind the chosen sequence:

1. Starting at cell [6,2] facing LEFT, turn RIGHT so you face UP.
2. MOVE upward four times to go from [6,2] to [2,2]:
   - [6,2] → [5,2]
   - [5,2] → [4,2]
   - [4,2] → [3,2]
   - [3,2] → [2,2]
3. At [2,2] facing UP, turn RIGHT so you now face east; the KEY is in the cell [2,3] directly ahead.
4. PICKUP the KEY from [2,3] (note that you do not enter the cell with the object but pick it up from adjacent cell).
5. Then MOVE east twice:
   - From [2,2] to [2,3] (now empty since the KEY was picked up)
   - From [2,3] to [2,4]
6. Turn LEFT (facing east → now facing UP) so you can move north.
7. MOVE north from [2,4] to [1,4]. Here, [1,4] is adjacent to the DOOR which is located at [1,5] in the wall that connects the rooms.
8. Turn RIGHT (from UP to EAST) to face the door.
9. UNLOCK the DOOR at [1,5] while holding the KEY.
10. MOVE into the door cell at [1,5] and then MOVE again to [1,6] which is in the room that contains the GOAL.
11. Turn RIGHT (from EAST to DOWN) to face downward.
12. Finally, MOVE downward five times to go through cells [2,6] → [3,6] → [4,6] → [5,6] → [6,6] where the GOAL resides.

This sequence ensures you pick up the key, unlock the door, and then traverse into the goal room and step onto the GOAL cell as required.",0.97046875,True,True
unlock,0,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.953125,True,True
unlock,1,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,10,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.95,True,True
unlock,11,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,12,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.959375,True,True
unlock,13,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.978125,True,True
unlock,14,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,15,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,16,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK""]
</actions>",0.984375,True,True
unlock,17,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,18,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,19,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,2,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,20,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,21,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,22,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,23,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,24,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.984375,True,True
unlock,25,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.95,True,True
unlock,26,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.959375,True,True
unlock,27,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,28,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,29,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,3,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,30,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,31,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,32,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,33,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,34,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,35,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,36,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.98125,True,True
unlock,37,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,38,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,39,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,4,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,40,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.959375,True,True
unlock,41,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,42,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.959375,True,True
unlock,43,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,44,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,45,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,46,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.959375,True,True
unlock,47,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,48,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,49,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,5,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,50,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.98125,True,True
unlock,51,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,52,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,53,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.978125,True,True
unlock,54,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,55,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,56,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.959375,True,True
unlock,57,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,58,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,59,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.984375,True,True
unlock,6,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,60,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,61,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,62,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,63,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,64,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>",0.984375,True,True
unlock,65,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,66,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,67,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,68,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,69,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,7,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,70,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,71,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,72,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,73,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
  [""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
  [""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.953125,True,True
unlock,74,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.959375,True,True
unlock,75,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,76,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,77,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,78,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.978125,True,True
unlock,79,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,8,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.95,True,True
unlock,80,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,81,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,82,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.978125,True,True
unlock,83,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,84,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,85,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.98125,True,True
unlock,86,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.940625,True,True
unlock,87,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.95625,True,True
unlock,88,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,89,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,9,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,90,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,91,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,92,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing LEFT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,93,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,94,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.95,True,True
unlock,95,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing UP holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,96,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,97,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,98,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""LEFT"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing DOWN holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,99,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you pickup the key. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,0,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions> 

Step-by-step explanation:
1. Initially, the AGENT is at (4,1) facing LEFT. Turning RIGHT makes the agent face UP.
2. Three consecutive MOVE commands take the agent from (4,1) upward to (3,1), then (2,1), and finally (1,1).
3. A RIGHT turn from UP reorients the agent to face RIGHT.
4. One MOVE brings the agent from (1,1) to (1,2). Now, the KEY is located in the cell in front (at (1,3)).
5. The PICKUP action picks up the KEY.
6. With the KEY in hand, the agent needs to reach a cell adjacent to the DOOR (located at (4,5)). A RIGHT turn from facing RIGHT changes the agent’s direction to DOWN.
7. Three MOVE commands bring the agent downward from (1,2) to (2,2), then (3,2), and finally (4,2).
8. A LEFT turn from DOWN changes the agent’s facing direction to RIGHT.
9. Two MOVE commands take the agent from (4,2) to (4,3), then to (4,4). Now the DOOR (at (4,5)) is directly in front.
10. Finally, the UNLOCK action unlocks the DOOR.

This sequence satisfies the game rules to pick up the KEY and unlock the DOOR.",0.953125,True,True
unlock,1,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,10,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.94375,True,True
unlock,11,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
  [""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,12,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
  [""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step explanation:

1. Starting at [2,3] facing DOWN, we need to get the KEY located at [1,1]. First, turn RIGHT from DOWN to face WEST.
2. MOVE from [2,3] to [2,2].
3. MOVE from [2,2] to [2,1].
4. Then, turn RIGHT to face NORTH (so the cell in front, [1,1], has the KEY).
5. PICKUP the KEY from [1,1].
6. Next, we must approach the DOOR at [3,5]. We plan to stand at [3,4] and face EAST so that the door is directly in front.
7. From [2,1] (currently facing NORTH), turn RIGHT twice: first RIGHT changes direction from NORTH to EAST, second RIGHT changes from EAST to SOUTH.
8. MOVE down from [2,1] to [3,1].
9. Now, turn LEFT from SOUTH to face EAST.
10. MOVE east from [3,1] to [3,2].
11. MOVE east from [3,2] to [3,3].
12. MOVE east from [3,3] to [3,4].
13. Finally, with the KEY in hand and the door directly in front (at [3,5]) while facing EAST, UNLOCK the door.

This sequence of actions fulfills the objective.",0.959375,True,True
unlock,13,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,14,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at [3][2] facing RIGHT, first ""MOVE"" brings you to [3][3].
2. ""LEFT"" rotates you to face UP.
3. Now with [2][3] (directly ahead) holding the KEY, ""PICKUP"" collects it.
4. With the KEY, ""MOVE"" advances you from [3][3] to [2][3] (now empty since the KEY has been picked up).
5. Another ""MOVE"" takes you from [2][3] to [1][3].
6. ""RIGHT"" rotates you from UP to face RIGHT.
7. ""MOVE"" moves you from [1][3] to [1][4] which is adjacent to the DOOR.
8. Finally, ""UNLOCK"" unlocks the door located in the cell directly in front ([1][5]), completing your objective.",0.975,True,True
unlock,15,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","Let's break down the steps:

1. From the starting position [2,1] (facing RIGHT), we first move forward into [2,2] with a MOVE.
2. Then a second MOVE takes us to [2,3].
3. Since the KEY is in room [4,4] and we must approach it from its left (to face it with our RIGHT), we need to head downward. We turn RIGHT (from facing RIGHT to facing DOWN).
4. Now a MOVE goes down into [3,3].
5. Another MOVE takes us down into [4,3].
6. At [4,3] we now turn LEFT (facing from DOWN to RIGHT) so that the cell directly in front ([4,4]) holds the KEY.
7. With the KEY in plain sight, a PICKUP grabs it.
8. We then MOVE forward from [4,3] into [4,4] (which becomes empty after picking up the KEY).
9. Finally, standing at [4,4] facing RIGHT means the door at [4,5] is in front of us. With the KEY in hand, we execute UNLOCK to open it.

Thus, the sequence of actions is:

<actions>
    [""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,16,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at (4,4) facing LEFT, the agent turns RIGHT to face UP.
2. The agent moves from (4,4) to (3,4). Now, facing UP, the cell in front is (2,4) which contains the KEY.
3. The agent performs PICKUP to pick up the KEY located at (2,4).
4. Now holding the KEY, the agent turns RIGHT (from UP to RIGHT) so that it faces East.
5. Facing East from (3,4), the cell (3,5) now is directly in front and contains the DOOR. The agent uses UNLOCK to unlock the DOOR.",0.984375,True,True
unlock,17,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Here's the reasoning:
1. Starting at (2,4) facing RIGHT, the agent first turns left twice to face LEFT, positioning to go toward the key.
2. Two MOVE actions take the agent from (2,4) → (2,3) → (2,2).
3. At (2,2), the agent turns left once (from LEFT to DOWN) so it faces the key located in cell (3,2), then PICKUP to collect the KEY.
4. With the key now in hand, the agent moves DOWN to (3,2).
5. Then turning left (from DOWN to RIGHT) lets the agent head rightwards: two MOVE actions bring it to (3,3) then (3,4).
6. The door is immediately to the right at (3,5) so the final UNLOCK action unlocks the door.

This sequence accomplishes the objective step by step.",0.965625,True,True
unlock,18,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step explanation:

1. Starting at (3,4) facing LEFT, the first three ""MOVE"" commands take you left to (3,3), then (3,2), and finally (3,1).

2. At (3,1), you need to pick up the KEY, which is located directly below at (4,1). Since you’re facing LEFT, a ""LEFT"" turn changes your orientation from LEFT to DOWN. Now, with the key cell directly in front, you execute ""PICKUP"" to grab the KEY.

3. With the KEY in hand and still at (3,1) but now facing DOWN, you need to reach a cell adjacent to the DOOR at (4,5). The plan is to go to (3,4) and then move down to (4,4) so that the DOOR will be immediately to your right. To begin, turn from DOWN to RIGHT with a ""LEFT"" turn.

4. Now facing RIGHT, use three ""MOVE"" commands to travel from (3,1) to (3,2), then (3,3), and finally (3,4).

5. At (3,4) facing RIGHT, you want to head downward to (4,4). A ""RIGHT"" turn from RIGHT changes your direction to DOWN. Then a ""MOVE"" places you at (4,4).

6. At (4,4) facing DOWN, you must reorient to face the DOOR which is at (4,5) (to your right). A ""LEFT"" turn from DOWN rotates you to face RIGHT.

7. Finally, with the door directly in front of you and holding the KEY, the ""UNLOCK"" command unlocks the DOOR.

This sequence of actions completes your objective.",0.959375,True,True
unlock,19,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at (3,1) facing UP, the first MOVE goes to (2,1).
2. The second MOVE reaches (1,1).
3. A RIGHT turn makes the agent face RIGHT.
4. With the KEY directly in front at (1,2), the PICKUP action collects it.
5. MOVE is used to advance into (1,2).
6. MOVE further takes the agent to (1,3).
7. Another MOVE brings the agent to (1,4).
8. A RIGHT turn from facing RIGHT changes the direction to DOWN.
9. MOVE goes down to (2,4).
10. MOVE reaches (3,4), which is immediately left of the DOOR.
11. A LEFT turn from DOWN changes the agent’s facing to RIGHT (toward the DOOR).
12. Finally, UNLOCK uses the held key to unlock the DOOR at (3,5).

This sequence guides the agent from its starting location, collects the KEY, navigates to the DOOR, and unlocks it.",0.9625,True,True
unlock,2,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,20,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,21,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-Step Explanation:
1. Starting at (4,2) facing DOWN, we need to pick up the key positioned at (3,2) (directly above). Since the key must be picked up from the adjacent cell in front, we first turn to face UP. From DOWN, two left turns make the agent face UP.
2. With the agent facing UP, the adjacent cell (3,2) holds the KEY, so we execute PICKUP. The key is now in the inventory, and the agent remains at (4,2) facing UP.
3. Next, the agent must move to a position adjacent to the DOOR, which is located at (2,5). We plan to stand at (2,4) facing EAST so that the door is directly in front.
4. With the agent facing UP, we move forward twice: from (4,2) to (3,2), then from (3,2) to (2,2).
5. At (2,2) facing UP, we need to reorient to face EAST. A RIGHT turn will change the facing from UP to EAST.
6. Then, two moves to the east will bring the agent from (2,2) to (2,3) and then to (2,4).
7. Finally, with (2,5) (containing the DOOR) directly in front, the UNLOCK action is performed (using the KEY that is held).

This sequence successfully guides the agent from its starting point to picking up the key and unlocking the door.",0.971875,True,True
unlock,22,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Let's explain the solution step by step:

1. Starting at (3,1) facing RIGHT, we first need to pick up the KEY at (1,3). We plan to pick it up from (2,3) facing UP so that the key is directly in the adjacent cell above.
  • ""MOVE"" → from (3,1) to (3,2) (facing RIGHT).
  • ""MOVE"" → from (3,2) to (3,3) (facing RIGHT).
  • ""LEFT"" → turn from RIGHT to UP.
  • ""MOVE"" → from (3,3) to (2,3) (facing UP).
  • ""PICKUP"" → picks up the KEY from the cell (1,3) which is directly ahead.

2. Now holding the KEY at (2,3) (still facing UP), we need to get to the DOOR at (4,5). The best approach is to unlock the door by standing at (4,4) facing RIGHT (since (4,5) contains the door).
  • ""LEFT"", ""LEFT"" → turn from UP to DOWN (two 90° turns; here two LEFT commands suffice: UP → LEFT → DOWN).
  • ""MOVE"" → from (2,3) to (3,3) (facing DOWN).
  • ""LEFT"" → turn from DOWN to RIGHT (so we can move eastward).
  • ""MOVE"" → from (3,3) to (3,4) (facing RIGHT).
  • ""RIGHT"" → turn from RIGHT to DOWN (so we can go down).
  • ""MOVE"" → from (3,4) to (4,4) (facing DOWN).
  • ""LEFT"" → turn from DOWN to RIGHT (to face the door).
  • ""UNLOCK"" → unlocks the DOOR at (4,5), which is directly ahead.

This sequence of actions leads from the starting position, collects the KEY, and finally unlocks the DOOR.",0.95625,True,True
unlock,23,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (1,2) facing RIGHT, we need to get adjacent to the KEY at (3,2). First, turning RIGHT makes you face DOWN.
2. MOVE from (1,2) to (2,2). Now facing DOWN, the cell in front is (3,2), where the KEY is located.
3. PICKUP the KEY from (3,2).
4. With the KEY in hand, you now need to reach a position adjacent to the DOOR at (1,5). A good plan is to navigate to (1,4) and face RIGHT.
5. From (2,2) facing DOWN, turning LEFT makes you face RIGHT.
6. MOVE from (2,2) to (2,3).
7. MOVE from (2,3) to (2,4).
8. Turn LEFT (from RIGHT) to face UP.
9. MOVE from (2,4) to (1,4).
10. Turn RIGHT (from UP) so you face RIGHT; now the cell in front (1,5) contains the DOOR.
11. Finally, UNLOCK the DOOR.

This sequence of actions ensures you pick up the KEY and then successfully unlock the DOOR.",0.96875,True,True
unlock,24,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.984375,True,True
unlock,25,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step explanation:

1. You start at row 2, column 3 facing RIGHT. The KEY is at row 1, column 1. To pick it up, you need to be adjacent to it with the key cell directly in front. One way is to get to row 2, column 1 and face UP.
2. From the starting position:
   - ""LEFT"", ""LEFT"": Turning twice changes your facing from RIGHT to LEFT.
   - ""MOVE"", ""MOVE"": Moving two steps left takes you from column 3 to column 1 (position now is [2][1], facing LEFT).
   - ""RIGHT"": Turning right from LEFT makes you face UP.
3. Now, the cell directly in front (row 1, column 1) contains the KEY. The ""PICKUP"" action retrieves it.
4. With the key in hand, your next goal is to unlock the door located at row 3, column 5. To unlock the door, you should stand at row 3, column 4 (the cell immediately left of the door) and face RIGHT.
5. From your current position ([2][1] facing UP):
   - ""RIGHT"": Turn to face RIGHT (from UP).
   - ""MOVE"", ""MOVE"", ""MOVE"": Move eastward from [2][1] to [2][2], then [2][3], then [2][4].
   - ""RIGHT"": From facing RIGHT, a right turn makes you face DOWN.
   - ""MOVE"": Move down from [2][4] to [3][4].
   - ""LEFT"": Turn left from DOWN to face RIGHT.
6. Now, with the door directly in front ([3][5]) and holding the KEY, the ""UNLOCK"" action will unlock the door.

This sequence satisfies the objective using the allowed actions.",0.95625,True,True
unlock,26,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>

Here's the reasoning step by step:

1. You start at (4,2) facing UP. The KEY is at (1,3), so you need to get adjacent to it. A good plan is to position yourself at (2,3) facing UP (so that the cell immediately in front, (1,3), contains the KEY).
2. From (4,2) facing UP:
   - ""MOVE"" brings you to (3,2).
   - ""MOVE"" takes you to (2,2).
3. You now need to shift right to column 3. So:
   - ""RIGHT"" turns you to face RIGHT.
   - ""MOVE"" moves you from (2,2) to (2,3).
4. To pick up the KEY which sits at (1,3), you need to face UP:
   - ""LEFT"" changes your direction from RIGHT to UP.
   - ""PICKUP"" picks up the KEY in the cell (1,3) (directly in front of you).
5. With the KEY in hand, now head to the door at (4,5). The best adjacent position for unlocking is (4,4) facing RIGHT (since (4,5) is directly in front).
6. From (2,3) facing UP:
   - ""RIGHT"" (first turn) and then another ""RIGHT"" turn (now facing DOWN) will orient you in the needed direction to move downward.
   - ""MOVE"" goes from (2,3) to (3,3).
   - ""MOVE"" further brings you to (4,3).
7. Now adjust your direction to face RIGHT:
   - ""LEFT"" (while facing DOWN) turns you to face RIGHT.
   - ""MOVE"" takes you from (4,3) to (4,4).
8. Finally, with the door at (4,5) directly in front and holding the KEY, ""UNLOCK"" opens the door.

Each action was chosen to respect the rule that objects must only be interacted with when they are directly in front of you, ensuring a valid route to unlock the door.

This sequence meets the objective step-by-step.",0.959375,True,True
unlock,27,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,28,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at (3,1) facing UP, turn RIGHT to face east.
2. MOVE three times to go from (3,1) to (3,4) staying in the same row.
3. At (3,4) facing east, turn RIGHT so that the agent faces DOWN. Now the cell directly in front (at (4,4)) holds the KEY.
4. PICKUP the KEY from (4,4).
5. With the KEY held, turn LEFT (from down to right) so you face east.
6. With the door directly in front at (3,5) and the KEY in hand, perform UNLOCK to unlock the door.
This plan meets the game’s rules and objectives.",0.975,True,True
unlock,29,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,3,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at (4,1) facing UP, the first ""MOVE"" takes you to (3,1).
2. A second ""MOVE"" puts you at (2,1). Now the cell directly ahead (row1, col1) contains the KEY.
3. ""PICKUP"" collects the KEY from (1,1) while standing at (2,1) facing UP.
4. You then need to return to your room where the DOOR is located. Since you’re facing UP, two turns (""LEFT"", ""LEFT"") change your facing direction to DOWN.
5. ""MOVE"" from (2,1) to (3,1) and another ""MOVE"" brings you back to (4,1).
6. At (4,1) facing DOWN, you must turn to face right toward the door. A ""LEFT"" turn from DOWN makes you face RIGHT.
7. Three consecutive ""MOVE""s take you from (4,1) to (4,2), then to (4,3), and finally to (4,4). The DOOR is in cell (4,5), which is directly in front.
8. Finally, ""UNLOCK"" unlocks the door using the KEY you are carrying.

This sequence meets the objective in the grid-based environment.",0.9625,True,True
unlock,30,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions> 

Step-by-step reasoning:
1. Starting at (3,3) facing RIGHT, the KEY is located at (2,4). First, turn LEFT to face UP.
2. MOVE forward: from (3,3) to (2,3).
3. Turn RIGHT so that you face RIGHT. Now the cell ahead (2,4) contains the KEY.
4. Execute PICKUP to pick the KEY.
5. With the KEY in hand at (2,3) facing RIGHT, you need to position yourself to unlock the DOOR located at (1,5). For that, you must stand at (1,4) facing RIGHT.
6. Turn LEFT to face UP.
7. MOVE forward to get from (2,3) to (1,3).
8. Turn RIGHT to face the door direction (RIGHT).
9. MOVE forward to go from (1,3) to (1,4) where the door is directly in front.
10. Finally, UNLOCK the door at (1,5) using your KEY.

This sequence of actions accomplishes the objective step by step.",0.971875,True,True
unlock,31,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step reasoning:
1. Starting at [4,2] facing LEFT, the KEY is at [4,3] (to your right). Since you’re facing left, first turn so that you face east (i.e. right). A simple way is to perform two RIGHT turns:
   - RIGHT (from LEFT to UP),
   - RIGHT (from UP to RIGHT).
2. Now facing RIGHT (east), perform PICKUP to collect the KEY located in cell [4,3].
3. With the KEY, you need to reach a position to unlock the DOOR at [3,5]. A good approach is to position yourself at [3,4] while facing east so that the DOOR is directly in front:
   - MOVE: from [4,2] to [4,3].
   - LEFT: turn from east to north.
   - MOVE: from [4,3] (moving north) to [3,3].
   - RIGHT: turn from north to east.
   - MOVE: from [3,3] to [3,4].
4. Finally, from [3,4] facing east, the door at [3,5] is directly ahead. Execute UNLOCK to open the door.

This sequence of actions will successfully enable you to pick up the key and unlock the door.",0.971875,True,True
unlock,32,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Let's explain the reasoning step by step:

1. You start at cell (1,1) facing LEFT. Since the KEY is located at (2,2), you first need to reposition.
2. By turning ""RIGHT"" twice, you change your facing from LEFT → UP → RIGHT. This lets you move right into cell (1,2).
3. Facing RIGHT at (1,2), you then turn ""RIGHT"" again to face DOWN. Now the cell directly in front (2,2) has the KEY.
4. You execute ""PICKUP"" to grab the KEY.
5. Now, with the KEY in hand, you navigate to a position adjacent to the DOOR (which is located at (4,5)). The plan is to stand in cell (4,4) and face RIGHT.
6. From (1,2) (facing down), you ""MOVE"" to (2,2) and then ""MOVE"" again to (3,2).
7. At (3,2) facing down, a ""LEFT"" turn changes your orientation to RIGHT.
8. Two ""MOVE"" actions take you from (3,2) → (3,3) → (3,4).
9. From (3,4) facing RIGHT, a ""RIGHT"" turn makes you face DOWN.
10. A ""MOVE"" brings you from (3,4) down to (4,4).
11. Finally, turning ""LEFT"" from DOWN gives you a RIGHT orientation, perfectly aligning you with the DOOR at (4,5).
12. With the KEY in hand and facing the door, you execute ""UNLOCK"" to open the door.

This sequence of actions meets the objective of picking up the KEY and unlocking the DOOR.",0.95625,True,True
unlock,33,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,34,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,35,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at (2,2) facing DOWN, we need to reach the KEY at (2,4) which is to the right. Turning LEFT (counterclockwise from DOWN) makes the agent face RIGHT.
2. First MOVE: from (2,2) to (2,3).
3. Second MOVE: from (2,3) to (2,4), where the KEY is located.
4. PICKUP: With the KEY directly in front (at (2,4)), the agent picks it up.
5. Now holding the KEY, the agent must reach a position adjacent to the DOOR at (1,5). A good approach is coming from the left side. From the current cell (2,3) (after picking up, the agent remains in (2,3)) and still facing RIGHT, we need to move upward. So a LEFT turn (from RIGHT, turning left gives UP) is issued.
6. MOVE: from (2,3) to (1,3).
7. Then, to head toward the door, turn RIGHT (from UP, turning right gives RIGHT).
8. MOVE: from (1,3) to (1,4). Now the DOOR at (1,5) is directly in front.
9. Finally, UNLOCK: with the key in hand and facing the door, the agent unlocks the DOOR.
",0.971875,True,True
unlock,36,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step reasoning:
1. Starting at row 2, column 3 and facing UP, the KEY is located at row 2, column 2 – that is to your left. So, you first turn LEFT to face WEST.
2. With the KEY directly in front, perform PICKUP.
3. Now holding the KEY, you need to head toward the DOOR at row 2, column 5. Since you are currently facing WEST, you must turn 180°. Two LEFT turns accomplish this (WEST → SOUTH → EAST).
4. Now facing EAST, the cell in front (row 2, column 4) is empty and adjacent to the DOOR (at row 2, column 5). So, MOVE forward to row 2, column 4.
5. With the DOOR now directly in front, use UNLOCK (while holding the KEY) to unlock the door.

This sequence of actions fulfills the objective.",0.98125,True,True
unlock,37,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,38,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,39,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step reasoning:
1. The agent starts at [1][1] facing UP. To move toward the key at [3][1] (which is one cell ahead of [2][1]), the agent must face DOWN. Two right turns accomplish this.
2. The agent then moves from [1][1] to [2][1]. Facing down, the cell immediately in front ([3][1]) has the KEY. The PICKUP action collects it.
3. Now, with the key in hand, the agent must head to the door located at [4][5]. To do so, the agent must navigate to the cell [4][4] and then face RIGHT so that the door is directly in front.
4. From [2][1] (after picking up the key), the agent turns LEFT (from DOWN to RIGHT) and moves east through [2][2], [2][3], and [2][4].
5. Facing RIGHT at [2][4], the agent then turns RIGHT to face DOWN and moves to [3][4] and then to [4][4].
6. Finally, turning LEFT (from DOWN to RIGHT) positions the agent so that the door at [4][5] is directly ahead. The UNLOCK action then unlocks the door.

This sequence meets the objective.",0.959375,True,True
unlock,4,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at (2,1) facing LEFT, turn LEFT to face DOWN.
2. MOVE from (2,1) to (3,1).
3. From (3,1) while facing DOWN, turn LEFT to face EAST.
4. With EAST orientation, the cell (3,2) holds the KEY. Use PICKUP to grab it.
5. Move EAST from (3,1) to (3,2).
6. MOVE eastward from (3,2) to (3,3).
7. MOVE eastward from (3,3) to (3,4). Now the DOOR at (3,5) is directly in front.
8. Finally, UNLOCK the DOOR with the KEY.

This sequence successfully completes your objective.",0.975,True,True
unlock,40,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Here's the step‐by‐step explanation:
1. With the agent starting at (2,4) facing RIGHT, the first two ""LEFT"" actions reorient the agent to face LEFT.
2. Two ""MOVE"" actions take the agent from (2,4) to (2,3) and then to (2,2).
3. A ""LEFT"" turn from facing LEFT changes the orientation to DOWN.
4. A ""MOVE"" advances from (2,2) to (3,2). Here, the KEY at (4,2) is directly ahead.
5. The ""PICKUP"" action collects the KEY from the cell (4,2) without entering it.
6. With the KEY in hand and still at (3,2) facing DOWN, a ""LEFT"" turn reorients the agent to face RIGHT.
7. Two successive ""MOVE"" actions bring the agent from (3,2) to (3,3) and then to (3,4).
8. Finally, standing at (3,4) and facing RIGHT, the ""UNLOCK"" action unlocks the door at (3,5).

This sequence of actions completes the objective.",0.965625,True,True
unlock,41,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step reasoning:
1. Starting at (4,1) facing DOWN, turn LEFT so you face RIGHT.
2. MOVE: Advance from (4,1) to (4,2).
3. MOVE: Advance from (4,2) to (4,3), positioning you so that the KEY at (4,4) is directly in front.
4. PICKUP: Grab the KEY from (4,4).
5. Now, with the KEY, you need to reach a position where unlocking the DOOR is possible. The DOOR is at (3,5), so you'll aim to stand at (3,4) facing RIGHT.
6. With your current position at (4,3) facing RIGHT, turn LEFT to face UP.
7. MOVE: Advance from (4,3) to (3,3).
8. Turn RIGHT to face RIGHT.
9. MOVE: Advance from (3,3) to (3,4), placing you directly in front of the DOOR.
10. UNLOCK: With the KEY in hand and the DOOR directly in front, unlock the DOOR.

These steps complete your objective.",0.971875,True,True
unlock,42,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>

Step-by-step reasoning:

1. Starting at (4,4) facing LEFT, the first MOVE takes you from (4,4) to (4,3).  
2. A RIGHT turn changes your direction from LEFT to UP.  
3. A MOVE from (4,3) facing UP brings you to (3,3).  
4. With the KEY located at (2,3) directly ahead, the PICKUP action retrieves it.  
5. Now holding the KEY at (3,3) while still facing UP, a MOVE takes you to (2,3).  
6. A RIGHT turn (from UP) makes you face RIGHT.  
7. A MOVE in the RIGHT direction takes you from (2,3) to (2,4).  
8. Turning LEFT (from RIGHT) changes your facing to UP.  
9. A MOVE while facing UP brings you from (2,4) to (1,4), positioning you adjacent to the door.  
10. A final RIGHT turn (from UP) orients you so that the door at (1,5) is directly in front.  
11. Finally, the UNLOCK action uses the KEY to unlock the DOOR.",0.965625,True,True
unlock,43,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step reasoning:
1. Starting at (1,2) facing DOWN, perform ""MOVE"" to advance to (2,2).
2. From (2,2) facing DOWN, the cell in front (3,2) contains the KEY. Use ""PICKUP"" to grab the KEY.
3. With the KEY in hand, ""MOVE"" from (2,2) to (3,2).
4. At (3,2) still facing DOWN, turn ""LEFT"" to face RIGHT (which aligns with the horizontal direction toward the DOOR at (3,5)).
5. ""MOVE"" from (3,2) to (3,3) while facing RIGHT.
6. ""MOVE"" from (3,3) to (3,4) while still facing RIGHT.
7. Now, with the DOOR directly in front at (3,5), execute ""UNLOCK"" to unlock it.

This sequence of actions successfully collects the KEY and then unlocks the DOOR.",0.978125,True,True
unlock,44,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step reasoning:
1. Start at (2,3) facing RIGHT.
2. ""MOVE"" → Move to (2,4) (facing RIGHT).
3. ""LEFT"" → Turn to face UP.
4. ""PICKUP"" → With key located at (1,4) directly ahead, pick up the KEY.
5. ""RIGHT"" → Turn from UP to RIGHT.
6. ""RIGHT"" → Turn from RIGHT to face DOWN.
7. ""MOVE"" → Move from (2,4) to (3,4) (facing DOWN).
8. ""LEFT"" → Turn from DOWN to face RIGHT.
9. ""UNLOCK"" → With the KEY in hand and the DOOR at (3,5) directly ahead, unlock the door.

This sequence completes the objective.",0.975,True,True
unlock,45,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step reasoning:

1. Starting at (4,3) facing LEFT, we need to go to the KEY at (3,4). Since the KEY is up and to the right, we first turn RIGHT (from LEFT to UP).
2. ""MOVE"" to go from (4,3) to (3,3).
3. From (3,3) facing UP, turning RIGHT will have us face RIGHT.
4. ""MOVE"" from (3,3) to (3,4) where the KEY is located.
5. ""PICKUP"" the KEY, as it is directly in front.
6. With the KEY in hand and still at (3,3) facing RIGHT, we prepare to head to the DOOR (located at (4,5)). From our current position, turning RIGHT changes our orientation from RIGHT to DOWN.
7. ""MOVE"" to go from (3,3) to (4,3).
8. Now at (4,3) facing DOWN, turning LEFT makes the agent face RIGHT.
9. ""MOVE"" from (4,3) to (4,4) so that the DOOR (at (4,5)) is directly in front.
10. Finally, ""UNLOCK"" the door while holding the KEY.",0.96875,True,True
unlock,46,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step explanation:

1. Start at (3,1) facing RIGHT.
2. ""LEFT"" turns you to face UP.
3. ""MOVE"" shifts you from (3,1) to (2,1).
4. ""MOVE"" brings you from (2,1) to (1,1).
5. ""RIGHT"" turns you to face RIGHT.
6. ""MOVE"" moves you from (1,1) to (1,2), positioning you so that the KEY at (1,3) is directly in front.
7. ""PICKUP"" picks up the KEY from (1,3).
8. ""RIGHT"" rotates you from facing RIGHT to facing DOWN.
9. ""MOVE"" shifts you from (1,2) to (2,2).
10. ""MOVE"" brings you from (2,2) to (3,2).
11. ""LEFT"" turns you from facing DOWN to facing RIGHT.
12. ""MOVE"" moves you from (3,2) to (3,3).
13. ""MOVE"" takes you from (3,3) to (3,4) so the DOOR at (3,5) is in front.
14. ""UNLOCK"" unlocks the DOOR using the KEY you are holding.

This sequence fulfills the objective of unlocking the DOOR.",0.959375,True,True
unlock,47,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>

Let's explain step by step:

1. Starting at (2,2) facing RIGHT, the agent moves forward into (2,3).
2. The agent then turns RIGHT to face DOWN.
3. Moving forward from (2,3) while facing DOWN brings the agent to (3,3), directly adjacent to the KEY which is at (4,3).
4. The agent issues PICKUP to grab the KEY located directly in front (at (4,3)).
5. With the key in hand, the agent turns LEFT to begin reorienting.
6. A second LEFT turn changes the facing direction from RIGHT to UP.
7. Now facing UP, the agent moves from (3,3) to (2,3).
8. The agent then turns RIGHT so that it can progress laterally.
9. A MOVE from (2,3) while facing RIGHT brings the agent to (2,4).
10. A LEFT turn directs the agent upward.
11. Moving upward from (2,4) reaches (1,4), which is immediately to the left of the DOOR.
12. A final RIGHT turn positions the agent facing the door located at (1,5).
13. Finally, the UNLOCK action unlocks the DOOR in front using the KEY.

This sequence fulfills the objective step by step.",0.959375,True,True
unlock,48,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step reasoning:
1. Starting at [3][4] facing RIGHT, we need to get the key at [3][2]. To face the key, we need to look left. Two left turns (or two right turns) will make you face LEFT.
2. After turning, the first MOVE brings you to [3][3]. Facing LEFT, the cell immediately ahead ([3][2]) contains the key.
3. The PICKUP action collects the key.
4. Now, to unlock the door at [1][5], you must stand at [1][4] facing RIGHT (so that door is directly in front). From your current location [3][3] (facing LEFT), turn RIGHT to face UP.
5. A MOVE from [3][3] to [2][3] and another MOVE to [1][3] positions you in the same row as the door.
6. Then, turn RIGHT to face RIGHT. A MOVE brings you to [1][4].
7. Finally, the UNLOCK action unlocks the door at [1][5] while you hold the key.

This sequence ensures that all requirements are met according to the environment rules.",0.96875,True,True
unlock,49,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (4,2) facing DOWN, the agent turns 90° left to face RIGHT.
2. Turns 90° left again to face UP.
3. ""MOVE"" upward from (4,2) to (3,2).
4. With the agent at (3,2) facing UP, it now turns ""RIGHT"" to face RIGHT; from here the cell directly in front, (3,3), holds the KEY.
5. ""PICKUP"" the KEY from the cell (3,3) (since the key is directly in front).
6. Now holding the KEY, the agent ""MOVE""s into (3,3) (this cell is now empty because the key was picked up).
7. To head toward the door, the agent ""LEFT"" turns from RIGHT to face UP.
8. ""MOVE"" upward from (3,3) to (2,3).
9. ""MOVE"" upward from (2,3) to (1,3).
10. At (1,3) facing UP, the agent turns ""RIGHT"" to face RIGHT.
11. ""MOVE"" right from (1,3) to (1,4). Now, the door is in the cell directly in front at (1,5).
12. Finally, ""UNLOCK"" the door at (1,5) while holding the key.

This sequence of actions ensures the key is acquired first and then used to unlock the door.",0.9625,True,True
unlock,5,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at [1,3] facing UP, turn LEFT so the agent faces LEFT.
2. MOVE from [1,3] to [1,2].
3. Turn LEFT again to face DOWN.
4. MOVE from [1,2] to [2,2].
5. With the agent facing DOWN, the cell in front ([3,2]) contains the KEY, so PICKUP is executed.
6. Now holding the KEY at [2,2] (facing DOWN), turn LEFT to face RIGHT.
7. MOVE from [2,2] to [2,3].
8. MOVE from [2,3] to [2,4].
9. From [2,4] facing RIGHT, turn RIGHT to face DOWN.
10. MOVE from [2,4] to [3,4].
11. At [3,4] facing DOWN, turn LEFT to face RIGHT. Now the door at [3,5] is directly in front.
12. Finally, execute UNLOCK to unlock the door with the KEY.
  
This sequence accomplishes the objective of unlocking the DOOR.",0.9625,True,True
unlock,50,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.98125,True,True
unlock,51,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,52,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. From the starting position at (3,2) facing UP, turn LEFT so that you face LEFT. Now the cell immediately in front is (3,1), where the KEY is located.
2. Using PICKUP, grab the KEY from (3,1).
3. With the key in your hand and still at (3,2) but now facing LEFT, turn LEFT again. Facing LEFT, a left turn rotates you to face DOWN.
4. MOVE from (3,2) down to (4,2). The cell (4,2) is empty.
5. At (4,2) facing DOWN, turn LEFT to change your direction to EAST.
6. MOVE from (4,2) to (4,3).
7. MOVE from (4,3) to (4,4). 
8. Finally, from (4,4) facing EAST, the door is immediately in front at (4,5). Use UNLOCK to unlock the DOOR using the KEY.

This sequence accomplishes the objective step by step.",0.975,True,True
unlock,53,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at (1,4) facing LEFT, use ""LEFT"" to turn so you face DOWN.
2. ""MOVE"" to go from (1,4) to (2,4).
3. ""MOVE"" again to move from (2,4) to (3,4). Now you stand above the KEY.
4. ""PICKUP"" picks up the KEY in the cell directly in front (which is (4,4)).
5. ""MOVE"" from (3,4) to (4,4) (the KEY’s former cell, now empty).
6. Being at (4,4) and still holding the KEY, use ""LEFT"" to turn from DOWN to RIGHT, so you'll face the DOOR at (4,5).
7. Finally, ""UNLOCK"" the DOOR using the KEY you are holding.

This sequence meets the objective!",0.978125,True,True
unlock,54,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Let's explain the reasoning step by step:

1. Starting at (2,3) facing DOWN, we want to obtain the KEY that is at (3,1) without stepping into its cell. To pick it up, we must have the KEY in the cell in front of us.
2. From DOWN, a RIGHT turn makes us face WEST. Then two MOVEs take us from (2,3) to (2,2) and then to (2,1).
3. At (2,1) facing WEST, turning LEFT changes our direction to SOUTH; now the cell in front, (3,1), contains the KEY.
4. We perform PICKUP to get the KEY.
5. With the KEY in hand, our next goal is to unlock the door. The DOOR is at (2,5) in the grid, so we want to stand at (2,4) facing EAST (so the door is directly in front of us).
6. From (2,1) (holding the key and currently facing SOUTH), a LEFT turn turns us to face EAST.
7. Three successive MOVEs bring us eastward: from (2,1) to (2,2), then to (2,3), and finally to (2,4).
8. Now, facing EAST, the cell in front (2,5) has the DOOR. We perform UNLOCK to complete our objective.

This sequence of actions satisfies the challenge requirements.",0.96875,True,True
unlock,55,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Here's the step‐by‐step explanation:

1. Starting at (1,4) facing LEFT, the cell in front is (1,3). A MOVE takes you to (1,3).
2. Another MOVE from (1,3) (still facing LEFT) takes you to (1,2). Now, with you still facing LEFT, the cell directly in front (i.e., (1,1)) contains the KEY.
3. Use PICKUP to grab the KEY from (1,1). (Remember that you pick up from the cell directly ahead, not by moving into the cell.)
4–5. You're at (1,2) facing LEFT but now need to head rightwards (towards column 3, then column 4, etc.) to later reach the door. Since turning 180° is needed, you perform two LEFT turns (alternatively two RIGHT turns would work) to face EAST.
6. MOVE from (1,2) facing EAST takes you to (1,3).
7. Another MOVE positions you at (1,4).
8. Now, from (1,4) facing EAST, you need to travel downward toward the door. A RIGHT turn changes your facing direction from EAST to SOUTH.
9. MOVE from (1,4) facing SOUTH goes to (2,4).
10. Another MOVE takes you to (3,4) facing SOUTH.
11. One more MOVE puts you at (4,4) facing SOUTH.
12. To approach the DOOR (located at (4,5)), you must be facing it. Since the door is to your right at (4,5) when standing at (4,4), a single LEFT turn (from SOUTH to EAST) sets you up.
13. Finally, with the door directly in front and the KEY held, UNLOCK opens the DOOR.

This sequence successfully picks up the KEY and unlocks the DOOR.",0.959375,True,True
unlock,56,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>

Let’s explain the steps:

1. Starting at [1][1] facing DOWN, ""MOVE"" brings you to [2][1].
2. ""MOVE"" from [2][1] to [3][1].
3. ""LEFT"" turns you from DOWN to RIGHT.
4. ""MOVE"" from [3][1] to [3][2].
5. ""MOVE"" from [3][2] to [3][3].
6. ""RIGHT"" turns you from RIGHT to DOWN.
7. Facing DOWN from [3][3] makes the KEY at [4][3] directly in front, so ""PICKUP"" collects it.
8. With the key in hand, ""LEFT"" turns you from DOWN to RIGHT.
9. ""MOVE"" brings you from [3][3] to [3][4].
10. ""LEFT"" turns you from RIGHT to UP.
11. ""MOVE"" from [3][4] to [2][4] – an empty cell adjacent to the door.
12. ""RIGHT"" turns you from UP to RIGHT, so that the door at [2][5] is directly ahead.
13. Finally, ""UNLOCK"" unlocks the door using the KEY.

This sequence satisfies all the rules and achieves the objective.",0.959375,True,True
unlock,57,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step explanation:

1. Starting at (2,1) facing LEFT. We need to get to the KEY at (2,4) which lies to our right. Since we’re facing LEFT, we first turn twice to face EAST:
   - ""LEFT"": Now facing SOUTH.
   - ""LEFT"": Now facing EAST.
2. With the agent now facing EAST, moving forward twice takes us closer to the KEY:
   - ""MOVE"": From (2,1) to (2,2).
   - ""MOVE"": From (2,2) to (2,3).
3. The KEY is in the cell directly ahead at (2,4). We pick it up:
   - ""PICKUP"": Picks up the KEY.
4. Next, we need to unlock the door at (1,5). To do that, we must approach so that the DOOR lies directly in front of us. A good approach is to move to (1,4) and face EAST. Currently, the agent is at (2,3) facing EAST. We turn and move as follows:
   - ""LEFT"": Turn from EAST to face NORTH.
   - ""MOVE"": From (2,3) to (1,3).
   - ""RIGHT"": Turn from NORTH to face EAST.
   - ""MOVE"": From (1,3) to (1,4).
5. Now that the DOOR at (1,5) is directly ahead and we are holding the KEY, we unlock the door:
   - ""UNLOCK"": Unlocks the door.
  
This sequence of moves accomplishes the objective in the 2D grid-based environment.",0.96875,True,True
unlock,58,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step reasoning:

1. Starting at row1, col1 facing DOWN, the KEY is at row1, col3. First, turn left to face RIGHT.
2. MOVE from (1,1) to (1,2). Now, with the agent at (1,2) facing RIGHT, the key (at (1,3)) is directly in front.
3. PICKUP the KEY from (1,3).
4. The DOOR is at (3,5) and is accessible from the left side (cell (3,4)). From (1,2) (still holding the KEY and facing RIGHT), turn RIGHT so the agent faces DOWN.
5. MOVE down from (1,2) to (2,2).
6. MOVE down from (2,2) to (3,2).
7. Now, the agent needs to head east. With the agent facing DOWN at (3,2), turn LEFT to face RIGHT.
8. MOVE from (3,2) to (3,3).
9. MOVE from (3,3) to (3,4), which is adjacent to the door.
10. With the door directly in front (at (3,5)) and holding the KEY, perform UNLOCK.

This sequence of actions meets the objective of unlocking the door.",0.96875,True,True
unlock,59,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. You start at row 2, column 4 facing DOWN. Moving forward takes you to row 3, column 4.
2. At row 3, column 4 facing DOWN, the cell directly ahead (row 4, column 4) contains the KEY. Using PICKUP here lets you collect the KEY.
3. Now still at row 3, column 4 with the KEY, you MOVE down into row 4, column 4 (which is now empty because the KEY was picked up).
4. At row 4, column 4 facing DOWN, the DOOR is at row 4, column 5 – to face it, you turn LEFT (which, when facing DOWN, rotates you to face RIGHT).
5. With the DOOR now directly in front (at row 4, column 5) and holding the KEY, using UNLOCK opens the DOOR.

This sequence of actions meets the objective.",0.984375,True,True
unlock,6,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,60,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step reasoning:
1. Starting at (3,2) facing DOWN, we want to reach the KEY at (1,3). To move upward, we first turn so we face UP. We do this by taking two LEFT turns (DOWN → LEFT turn gives EAST, then another LEFT gives UP).
2. We then MOVE from (3,2) to (2,2) and again from (2,2) to (1,2).
3. At (1,2) and still facing UP, the KEY at (1,3) is to our right. A RIGHT turn from UP makes us face EAST.
4. Facing EAST, the cell in front (1,3) contains the KEY. We use PICKUP to collect it.
5. With the KEY in hand, we need to unlock the DOOR at (1,5). We remain at (1,2) and move forward into the room by moving twice — first from (1,2) to (1,3) and then from (1,3) to (1,4).
6. Now at (1,4) facing EAST, the DOOR is directly in front at (1,5). We use the UNLOCK action to open it.

This sequence successfully guides us to the KEY and then to the DOOR to unlock it.",0.971875,True,True
unlock,61,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,62,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,63,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,64,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at (2,3) facing DOWN, the first ""MOVE"" advances you to (3,3).
2. Then ""LEFT"" turns you from DOWN to EAST.
3. ""PICKUP"" collects the KEY located in the cell in front (3,4).
4. With the KEY in hand, ""MOVE"" takes you from (3,3) to (3,4).
5. Finally, ""UNLOCK"" unlocks the DOOR positioned in the cell directly ahead at (3,5).",0.984375,True,True
unlock,65,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step reasoning:
1. Starting at (2,1) facing UP, we first turn RIGHT to face EAST.
2. MOVE twice to reach (2,3).
3. Turn RIGHT again to face SOUTH so that the cell in front (3,3) contains the KEY.
4. PICKUP the KEY.
5. Now holding the key at (2,3) and facing SOUTH, we need to get to a cell adjacent to the door at (1,5).
6. We turn LEFT twice (from SOUTH to NORTH) and MOVE north from (2,3) to (1,3).
7. Turn RIGHT to face EAST.
8. MOVE from (1,3) to (1,4) so that the door at (1,5) is directly in front.
9. Finally, UNLOCK the door using the held key.

This sequence of actions completes the objective.",0.965625,True,True
unlock,66,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at (3,4) facing UP, turn LEFT to face LEFT.
2. MOVE to (3,3).
3. MOVE to (3,2).
4. Turn LEFT to change direction from LEFT to DOWN.
5. MOVE to (4,2).
6. Turn RIGHT (from DOWN to LEFT) so that the cell in front (4,1) has the KEY.
7. PICKUP the KEY from (4,1).
8. Now holding the key at (4,2) facing LEFT, turn LEFT (from LEFT to DOWN).
9. Then turn LEFT again (from DOWN to RIGHT) to face the door.
10. MOVE to (4,3).
11. MOVE to (4,4) so that the door at (4,5) is directly in front.
12. UNLOCK the DOOR using the KEY.

This sequence satisfies the conditions to pick up the KEY and unlock the DOOR.",0.9625,True,True
unlock,67,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step explanation:

1. Starting at (1,3) facing LEFT, the cell immediately ahead is (1,2). We use ""MOVE"" to step there.
2. At (1,2) still facing LEFT, we want to go downward. Since facing LEFT, turning ""LEFT"" rotates us to face DOWN.
3. With the agent now at (1,2) facing DOWN, a ""MOVE"" brings us to (2,2).
4. At (2,2) facing DOWN, the cell in front (3,2) contains the KEY. We then ""PICKUP"" the key.
5. Now holding the KEY and at (2,2) facing DOWN, we ""MOVE"" to (3,2).
6. At (3,2) facing DOWN, we turn ""LEFT"" to face RIGHT.
7. Facing RIGHT at (3,2), a ""MOVE"" takes us to (3,3).
8. Another ""MOVE"" from (3,3) facing RIGHT brings us to (3,4).
9. At (3,4) facing RIGHT, turning ""RIGHT"" sets our direction to DOWN.
10. A ""MOVE"" from (3,4) facing DOWN gets us to (4,4). This cell is immediately to the left of the DOOR.
11. From (4,4) facing DOWN, a ""LEFT"" turn changes our direction to RIGHT. Now the DOOR at (4,5) is directly ahead.
12. Finally, ""UNLOCK"" unlocks the door since we're holding the KEY.

This series of actions successfully navigates to the KEY, picks it up, moves to the door, and unlocks it.",0.9625,True,True
unlock,68,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,69,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,7,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at [4][2] facing DOWN, turn LEFT to face RIGHT (toward the KEY at [4][3]).
2. With the KEY directly in front, execute PICKUP to grab it.
3. MOVE from [4][2] to [4][3].
4. MOVE from [4][3] to [4][4] so the DOOR at [4][5] is now directly in front.
5. With the KEY in hand and the door adjacent, execute UNLOCK to open the door.",0.984375,True,True
unlock,70,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Let's explain the plan step by step:

1. The agent begins at [1,2] facing RIGHT but must first get to the KEY at [4,1] (located in the left room). To do this without entering the cell with the key (because you can’t move into an occupied cell), the agent will approach so the key is directly in front.
2. Turn ""LEFT"", then ""LEFT"" so that the agent faces LEFT, and ""MOVE"" to go from [1,2] to [1,1].
3. Then, turning ""LEFT"" from facing LEFT makes the agent face DOWN. Two ""MOVE""s bring the agent from [1,1] to [2,1] and then to [3,1].
4. Now facing DOWN at [3,1], the cell immediately in front ([4,1]) contains the KEY. The agent executes ""PICKUP"" to grab it.
5. With the key in hand, the goal is to approach the door at [3,5] from the left. The agent needs to get to [3,4] facing RIGHT.
6. From [3,1] (facing DOWN), a ""LEFT"" turn reorients the agent to face RIGHT.
7. Three ""MOVE"" actions take the agent from [3,1] → [3,2] → [3,3] → [3,4].
8. Finally, with the door at [3,5] now directly in front and the key in hand, the agent performs ""UNLOCK"" to unlock the door.

This sequence of actions accomplishes the objective.",0.9625,True,True
unlock,71,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at (4,3) facing DOWN, first turn RIGHT so that you face LEFT (west).
2. MOVE: from (4,3) to (4,2).
3. MOVE: from (4,2) to (4,1).
4. RIGHT: now turning from LEFT to face UP (north).
5. MOVE: from (4,1) to (3,1).
6. RIGHT: from UP to face RIGHT (east). Now, the cell directly ahead is (3,2), where the KEY is located.
7. PICKUP: Pick up the KEY from (3,2).
8. MOVE: With the KEY in hand, from (3,1) move east to (3,2).
9. MOVE: from (3,2) to (3,3).
10. MOVE: from (3,3) to (3,4).
11. RIGHT: Turn from facing east to face SOUTH.
12. MOVE: from (3,4) south to (4,4). Now you are directly to the left of the DOOR.
13. LEFT: Turn from SOUTH to face EAST.
14. UNLOCK: With the KEY held and facing the DOOR at (4,5), unlock the door.

This sequence guides you from the starting position through picking up the key to unlocking the DOOR.",0.95625,True,True
unlock,72,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,73,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Let's explain the reasoning step by step:

1. Starting at (4,1) facing RIGHT:
   - ""MOVE"": Advance to (4,2).
   - ""MOVE"": Advance to (4,3).

2. Turn upward to head toward the KEY (located at (1,4)):
   - ""LEFT"": Now facing UP.
   - ""MOVE"": Go from (4,3) to (3,3).
   - ""MOVE"": Go from (3,3) to (2,3).

3. Position to get adjacent to the KEY:
   - ""RIGHT"": Turn to face RIGHT.
   - ""MOVE"": Advance from (2,3) to (2,4).
   - ""LEFT"": Turn from RIGHT to face UP. Now the KEY at (1,4) is directly in front.
   - ""PICKUP"": Pick up the KEY.

4. Navigate to the door (located at (4,5)). We need to be in an adjacent cell (choosing (4,4) so that the door is immediately to the RIGHT):
   - From (2,4) currently facing UP, turn 180° to face DOWN by:
     • ""RIGHT"" (UP to RIGHT)
     • ""RIGHT"" (RIGHT to DOWN)
   - ""MOVE"": From (2,4) down to (3,4).
   - ""MOVE"": From (3,4) down to (4,4).

5. Finally, face the door and unlock it:
   - ""LEFT"": Turn from DOWN to face RIGHT (door is now directly ahead at (4,5)).
   - ""UNLOCK"": Use the KEY to unlock the door.

This sequence accomplishes the objective.",0.953125,True,True
unlock,74,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.953125,True,True
unlock,75,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Let's explain the reasoning step by step:

1. Starting at [2,3] facing RIGHT, the KEY is located at [4,2] (directly below and to the left). To head toward the KEY we first need to go DOWN. From RIGHT, a ""RIGHT"" turn makes you face DOWN.
2. ""MOVE"" advances you from [2,3] to [3,3].
3. Now from [3,3] facing DOWN, you want to go WEST (to be adjacent to the KEY coming from the north). From DOWN, a ""RIGHT"" turn makes you face WEST.
4. ""MOVE"" takes you from [3,3] to [3,2].
5. To pick up the KEY, you need to be adjacent with your facing cell pointing to it. The KEY is at [4,2] (directly south of [3,2]). From WEST, a ""LEFT"" turn turns you to face SOUTH.
6. ""PICKUP"" grabs the KEY from the cell [4,2] (which is directly in front, i.e. SOUTH of [3,2]).
7. With the KEY in hand, your next goal is to move to a cell from which you can unlock the DOOR. The DOOR is at [3,5] and an adjacent safe cell is [3,4]. You are currently at [3,2] facing SOUTH. To head east, from SOUTH a ""LEFT"" turn directs you to face EAST.
8. ""MOVE"" moves you from [3,2] to [3,3].
9. ""MOVE"" moves you from [3,3] to [3,4]. Now you are adjacent to the DOOR.
10. ""UNLOCK"" unlocks the door at [3,5] (directly in front of you) while you hold the KEY.

This sequence of actions fulfills the objective.",0.96875,True,True
unlock,76,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Let's explain the steps:

1. Starting at (3,1) facing DOWN, a MOVE takes you from (3,1) to (4,1).
2. A LEFT turn from DOWN gives you facing RIGHT.
3. With the agent at (4,1) and facing RIGHT, the cell in front (4,2) contains the KEY; so PICKUP retrieves the key.
4. Now holding the KEY, a LEFT turn from RIGHT makes you face UP.
5. A MOVE steps you from (4,1) up to (3,1).
6. From facing UP, a RIGHT turn sets your orientation to RIGHT.
7.–9. Three consecutive MOVEs while facing RIGHT advance you along row 3 from (3,1) to (3,2), then to (3,3), and finally to (3,4).
10. Finally, with the door at (3,5) directly in front of you at (3,4) and holding the key, an UNLOCK action opens the door.

This sequence allows you to pick up the key and then successfully unlock the door.",0.96875,True,True
unlock,77,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>

Let's explain the solution step by step:

1. Starting at (1,4) facing UP, we first turn LEFT so that we face left. Then we MOVE from (1,4) to (1,3).

2. At (1,3) facing left, we turn LEFT again to face DOWN. Now the cell directly ahead is (2,3) and, further down from there, the KEY is at (3,3). We MOVE to (2,3).

3. With the KEY now directly in front (cell (3,3)) and being adjacent, we execute PICKUP to grab the KEY.

4. Now that we hold the KEY at (2,3) facing DOWN, we need to reach the door (located at (1,5)) from the left side. To unlock the door, the agent must be in cell (1,4) facing RIGHT. So, from (2,3) facing DOWN, we turn LEFT twice (first to RIGHT, then to UP) to face UP.

5. With the agent facing UP, we MOVE from (2,3) to (1,3).

6. At (1,3) facing UP, we turn RIGHT so that we face RIGHT. Then we MOVE into (1,4).

7. Finally, facing RIGHT with the door directly in front at cell (1,5), the agent uses UNLOCK to unlock the door.

This step-by-step plan results in the sequence of actions shown above.",0.965625,True,True
unlock,78,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at (2,2) and facing RIGHT, the key is located one cell below (at (3,2)). Turning RIGHT makes the agent face DOWN.
2. With the agent now facing DOWN, the key is in the cell directly in front. The agent issues a PICKUP to grab the KEY.
3. Still at (2,2) (since PICKUP does not move the agent), the agent now needs to get adjacent to the door. The door is at (3,5), and an ideal adjacent cell is (3,4) so that when facing RIGHT the door is directly in front.
4. The agent uses MOVE (facing DOWN) to step into the cell (3,2).
5. Now at (3,2) and still facing DOWN, a turn to the LEFT makes the agent face RIGHT.
6. With the agent at (3,2) facing RIGHT, a MOVE takes the agent to (3,3) and another MOVE to (3,4).
7. Finally, with the agent at (3,4) and facing RIGHT (with the door at (3,5) directly in front), the agent issues UNLOCK to unlock the DOOR using the KEY.
",0.978125,True,True
unlock,79,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at (3,3) facing LEFT, turn RIGHT to face UP.
2. MOVE upward to (2,3).
3. Turn RIGHT to face RIGHT.
4. With the KEY at (2,4) now in front, PICKUP the KEY.
5. MOVE forward to (2,4).
6. Turn LEFT so you face UP. This positions you to move to (1,4).
7. MOVE upward to (1,4).
8. Turn RIGHT to face the DOOR (located at (1,5) from here).
9. Finally, UNLOCK the DOOR using the KEY you are holding.
  
This sequence ensures you retrieve the KEY and unlock the DOOR as required.",0.971875,True,True
unlock,8,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.95625,True,True
unlock,80,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,81,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,82,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step reasoning:
1. The agent starts at [1,3] facing RIGHT. To reach a good position to pick up the KEY (located at [2,4]), the agent first turns RIGHT to face DOWN.
2. The agent then moves from [1,3] to [2,3].
3. Facing DOWN at [2,3], the agent turns LEFT to face RIGHT. Now the KEY at [2,4] is directly in front.
4. The agent uses PICKUP to pick up the KEY.
5. With the key in hand, the agent moves from [2,3] to [2,4] (which is now empty since the key was picked up).
6. Facing RIGHT at [2,4], the agent turns RIGHT to face DOWN, preparing to approach the door.
7. The agent moves from [2,4] to [3,4].
8. At [3,4] and facing DOWN, the agent turns LEFT to face RIGHT. Now the DOOR at [3,5] is directly in front.
9. Finally, the agent performs UNLOCK while holding the KEY to open the DOOR.

This sequence satisfies the constraints and completes the objective.",0.971875,True,True
unlock,83,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions> 

Step-by-step explanation:
1. Starting at (1,2) facing DOWN, the first ""MOVE"" takes you to (2,2).
2. The second ""MOVE"" brings you to (3,2).
3. ""RIGHT"" rotates you from DOWN to WEST so that the adjacent cell (3,1) now lies in front.
4. ""PICKUP"" collects the KEY from cell (3,1) without entering it.
5. With the KEY in hand at (3,2) and facing WEST, you need to reposition to approach the DOOR. Two ""LEFT"" turns (i.e., 180° rotation) change your facing from WEST to EAST.
6. A ""MOVE"" takes you from (3,2) to (3,3).
7. Another ""MOVE"" moves you to (3,4), positioning you directly to the left of the DOOR at (3,5).
8. Finally, ""UNLOCK"" uses the KEY to unlock the DOOR directly in front of you.

This sequence enables you to navigate around the grid, pick up the KEY, and unlock the DOOR step by step.",0.971875,True,True
unlock,84,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,85,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step reasoning:
1. Starting at (4,3) facing RIGHT, turn LEFT to face UP.
2. MOVE one step from (4,3) to (3,3).
3. Now facing UP, the KEY is in the cell immediately ahead (at (2,3)), so use PICKUP to acquire it.
4. With the KEY in hand, turn RIGHT from UP to face RIGHT.
5. MOVE one step from (3,3) to (3,4). Now the DOOR is immediately to the right (cell (3,5)).
6. Finally, use UNLOCK to unlock the DOOR.
",0.98125,True,True
unlock,86,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step reasoning:

1. Starting at cell [4,3] facing RIGHT, we first need to reach the KEY at cell [1,1]. To do that, we turn LEFT to face UP.
2. We MOVE upward three times (to [3,3], then [2,3], then [1,3]).
3. At [1,3] we now want to approach the KEY from its right side. Turning LEFT from UP brings us to face LEFT.
4. MOVE from [1,3] to [1,2]. Now the cell directly in front ([1,1]) contains the KEY.
5. PICKUP the KEY.
6. With the KEY in hand, we need to reach the DOOR located in the other room at cell [4,5]. From our current location [1,2] facing LEFT, we turn LEFT to face DOWN.
7. MOVE downward three times to reach [4,2] (passing through [2,2] and [3,2]).
8. Now, we need to move right toward the door’s vicinity. Facing DOWN, a LEFT turn changes our heading to RIGHT.
9. MOVE right twice: first to [4,3] and then to [4,4]. Now, with the DOOR at [4,5] directly in front,
10. Finally, perform UNLOCK to unlock the door with the KEY.

This sequence satisfies all the rules and reaches the objective.",0.953125,True,True
unlock,87,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Initially, you are at (2,4) facing DOWN. You need to face UP to go toward the KEY (located at (1,3)). So you turn ""LEFT"" then ""LEFT"" (from DOWN, LEFT gives RIGHT; then LEFT from RIGHT gives UP).
2. With your new orientation (UP), you ""MOVE"" forward from (2,4) to (1,4).
3. Now, to pick up the KEY which is to the left of your current cell (at (1,3)), you turn ""LEFT"" (from UP, a left turn points you LEFT).
4. You ""PICKUP"" the KEY which is directly in front of you.
5. Next, you need to approach the DOOR (located at (3,5)) from an adjacent cell. The plan is to move to (3,4) and then face RIGHT so that the DOOR, at (3,5), is directly in front.
6. From your current position (1,4) facing LEFT, you turn ""LEFT"" (from LEFT, a left turn points you DOWN).
7. You then ""MOVE"" down from (1,4) to (2,4) and ""MOVE"" again to (3,4).
8. At (3,4) and facing DOWN, you turn ""LEFT"" (which from DOWN points you RIGHT) so that you are facing the DOOR.
9. Finally, with the KEY in your possession and the DOOR directly in front, you ""UNLOCK"" the DOOR.

This sequence of actions satisfies the objective.",0.96875,True,True
unlock,88,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions> 

Step-by-step explanation:
1. Starting at [3,2] facing LEFT, we first need to reorient to head toward the KEY. Since the KEY is at [4,4] and one accessible adjacent cell is [4,3] (with the KEY directly to its east), we plan our route via (3,3) then to (4,3).
2. From facing LEFT, two RIGHT turns make us face EAST.
3. A MOVE from [3,2] brings us to [3,3].
4. A RIGHT turn from EAST rotates us to face SOUTH.
5. A MOVE brings us from [3,3] to [4,3].
6. At [4,3] facing SOUTH, we need to face EAST (so that the KEY at [4,4] is in front). A LEFT turn does that.
7. With the KEY in [4,4] directly ahead, we use PICKUP to grab it.
8. Now, to unlock the DOOR at [3,5], we must be adjacent to it with the door directly in front. We plan to get to [3,4] facing EAST (since the door is at [3,5]).  
9. From [4,3] still and facing EAST, a LEFT turn rotates us to face NORTH.
10. A MOVE takes us from [4,3] up to [3,3].
11. A RIGHT turn from NORTH changes our facing to EAST.
12. A MOVE takes us to [3,4] where the DOOR is directly ahead in cell [3,5].
13. Finally, UNLOCK unlocks the DOOR using the KEY we picked up.

This sequence satisfies the game rules and achieves the objective.",0.9625,True,True
unlock,89,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step explanation:

1. Starting at cell (3,4) facing DOWN, turn RIGHT to face LEFT.
2. MOVE three times to reach (3,1) from (3,4) while facing LEFT.
3. At (3,1) facing LEFT, a LEFT turn rotates the agent to face DOWN. The KEY is located in the cell directly in front (row 4, col 1), so PICKUP the key.
4. Now holding the key at (3,1) and facing DOWN, turn LEFT to change direction to EAST.
5. MOVE three times along row 3 (from col1 to col4) to reach (3,4) while facing EAST.
6. At (3,4) facing EAST, turn RIGHT to face SOUTH.
7. MOVE to (4,4). Now at (4,4), the DOOR is directly to the EAST (at (4,5)).
8. A LEFT turn from SOUTH changes the direction to EAST.
9. Finally, perform the UNLOCK action on the door in front.

This sequence meets the objective of picking up the key and unlocking the door through valid moves within the grid rules.",0.95625,True,True
unlock,9,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,90,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step reasoning:
1. Starting at [2][1] facing LEFT, turn LEFT. Now you face DOWN toward row3.
2. With the key at [3][1] directly in front, perform PICKUP.
3. MOVE into [3][1].
4. Now to approach the door at [3][5] from its left side, turn LEFT (from facing DOWN) to face RIGHT.
5. MOVE from [3][1] to [3][2].
6. MOVE from [3][2] to [3][3].
7. MOVE from [3][3] to [3][4] so that the door at [3][5] is directly in front.
8. Finally, UNLOCK the door in front using the key.
",0.975,True,True
unlock,91,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>

Step-by-step reasoning:
1. The agent starts at (2,2) facing RIGHT. Moving forward (""MOVE"") brings it to (2,3).
2. Another ""MOVE"" positions it at (2,4).
3. To pick up the key at (1,4) which lies in the cell directly above (2,4), the agent turns LEFT from RIGHT to face UP.
4. The ""PICKUP"" action then collects the KEY from (1,4).
5. With the key in hand and still at (2,4) facing UP, the agent must now approach the DOOR at (3,5). An efficient way is to get to (3,4) and face RIGHT:
   - Turn RIGHT (from UP to RIGHT),
   - then another RIGHT (from RIGHT to DOWN).
6. A ""MOVE"" from (2,4) facing DOWN brings the agent to (3,4).
7. A final turn LEFT converts the direction from DOWN to RIGHT.
8. Now, with the DOOR at (3,5) directly in front and the KEY held, the ""UNLOCK"" action opens the door.

This series of actions satisfies the objective.",0.971875,True,True
unlock,92,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,93,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step Explanation:
1. Starting at (2,1) facing DOWN:
   • ""LEFT"": Turn left to face RIGHT.
   • ""MOVE"": Step into (2,2) facing RIGHT.
2. To approach the KEY at (3,3), we position ourselves to pick it up from behind:
   • ""RIGHT"": Turn right so that from (2,2) we are now facing DOWN.
   • ""MOVE"": Go down to (3,2) facing DOWN.
   • ""LEFT"": Turn left from DOWN to face RIGHT. At (3,2), the KEY is now in the cell immediately to the right, at (3,3).
   • ""PICKUP"": Pick up the KEY.
3. With the KEY in hand at (3,2) facing RIGHT, we head to the door at (4,5). We need to be to the left of the door and facing RIGHT to unlock it:
   • ""RIGHT"": Turn right to change from facing RIGHT to facing DOWN.
   • ""MOVE"": Step down to (4,2).
   • ""LEFT"": Turn left so that we face RIGHT.
   • ""MOVE"": Move to (4,3).
   • ""MOVE"": Move to (4,4). Now the door at (4,5) is directly in front of us.
   • ""UNLOCK"": Unlock the door using the KEY.
   
Following these actions navigates the agent around the grid, picking up the KEY and then unlocking the DOOR.",0.9625,True,True
unlock,94,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>

Let's explain the reasoning step by step:

1. Starting at cell (1,4) facing LEFT, performing:
   - ""MOVE"": advances to (1,3) (still facing LEFT).
   - ""MOVE"": advances to (1,2).

2. To head south toward the key, from (1,2) facing LEFT:
   - ""LEFT"": now facing DOWN.
   - ""MOVE"": moves to (2,2).
   - ""MOVE"": moves to (3,2).

3. The key is located at (4,1), so from (3,2) we want to approach it from above. From (3,2) facing DOWN:
   - ""RIGHT"": changes direction to LEFT.
   - ""MOVE"": moves to (3,1).

4. Now, standing at (3,1) facing LEFT, to be in position to pick up the key which lies in the cell directly south (at (4,1)):
   - ""LEFT"": turns to face DOWN.
   - ""PICKUP"": picks up the KEY from (4,1).

5. Now holding the key, we need to travel to the door. The door is at (1,5), and can be unlocked from the adjacent cell at (1,4) when facing EAST. Starting at (3,1) facing DOWN:
   - ""LEFT"": (from DOWN, a left turn faces EAST).
   - ""MOVE"": from (3,1) to (3,2).
   - ""MOVE"": from (3,2) to (3,3).
   - ""MOVE"": from (3,3) to (3,4).

6. From (3,4) facing EAST, we must go north:
   - ""LEFT"": now facing NORTH.
   - ""MOVE"": from (3,4) to (2,4).
   - ""MOVE"": from (2,4) to (1,4).

7. Finally, at (1,4) we need to face EAST so that the door at (1,5) is directly in front:
   - ""RIGHT"": from NORTH, a right turn faces EAST.
   - ""UNLOCK"": unlocks the door (with the KEY in hand).

Thus, the action list above completes the objective step by step.",0.94375,True,True
unlock,95,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step explanation:
1. Starting at [2][2] facing DOWN, turn twice (""LEFT"", ""LEFT"") to face UP; now the KEY at [1][2] is right in front.
2. Use ""PICKUP"" to grab the KEY from [1][2].
3. With the KEY in hand, turn ""RIGHT"" to face RIGHT.
4. Move forward twice (""MOVE"", ""MOVE"") to go from [2][2] to [2][3] and then [2][4]. This puts you immediately to the left of the DOOR (which is at [2][5]).
5. Finally, ""UNLOCK"" the door now that you’re adjacent, facing it, and holding the KEY.",0.978125,True,True
unlock,96,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step reasoning:
1. Starting at (3,1) facing UP, we first turn LEFT twice to face DOWN.
2. MOVE: Advance from (3,1) to (4,1).
3. Turn LEFT once to face RIGHT.
4. MOVE twice to move from (4,1) to (4,2) and then to (4,3).
5. Now the KEY at (4,4) is directly in front; execute PICKUP to grab it.
6. MOVE: Step into (4,4), which is now empty.
7. With the agent at (4,4) facing RIGHT, the DOOR in (4,5) is directly in front. Use UNLOCK to open it.

This sequence accomplishes the objective.",0.971875,True,True
unlock,97,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,98,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,99,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>

Step-by-step reasoning:

1. Start at (3,1) facing UP. To go toward the KEY at (3,4) (which is to the right), turn RIGHT.
2. MOVE from (3,1) to (3,2).
3. MOVE from (3,2) to (3,3). Now the KEY at (3,4) is directly in front.
4. PICKUP the KEY from the adjacent cell (3,4).
5. With the KEY in hand and still facing RIGHT, turn RIGHT to face DOWN.
6. MOVE from (3,3) to (4,3).
7. Now turn LEFT (from DOWN to RIGHT) so that the DOOR at (4,5) becomes directly ahead (from (4,4)).
8. MOVE from (4,3) to (4,4).
9. With the DOOR now directly in front at (4,5) and holding the KEY, UNLOCK the door.

This sequence achieves the goal of unlocking the DOOR.",0.971875,True,True
unlock,0,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.953125,True,True
unlock,1,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,10,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.95,True,True
unlock,11,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,12,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.959375,True,True
unlock,13,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.978125,True,True
unlock,14,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,15,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,16,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""UNLOCK""]
</actions>",0.984375,True,True
unlock,17,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,18,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.959375,True,True
unlock,19,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,2,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""RIGHT"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,20,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,21,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,22,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,23,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,24,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.984375,True,True
unlock,25,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
  [""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,26,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.959375,True,True
unlock,27,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,28,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,29,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,3,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,30,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.978125,True,True
unlock,31,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,32,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.95625,True,True
unlock,33,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,34,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
  [""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,35,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,36,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.98125,True,True
unlock,37,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.95625,True,True
unlock,38,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,39,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,4,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,40,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,41,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,42,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,43,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>

Here's the reasoning:

1. The agent starts at [1,2] facing DOWN. The KEY is at [3,2]. From [1,2], moving DOWN brings the agent to [2,2].

2. When at [2,2] facing DOWN, the cell directly in front ([3,2]) contains the KEY. So the agent uses “PICKUP” to pick up the KEY without entering that cell.

3. Now holding the KEY, the agent safely moves into [3,2] with a “MOVE” action.

4. To reach a position adjacent to the DOOR (located at [3,5]), the agent turns LEFT (from DOWN, a left turn faces EAST).

5. Moving EAST twice takes the agent from [3,2] to [3,3] and then from [3,3] to [3,4]. The DOOR is at [3,5] (directly in front of [3,4] when facing EAST).

6. Finally, the “UNLOCK” action unlocks the door.

This sequence of actions meets the objective while following all rules.",0.978125,True,True
unlock,44,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,45,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,46,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.959375,True,True
unlock,47,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,48,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,49,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,5,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,50,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
  [""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.98125,True,True
unlock,51,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,52,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,53,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,54,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,55,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.959375,True,True
unlock,56,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.959375,True,True
unlock,57,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,58,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,59,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.984375,True,True
unlock,6,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,60,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
  [""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,61,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,62,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,63,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.95625,True,True
unlock,64,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>",0.984375,True,True
unlock,65,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,66,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,67,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,68,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.95625,True,True
unlock,69,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,7,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.984375,True,True
unlock,70,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,71,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,72,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,73,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.953125,True,True
unlock,74,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,75,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,76,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,77,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,78,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.978125,True,True
unlock,79,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,8,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.95625,True,True
unlock,80,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,81,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.959375,True,True
unlock,82,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.978125,True,True
unlock,83,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,84,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,85,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.98125,True,True
unlock,86,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.946875,True,True
unlock,87,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,88,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,89,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.9625,True,True
unlock,9,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,90,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,91,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.965625,True,True
unlock,92,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.975,True,True
unlock,93,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,94,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.95,True,True
unlock,95,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.978125,True,True
unlock,96,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,97,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>",0.96875,True,True
unlock,98,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock,99,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to unlock a `DOOR`.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot enter a cell that contains any object unless it’s been picked up.

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>",0.971875,True,True
unlock_pickup,0,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""DROP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,1,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", ""AGENT"", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,10,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,11,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.928125,True,True
unlock_pickup,12,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.946875,True,True
unlock_pickup,13,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,14,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.934375,True,True
unlock_pickup,15,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.928125,True,True
unlock_pickup,16,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,17,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.940625,True,True
unlock_pickup,18,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.940625,True,True
unlock_pickup,19,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,2,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""RIGHT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.940625,True,True
unlock_pickup,20,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,21,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,22,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.91875,True,True
unlock_pickup,23,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.95,True,True
unlock_pickup,24,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.95625,True,True
unlock_pickup,25,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.928125,True,True
unlock_pickup,26,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,27,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,28,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""DROP"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,29,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,3,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,30,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.946875,True,True
unlock_pickup,31,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""DROP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,32,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.91875,True,True
unlock_pickup,33,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,34,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.946875,True,True
unlock_pickup,35,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.934375,True,True
unlock_pickup,36,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""KEY"", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.96875,True,True
unlock_pickup,37,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.953125,True,True
unlock_pickup,38,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.94375,True,True
unlock_pickup,39,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""DROP"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,4,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.95,True,True
unlock_pickup,40,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""PICKUP""]
</actions>",0.94375,True,True
unlock_pickup,41,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,42,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,43,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.934375,True,True
unlock_pickup,44,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,45,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.94375,True,True
unlock_pickup,46,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.934375,True,True
unlock_pickup,47,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.94375,True,True
unlock_pickup,48,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""AGENT"", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.9125,True,True
unlock_pickup,49,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.90625,True,True
unlock_pickup,5,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.940625,True,True
unlock_pickup,50,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,51,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,52,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.94375,True,True
unlock_pickup,53,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,54,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,55,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.93125,True,True
unlock_pickup,56,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""DROP"", ""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.946875,True,True
unlock_pickup,57,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.93125,True,True
unlock_pickup,58,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.934375,True,True
unlock_pickup,59,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,6,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.94375,True,True
unlock_pickup,60,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.95,True,True
unlock_pickup,61,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.940625,True,True
unlock_pickup,62,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.925,True,True
unlock_pickup,63,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.953125,True,True
unlock_pickup,64,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.959375,True,True
unlock_pickup,65,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.940625,True,True
unlock_pickup,66,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.95625,True,True
unlock_pickup,67,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.934375,True,True
unlock_pickup,68,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.95,True,True
unlock_pickup,69,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""AGENT"", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.940625,True,True
unlock_pickup,7,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.95625,True,True
unlock_pickup,70,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.953125,True,True
unlock_pickup,71,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.91875,True,True
unlock_pickup,72,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.93125,True,True
unlock_pickup,73,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.903125,True,True
unlock_pickup,74,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.934375,True,True
unlock_pickup,75,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.928125,True,True
unlock_pickup,76,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.94375,True,True
unlock_pickup,77,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.940625,True,True
unlock_pickup,78,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.953125,True,True
unlock_pickup,79,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.921875,True,True
unlock_pickup,8,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.953125,True,True
unlock_pickup,80,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.94375,True,True
unlock_pickup,81,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.95,True,True
unlock_pickup,82,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.915625,True,True
unlock_pickup,83,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.95,True,True
unlock_pickup,84,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""RIGHT"", ""DROP"", ""LEFT"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,85,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""DROP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,86,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,87,2_step,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.928125,True,True
unlock_pickup,88,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,89,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.946875,True,True
unlock_pickup,9,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.91875,True,True
unlock_pickup,90,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.953125,True,True
unlock_pickup,91,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.921875,True,True
unlock_pickup,92,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,93,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.93125,True,True
unlock_pickup,94,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.915625,True,True
unlock_pickup,95,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.934375,True,True
unlock_pickup,96,2_step,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.940625,True,True
unlock_pickup,97,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
    [""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
    [""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.959375,True,True
unlock_pickup,98,2_step,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
  [""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
  [""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.940625,True,True
unlock_pickup,99,2_step,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

First provide only the actions until you unlock the door. Based on those actions, an updated grid will be given to you, after which you will have to give your entire action sequence.
assistant: <actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK""]
</actions>
user: 
            The updated grid is:
            <updated_grid>
            [""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", """", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
            </updated_grid>
            After those moves, you are facing RIGHT holding the KEY. Now complete your actions and give your entire actions sequence.
        ","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.934375,True,True
unlock_pickup,0,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain the plan step by step:

1. The agent starts at (3,3) facing UP. The KEY lies at (3,4) (to its right). So the agent first turns RIGHT to face east.
2. With the KEY directly ahead (at (3,4)), the agent executes PICKUP to grab it.
3. The agent then moves forward into the cell (3,4) formerly occupied by the KEY.
4. To navigate to the door (located at (4,5)), the agent turns RIGHT (from east, now facing south).
5. It then moves forward to step into (4,4).
6. To face the door (which is to the east of (4,4)), the agent turns LEFT (from south to east).
7. Now the door at (4,5) is directly in front; with the KEY in hand, the agent executes UNLOCK.
8. With the door unlocked, the agent moves forward into the door cell (4,5).
9. The agent then moves EAST from (4,5) to (4,6) to enter the room that contains the BOX.
10. In the new room, to reach the BOX at (1,8), the agent turns LEFT (from east to north).
11. Then it moves north from (4,6) to (3,6).
12. Moving north again, it goes from (3,6) to (2,6).
13. Another MOVE north takes it from (2,6) to (1,6).
14. Now facing north at (1,6) but needing to approach the BOX from the west, the agent turns RIGHT to face east.
15. It then moves east into (1,7) so that the BOX in (1,8) is directly ahead.
16. Finally, with the BOX lined up, the agent executes PICKUP to take the BOX.

This sequence adheres to all game rules and achieves the objective of picking up the BOX in the other room.",0.0,False,True
unlock_pickup,1,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", ""AGENT"", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""DROP"", ""LEFT"", ""PICKUP""]
</actions>

Let's explain step by step:

1. Starting at (1,4) facing DOWN, we need to get the KEY at (1,2). Since from DOWN a RIGHT turn makes the agent face WEST (which is the direction needed to approach the KEY), we do:
   - ""RIGHT"": Now facing WEST.
2. ""MOVE"": From (1,4) → (1,3). Now the agent stands just to the right of the KEY.
3. ""PICKUP"": With the KEY in cell (1,2) directly in front (to the west), the agent picks up the KEY.
   
4. Now, with the KEY in hand, we must leave the left room by unlocking the door. We plan a route from the current (1,3):
   - ""LEFT"": While facing WEST, a LEFT turn (90° counterclockwise) makes the agent face SOUTH.
5. ""MOVE"": From (1,3) → (2,3).
6. ""LEFT"": Facing SOUTH, a LEFT turn makes the agent face EAST.
7. ""MOVE"": From (2,3) → (2,4). Now the door cell is right in front at (2,5).

8. ""UNLOCK"": With the KEY in hand and the door (at (2,5)) directly ahead, the agent unlocks it. The door is now passable.
9. ""MOVE"": Step into the former door cell: from (2,4) → (2,5) while still facing EAST.
10. ""MOVE"": Continue moving EAST from (2,5) → (2,6).

11. At this point, the agent is holding the KEY but needs free hands to pick up the BOX later. Since the KEY is no longer needed, the agent drops it. The agent does so by dropping it in the cell directly ahead (cell (2,7)), which is empty:
    - ""DROP"": KEY is dropped into (2,7).

12. Now facing EAST at (2,6), the BOX lies in (1,6) (directly north of (2,6)). So the agent turns:
    - ""LEFT"": From EAST, a LEFT turn makes the agent face NORTH.
13. Finally, ""PICKUP"": With the BOX in cell (1,6) directly ahead, the agent picks up the BOX—achieving the objective.

This completes the action list.",0.959375,True,True
unlock_pickup,10,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain step by step:

1. Starting at (2,4) facing UP, turn RIGHT twice so you face DOWN. Facing DOWN, the KEY at (3,4) is directly ahead, so execute PICKUP.
2. Now holding the KEY at (2,4) (facing DOWN), MOVE forward twice to reach (4,4). The empty cell at (4,4) is adjacent to the DOOR at (4,5).
3. At (4,4) facing DOWN, turn LEFT so you face RIGHT toward the DOOR.
4. Execute UNLOCK to unlock the door (at (4,5)) using your KEY.
5. MOVE into the door cell at (4,5), then MOVE again into the adjacent cell (4,6), which is in the room containing the BOX.
6. Now, the BOX is located at (1,6). From (4,6) (facing RIGHT), turn LEFT to face UP.
7. MOVE upward twice to reach (2,6); now the BOX is directly ahead at (1,6). Finally, execute PICKUP to pick up the BOX.

This sequence successfully navigates between the rooms, picks up the KEY, unlocks the DOOR, and finally picks up the BOX.",0.0,False,True
unlock_pickup,11,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
  [""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Let’s explain the plan step by step:

1. Starting at (2,3) facing LEFT, first turn to face DOWN so you can approach the KEY at (4,3). (Action: ""LEFT"")
2. Now at (2,3) facing DOWN, ""MOVE"" to go to (3,3). (Action: ""MOVE"")
3. With KEY located in the cell in front of you ((4,3)), ""PICKUP"" it. (Action: ""PICKUP"")
   
   (At this point you’re at (3,3) holding the KEY.)

4. You must now unlock the door at (1,5) (door cell is accessible from the other room). From (3,3) facing DOWN, you need to turn to face UP. Two ""LEFT"" actions will do this. (Actions: ""LEFT"", ""LEFT"")
5. ""MOVE"" from (3,3) to (2,3) facing UP. (Action: ""MOVE"")
6. ""MOVE"" from (2,3) to (1,3) facing UP. (Action: ""MOVE"")
7. Now at (1,3) and facing UP, turn ""RIGHT"" to face EAST so that the cell directly in front ((1,4)) will help you approach the door. (Action: ""RIGHT"")
8. ""MOVE"" from (1,3) to (1,4) facing EAST. (Action: ""MOVE"")
9. With the door at (1,5) now in front of you, ""UNLOCK"" it using the KEY. (Action: ""UNLOCK"")
   
   (The door cell becomes unlocked—and thus empty—but you are still holding the KEY.)

10. Since you cannot pick up the BOX while holding the KEY, reorient at (1,4) to drop the KEY into a valid empty cell. Turn ""RIGHT"" from EAST so you face DOWN (where (2,4) is empty). (Action: ""RIGHT"")
11. ""DROP"" the KEY into (2,4). (Action: ""DROP"")
    
    (Now you are empty-handed.)

12. Next, head through the unlocked door. From (1,4) facing DOWN, turn ""LEFT"" so that you face EAST again, which is the direction toward the door cell at (1,5). (Action: ""LEFT"")
13. ""MOVE"" from (1,4) into the door cell (1,5) facing EAST. (Action: ""MOVE"")
14. Now, continue moving along the room’s corridor: ""MOVE"" right into (1,6). (Action: ""MOVE"")
15. ""MOVE"" right into (1,7). (Action: ""MOVE"")
16. ""MOVE"" right into (1,8). (Action: ""MOVE"")
17. ""MOVE"" right into (1,9). (Action: ""MOVE"")
18. At (1,9) facing EAST, turn ""RIGHT"" so you face DOWN (and thus can see the BOX at (2,9) immediately in front). (Action: ""RIGHT"")
19. Finally, ""PICKUP"" the BOX located in (2,9). (Action: ""PICKUP"")

This sequence of actions moves you from your starting cell, collects the KEY needed to unlock the door, drops the KEY so you can later pick up the BOX, travels through the door to the BOX’s room, and finally picks up the BOX.",0.0,False,True
unlock_pickup,12,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,13,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""DROP"", ""RIGHT"", ""PICKUP""]
</actions>

Here's the step‐by‐step reasoning:

1. The agent starts at (4,4) facing DOWN. The key is at (2,2) in the same room.
2. To head toward the key, the agent first needs to go left. Since facing DOWN, a RIGHT turn faces LEFT → then MOVE to (4,3).
3. From (4,3) (facing LEFT), a RIGHT turn makes the agent face UP → then MOVE to (3,3).
4. To approach the key, the agent turns LEFT (from UP to LEFT) and MOVEs to (3,2).
5. Now at (3,2) facing LEFT, a RIGHT turn makes the agent face UP so that the cell in front, (2,2), contains the KEY. The agent executes PICKUP.
6. Holding the KEY now, the agent needs to unlock the DOOR located at (4,5) (in the wall between rooms). The agent plans a path back:
   - From (3,2) (facing UP), a RIGHT turn makes the agent face RIGHT and MOVE to (3,3).
   - A further MOVE from (3,3) to (3,4) (still facing RIGHT).
   - Then a RIGHT turn (from RIGHT to DOWN) and MOVE from (3,4) to (4,4).
7. Now at (4,4) facing DOWN, a LEFT turn reorients the agent to face RIGHT so that the DOOR at (4,5) is directly in front. The agent then executes UNLOCK.
8. With the door unlocked, the agent proceeds into the adjacent room:
   - MOVE from (4,4) to (4,5), then another MOVE to (4,6), positioning the agent right before the BOX (which is at (4,7)).
9. However, since the agent is still holding the KEY and cannot hold more than one item, the KEY must be dropped. The agent turns LEFT to face UP so that dropping will occur into an empty cell (cell (3,6)). DROP is executed.
10. Finally, the agent turns RIGHT (from UP back to RIGHT) so that the BOX is now directly in front, and executes PICKUP to grab the BOX.

This sequence meets the challenge requirements step by step.",0.934375,True,True
unlock_pickup,14,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (4,2) facing LEFT, the KEY is at (4,4). To pick it up:
   - Turn LEFT twice (from LEFT → DOWN → RIGHT) so that you face toward the KEY.
   - MOVE from (4,2) to (4,3).
   - PICKUP the KEY from the adjacent cell (4,4).

2. With the KEY in hand, you need to unlock the DOOR at (1,5). To do so, approach from the left (cell (1,4) facing RIGHT):
   - MOVE from (4,3) (still holding the KEY) to (4,4).
   - Turn LEFT (from RIGHT to UP) and MOVE upward from (4,4) to (3,4), then MOVE to (2,4), and MOVE to (1,4).
   - Turn RIGHT to face the door (RIGHT from UP) and UNLOCK the door at (1,5).

3. Now that the door is open, enter the door room to get to the BOX at (3,6):
   - MOVE from (1,4) into the door cell (1,5), then MOVE to (1,6).
   - Turn RIGHT to face DOWN (so that the BOX at (3,6) is in front of you when you are at (2,6)).
   - MOVE DOWN from (1,6) to (2,6).
   - PICKUP the BOX (from the adjacent cell (3,6)).

This series of actions satisfies the rules and objectives provided.",0.0,False,True
unlock_pickup,15,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain step‐by‐step:

1. Starting at (2,4) facing DOWN, we first need to get the KEY at (1,2) which is in the left room. To reach it we:
   - Turn so you face WEST (from DOWN a RIGHT turn yields WEST).
   - Move twice from (2,4) to (2,3) then to (2,2).
   - Then turn RIGHT (from WEST, a RIGHT turn faces NORTH) so that the cell in front, (1,2), has the KEY.
   - Execute PICKUP to get the KEY.

2. With the KEY in hand, navigate from (2,2) to the door cell. The door is at (4,5), and the proper unlocking position is from the left side at (4,4) facing EAST.
   - From (2,2) facing NORTH, turn RIGHT to face EAST.
   - Move twice to go from (2,2) → (2,3) → (2,4).
   - Then turn RIGHT (from EAST, a RIGHT turn faces SOUTH) and move twice to go from (2,4) → (3,4) → (4,4).

3. At (4,4) facing SOUTH, turn LEFT to face EAST and use UNLOCK to open the door at (4,5).

4. After unlocking, step into the door and enter the right room:
   - MOVE from (4,4) → (4,5) (through the door cell),
   - Then MOVE from (4,5) → (4,6) (now in the room with the BOX).

5. You now face EAST at (4,6) while still holding the KEY. But you cannot pick up the BOX while holding an object. So, you need to drop the KEY first—choosing an empty cell that is not a DOOR. To do this:
   - Turn LEFT (from EAST, LEFT gives NORTH) so that the cell ahead (3,6) is empty.
   - DROP the KEY into (3,6).

6. With empty hands, reorient (turn RIGHT from NORTH to face EAST) and proceed toward the BOX at (4,9):
   - MOVE from (4,6) → (4,7),
   - MOVE from (4,7) → (4,8).
   
7. Finally, with the BOX immediately in front at (4,9), execute PICKUP to grab the BOX.

This sequence meets all constraints and reaches the objective.",0.934375,True,True
unlock_pickup,16,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Let’s explain the reasoning:

1. Starting at (4,1) facing LEFT, we first turn RIGHT so we face UP.
2. We MOVE upward twice to go from (4,1) to (3,1) then to (2,1).
3. Then, to approach the KEY at (2,3) (which we must not enter directly), we turn RIGHT so that from (2,1) we can step to (2,2) with the KEY in the cell immediately to its right.
4. At (2,2) facing RIGHT, the key is directly in front at (2,3). We issue a PICKUP to grab the KEY.
5. Now, with KEY in hand, we must unlock the DOOR that leads to the other room. We turn RIGHT (from facing RIGHT to facing DOWN) and MOVE to (3,2).
6. Next, we turn LEFT so we face RIGHT at (3,2) and then MOVE successively to (3,3) and (3,4). From (3,4) facing RIGHT, the DOOR cell (3,5) is directly ahead.
7. We then issue UNLOCK (using the KEY) to open the DOOR.
8. Since we cannot pick up another object while holding the KEY, we must DROP it first. We turn LEFT from RIGHT to face UP so that the cell in front at (2,4) is empty, then DROP the KEY.
9. With empty hands, we turn RIGHT to face DOOR again and MOVE from (3,4) to (3,5) (through the open door) into the right room.
10. In the right room, we MOVE rightwards four times to get from (3,5) to (3,8).
11. To reach the BOX at (2,9), we turn LEFT (so we face UP) and MOVE upward from (3,8) to (2,8).
12. Turning RIGHT from UP orients us so that the BOX at (2,9) is directly in front. Finally, we issue a PICKUP to pick up the BOX.

This complete sequence of actions meets the goal.",0.928125,True,True
unlock_pickup,17,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,18,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
  [""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""PICKUP""]
</actions>

Here's the step‐by‐step breakdown:

1. Starting at (3,3) facing LEFT (west), the agent moves forward to (3,2) with ""MOVE"".
2. From (3,2) facing west, ""RIGHT"" turns the agent to face NORTH.
3. ""MOVE"" advances the agent from (3,2) to (2,2).
4. ""LEFT"" from NORTH rotates the agent to face WEST. Now the cell in front is (2,1) where the KEY is located.
5. ""PICKUP"" picks up the KEY (the object in (2,1) without entering that cell).
6. Now holding the KEY and at (2,2) facing WEST, ""LEFT"" turns the agent to face SOUTH.
7. ""MOVE"" brings the agent down to (3,2).
8. ""LEFT"" from SOUTH changes the facing to EAST.
9. ""MOVE"" moves the agent from (3,2) to (3,3).
10. ""MOVE"" moves the agent further east to (3,4).
11. ""RIGHT"" rotates from EAST to face SOUTH.
12. ""MOVE"" carries the agent from (3,4) to (4,4). This positions the agent just west of the door.
13. To face the door at (4,5), which lies east of (4,4), ""LEFT"" turns the agent from SOUTH to EAST.
14. ""UNLOCK"" is used to unlock the door directly in front (at (4,5)) since the agent is holding the KEY.
15. With the door unlocked, ""MOVE"" moves the agent into the door cell at (4,5).
16. Finally, ""PICKUP"" picks up the BOX, which is directly in front (at (4,6)).

This sequence enables the agent to retrieve the BOX from the other room.",0.0,False,True
unlock_pickup,19,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""RIGHT"", ""RIGHT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Let's explain the plan step by step:

1. Starting at (2,1) facing UP, turn RIGHT to face towards the KEY.
2.–4. MOVE three times to go from (2,1) → (2,2) → (2,3) → (2,4). Now you’re in front of the cell below the KEY.
5. Turn LEFT so you face UP. The KEY is directly ahead at (1,4).
6. PICKUP the KEY.
7.–8. Turn LEFT twice (from UP to LEFT then to DOWN) so you can position yourself behind the door.  
9. MOVE from (2,4) to (3,4). Now you’re adjacent to the DOOR location.
10. Turn LEFT to face RIGHT so that the door at (3,5) is directly in front.
11. Use UNLOCK to open the door (with your KEY in hand).
12.–13. To drop the KEY (since you can’t hold it when picking up the BOX), turn RIGHT twice (rotating through DOWN to LEFT) so that you face an empty cell in the left room.
14. DROP the KEY into (3,3), which is empty.
15.–16. Turn LEFT twice to rotate 180° from facing LEFT back to facing RIGHT.
17. MOVE from (3,4) to (3,5) entering the unlocked door cell.
18. MOVE from (3,5) to (3,6) into the right-hand room.
19. Turn LEFT to face UP.
20.–21. MOVE upward from (3,6) to (2,6) to (1,6).
22. Turn RIGHT from UP so you now face RIGHT.
23. Finally, PICKUP the BOX (located at (1,7)).

This sequence satisfies the rules and completes the objective.",0.928125,True,True
unlock_pickup,2,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's the reasoning:

1. The agent starts at [1,1] facing LEFT. Since the key is in room on the lower part (at [4,3]), the agent first needs to head downward. With the agent facing LEFT, executing a ""LEFT"" turn changes its direction to DOWN.
2. Three ""MOVE"" actions take the agent from [1,1] to [2,1], then to [3,1] and finally to [4,1].
3. From [4,1] facing DOWN, a ""LEFT"" turn makes the agent face RIGHT (since from DOWN, turning left points east).
4. A ""MOVE"" from [4,1] puts the agent at [4,2]. Now, with the agent at [4,2] facing RIGHT, the cell directly ahead ([4,3]) contains the KEY. The agent uses ""PICKUP"" to acquire it.
5. With the key in hand, the agent now needs to unlock the door that stands between the two rooms. The door is at [4,5]. The agent first moves (with ""MOVE"") from [4,2] to [4,3] (the cell where the key was, which is now empty) and then another ""MOVE"" to reach [4,4]. Now, facing RIGHT, the door at [4,5] is directly ahead.
6. The agent executes ""UNLOCK"" (using the KEY in hand) to open the door.
7. After unlocking, two ""MOVE"" actions take the agent first into the now-open door cell at [4,5] and then to [4,6].
8. With the agent at [4,6] facing RIGHT, the BOX is located in the cell directly ahead ([4,7]). The final action is ""PICKUP"" to collect the BOX.

This sequence of actions fulfills the objective of picking up the BOX from the other room.",0.0,False,True
unlock_pickup,20,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain step‐by‐step:

1. Starting at (2,2) facing RIGHT, the agent first moves one step to (2,3).
2. A LEFT turn makes the agent face UP so the KEY, located at (1,3) (directly ahead), can be picked up.
3. The agent picks up the KEY.
4–5. To head toward the door’s drop zone, the agent turns from UP to DOWN by two RIGHT turns.
6–7. Two MOVE actions bring the agent from (2,3) down to (3,3) then to (4,3).
8. A LEFT turn from DOWN makes the agent face RIGHT.
9. A MOVE places the agent at (4,4); (4,4) is adjacent to the door (which is at (4,5)).
10. With the KEY in hand and facing the door, the agent performs UNLOCK to open the door.
11–12. To free up space for picking up the BOX later (since the agent can hold only one object), the agent turns LEFT (changing direction from RIGHT to UP) and then uses DROP to leave the KEY in an empty cell (at (3,4)).
13. The agent turns RIGHT from UP to face RIGHT—preparing to cross the door.
14. A MOVE step enters the unlocked door cell at (4,5).
15. Another MOVE proceeds to (4,6) in the new room.
16. A LEFT turn changes the orientation from RIGHT to UP.
17. A MOVE brings the agent from (4,6) to (3,6) so that the BOX will be directly ahead.
18. Finally, a PICKUP retrieves the BOX (located at (2,6)), completing the objective.
  
This sequence navigates from the starting room, collects the KEY, unlocks the door, drops the KEY (so as to be free to pick up the BOX), and then reaches and picks up the BOX in the other room.",0.94375,True,True
unlock_pickup,21,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Let's explain our reasoning step by step:

1. Starting at row 4, column 1 facing LEFT, we must first get the KEY (located at [3,3]). Since we want to pick it up from an adjacent cell, we reorient and move:
   - ""RIGHT"", ""RIGHT"": from LEFT to UP then to RIGHT.
   - ""MOVE"": step from (4,1) to (4,2).
   - ""LEFT"": turn from RIGHT to UP.
   - ""MOVE"": move up from (4,2) to (3,2).
   - ""RIGHT"": turn from UP to RIGHT so the cell ahead ([3,3]) contains the KEY.
   - ""PICKUP"": pick up the KEY at (3,3).

2. With the KEY in hand, our next goal is to unlock the door between rooms (the door is at [2,5]). We must approach it from the left side.
   - ""MOVE"": from (3,2) facing RIGHT to (3,3).
   - ""MOVE"": then from (3,3) to (3,4).
   - ""LEFT"": turn from RIGHT to UP.
   - ""MOVE"": go up from (3,4) to (2,4) – this cell is immediately left of the door.
   - ""RIGHT"": turn from UP to RIGHT so that the door at (2,5) is directly in front.
   - ""UNLOCK"": unlock the door (using our KEY).

3. Now that the door is unlocked, we still hold the KEY, but we cannot pick up the BOX while holding an object. We must drop the KEY in an empty cell.
   - ""LEFT"": from (2,4) facing RIGHT, we turn LEFT to face UP. Now the cell in front, (1,4), is empty.
   - ""DROP"": drop the KEY into (1,4).

4. With no object held, we can proceed through the door into the room containing the BOX (located at [4,7]). We first reorient and move into the door cell:
   - ""RIGHT"": turn from UP to RIGHT.
   - ""MOVE"": move from (2,4) into the door cell (2,5).

5. Finally, we navigate from the door cell to a spot adjacent to the BOX so we can pick it up:
   - ""MOVE"": from (2,5) to (2,6) while facing RIGHT.
   - ""RIGHT"": turn from RIGHT to face DOWN.
   - ""MOVE"": move down from (2,6) to (3,6).
   - ""MOVE"": move down from (3,6) to (4,6).
   - ""LEFT"": from DOWN, turn LEFT to face RIGHT so that the BOX at (4,7) is directly ahead.
   - ""PICKUP"": pick up the BOX.

This sequence of 23 actions satisfies the objective.",0.928125,True,True
unlock_pickup,22,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Step-by-step explanation:

1. Starting at (1,1) facing RIGHT, the agent needs to acquire the KEY (located at [3,3]) without entering the key’s cell. Instead, the agent must stand adjacent so that the key is in the cell directly in front.
2. Action 1 “MOVE” takes the agent from (1,1) to (1,2).
3. Action 2 “MOVE” takes the agent from (1,2) to (1,3) — still facing RIGHT.
4. Action 3 “RIGHT” turns the agent 90° right to face DOWN.
5. Action 4 “MOVE” advances the agent from (1,3) to (2,3). Now facing DOWN, the cell directly ahead (3,3) contains the KEY.
6. Action 5 “PICKUP” picks up the KEY from the cell (3,3) without stepping on it.
7. With the KEY in hand, the agent must now reach the DOOR (located at [4,5]) from the left side. It first moves into the cell from where the door is reachable.
8. Action 6 “MOVE” goes from (2,3) to (3,3) (this cell is now empty after picking up the KEY).
9. Action 7 “MOVE” continues from (3,3) to (4,3), still moving DOWN.
10. Action 8 “LEFT” rotates the agent from facing DOWN to facing RIGHT.
11. Action 9 “MOVE” takes the agent from (4,3) to (4,4). Now, with the agent facing RIGHT, the door at (4,5) is immediately in front.
12. Action 10 “UNLOCK” uses the held KEY to unlock the DOOR at (4,5).
13. The agent then moves through the door into the right room where the BOX is located.
14. Action 11 “MOVE” moves from (4,4) into the now-unlocked door cell (4,5).
15. Action 12 “MOVE” goes from (4,5) to (4,6), advancing further into the right room.
16. The agent now needs to head upward toward the BOX at (1,8). Since it’s currently facing RIGHT, it must reorient.
17. Action 13 “LEFT” changes the facing from RIGHT to UP.
18. Actions 14–16 “MOVE” take the agent step-by-step upward from (4,6) to (3,6), then to (2,6), and finally to (1,6) while facing UP.
19. At (1,6) the agent must now face east to be adjacent to the BOX at (1,8).
20. Action 17 “RIGHT” turns the agent from facing UP to facing RIGHT.
21. Action 18 “MOVE” advances the agent from (1,6) to (1,7). Now, with the BOX at (1,8) directly in front,
22. Action 19 “PICKUP” picks up the BOX, completing the objective.

This sequence fulfills the rules and objectives in the grid-based environment.",0.0,False,True
unlock_pickup,23,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,24,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain the reasoning step by step:

1. Starting at (3,3) facing LEFT, we first need the KEY that is in the cell above ((2,3)). Since the KEY is directly North of the agent, we turn RIGHT (from LEFT, a RIGHT turn points UP) so that we face the KEY. 
  Action: ""RIGHT""

2. With the key now in the cell directly ahead ((2,3)), we use the PICKUP action to grab the KEY. Note that the agent remains in its cell after PICKUP.
  Action: ""PICKUP""

3. Next, we move into the now-empty cell from which we picked up the KEY. Since we are facing UP, we MOVE from (3,3) to (2,3).
  Action: ""MOVE""

4. In order to unlock the door later, we have to bring the KEY to the door. The door is at (2,5), so first we need to head in the rightward direction. From (2,3) facing UP, turning RIGHT now makes the agent face RIGHT.
  Action: ""RIGHT""

5. We then MOVE from (2,3) to (2,4) so that the door will be right in front of us.
  Action: ""MOVE""

6. Facing RIGHT at (2,4), the cell directly ahead ((2,5)) is the DOOR. With the KEY in hand we perform ""UNLOCK"" to open the door.
  Action: ""UNLOCK""

7. Now, still at (2,4) but facing RIGHT, we cannot drop the KEY in front because (2,5) is a door cell (dropping is disallowed into door cells). We need to drop the KEY into an empty cell. We choose (2,3)—the cell behind us if we face LEFT. So we first turn left twice:
  Action: ""LEFT"" (turning from RIGHT to UP)
  Action: ""LEFT"" (turning from UP to LEFT)

8. With the agent now at (2,4) facing LEFT, the cell directly in front is (2,3), which is empty. We DROP the KEY there.
  Action: ""DROP""

9. To ultimately reach the BOX (which is at (2,9) in the right room), we have to traverse through the door. We are at (2,4) facing LEFT; to approach the door (which lies to our right from our previous orientation), we must reorient to face RIGHT. A 180° change can be done by two left turns:
  Action: ""LEFT"" (turning from LEFT to SOUTH)
  Action: ""LEFT"" (turning from SOUTH to RIGHT)

10. Now facing RIGHT at (2,4), we MOVE step by step:
  - MOVE from (2,4) to (2,5) through the now-unlocked door.
   Action: ""MOVE""
  - MOVE from (2,5) to (2,6).
   Action: ""MOVE""
  - MOVE from (2,6) to (2,7).
   Action: ""MOVE""
  - MOVE from (2,7) to (2,8), so that the BOX at (2,9) is directly ahead.
   Action: ""MOVE""

11. Finally, with the BOX directly in front at (2,9) and not having anything in our hand, we PICKUP the BOX.
  Action: ""PICKUP""

This sequence of actions satisfies the objective: retrieve the BOX from the adjacent room by first picking up the KEY, unlocking the door, dropping the KEY (since you can only hold one object at a time), and then picking up the BOX.",0.95,True,True
unlock_pickup,25,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Let's explain the reasoning step by step:

1. Starting at (4,4) facing RIGHT, we first want to get to the KEY at (1,1) which is located in the same room. To go there we must head left. We turn LEFT twice (first LEFT makes us face UP, then another LEFT rotates us to face LEFT) then move three times from (4,4) → (4,3) → (4,2) → (4,1).

2. At (4,1) we need to head upward. A RIGHT turn (from LEFT, a right turn gives UP) aligns us upward. We then MOVE twice: from (4,1) to (3,1) and then from (3,1) to (2,1). This positions us right below the KEY at (1,1), so a subsequent PICKUP (which picks up objects in the cell directly ahead) collects the KEY.

3. With the KEY in hand, we must go to the door at (3,5) (which separates the two rooms) so that we can unlock it. Starting at (2,1) facing UP, we turn RIGHT to face east and then move three times: (2,1) → (2,2) → (2,3) → (2,4). Now at (2,4) still facing RIGHT, we turn RIGHT to face DOWN, and MOVE down from (2,4) to (3,4). At (3,4) we want the door ahead (at (3,5)) so we turn LEFT (from DOWN, LEFT makes us face RIGHT) and then use UNLOCK while facing the door.

4. After unlocking the door, we MOVE into the door cell (3,5). Now inside the other room (the right room) where the BOX is located at (1,6), we need to approach it carefully without stepping onto its cell. From (3,5) still facing RIGHT, we MOVE to (3,6). Then we turn LEFT to face UP and MOVE from (3,6) to (2,6). From (2,6) (still facing UP) we turn RIGHT to face RIGHT and MOV E to (2,7). Next, we turn LEFT (from RIGHT, now facing UP) and MOVE up to (1,7). Finally, a LEFT turn (from UP, turning left faces LEFT) points us so that the cell directly ahead (1,6) is where the BOX sits; a PICKUP then collects the BOX.

This sequence meets all the rules and objectives.",0.0,False,True
unlock_pickup,26,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
  [""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""RIGHT"", ""RIGHT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions> 

Step-by-step explanation:
1. Starting at [2,4] facing LEFT, the agent first turns left to face DOWN.
2. It moves from [2,4] to [3,4]. Now the cell in front ([4,4]) holds the KEY.
3. With a PICKUP action, the agent picks up the KEY (from the cell at [4,4] in front).
4. Moving forward (still facing DOWN), the agent enters [4,4].
5. Turning LEFT while facing DOWN makes the agent face RIGHT.
6. With the KEY in hand, the agent uses UNLOCK to unlock the door directly in front (cell [4,5]).
7. The agent then moves into the door cell ([4,5]). At this point it is still holding the KEY.
8–9. Since the rules forbid holding two objects, before picking the BOX the agent must drop the KEY. The agent turns RIGHT twice (from facing RIGHT → DOWN → LEFT) so that the cell in front becomes [4,4] (an empty cell off its intended path).
10. The agent DROPs the KEY into [4,4].
11–12. To resume navigating toward the BOX, the agent turns RIGHT twice (from facing LEFT: RIGHT turn → UP, and another RIGHT turn → RIGHT) so that it is now facing RIGHT.
13–14. Moving twice, the agent advances from [4,5] to [4,6] and then to [4,7].
15. A LEFT turn from RIGHT makes it face UP.
16–18. With three MOVE actions the agent goes upward: from [4,7] to [3,7], then to [2,7], and finally to [1,7].
19. A RIGHT turn while facing UP reorients the agent to face RIGHT.
20. Finally, with the BOX located in the cell in front ([1,8]), a PICKUP action collects the BOX.

This complete sequence satisfies the objective of picking up the BOX located in the other room.",0.9375,True,True
unlock_pickup,27,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Below is the detailed reasoning:

1. Starting at (4,4) facing RIGHT, we first need to get the KEY at (2,1) without entering its cell since objects block movement.
   • ""LEFT"": Turn left so you face UP.
   • ""MOVE"": Step from (4,4) to (3,4).
   • ""LEFT"": Turn left to face LEFT.
   • ""MOVE"": Move to (3,3).
   • ""MOVE"": Move to (3,2).
   • ""RIGHT"": Turn right from facing LEFT to face UP.
   • ""MOVE"": Advance to (2,2).
   • ""LEFT"": Turn left so you now face LEFT; the KEY lies directly left at (2,1).
   • ""PICKUP"": Pick up the KEY from (2,1).

2. Now holding the KEY, you must unlock the door at (1,5) that separates the left room (where you are) from the right room (where the BOX is). To do so, navigate to a cell adjacent to the door such that unlocking is possible:
   • ""RIGHT"", ""RIGHT"": These two turns (by turning right twice) change your orientation from LEFT (after picking up the KEY) to RIGHT.
   • ""MOVE"": From (2,2) move east to (2,3).
   • ""MOVE"": Move east to (2,4).
   • ""LEFT"": Turn left (from RIGHT) to face UP.
   • ""MOVE"": Move north to (1,4). (Now (1,5) — the door cell — will be directly in front after you face RIGHT.)
   • ""RIGHT"": Turn right to face RIGHT.
   • ""UNLOCK"": Unlock the door at (1,5).

3. You now want to pick up the BOX, but you cannot pick it up while holding the KEY. Therefore, drop the KEY into an empty cell.
   • To drop the KEY, choose an adjacent empty cell that isn’t a DOOR or WALL. From (1,4), turning around to face WEST makes the cell (1,3) a valid drop location.
   • ""LEFT"", ""LEFT"": Two left turns change your orientation from RIGHT to LEFT.
   • ""DROP"": Drop the KEY into (1,3).

4. Finally, head into the right room and pick up the BOX:
   • ""RIGHT"", ""RIGHT"": Two right turns reorient you from LEFT back to RIGHT.
   • ""MOVE"": Move from (1,4) into the door cell at (1,5).
   • ""PICKUP"": With the BOX now directly ahead in cell (1,6), pick it up.

This sequence of actions meets all the rules and accomplishes the goal of picking up the BOX located in the separate room.",0.925,True,True
unlock_pickup,28,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Let’s explain the plan step by step:

1. Starting at (4,3) facing UP, we want to get the KEY at (2,1) without stepping into the KEY’s cell. We first move UP twice:
 • ""MOVE"" to (3,3)
 • ""MOVE"" to (2,3)
2. Then we turn LEFT (from UP to LEFT) and “MOVE” to (2,2). Now the KEY is directly in front (at (2,1)):
 • ""LEFT""
 • ""MOVE""
 • ""PICKUP"" to grab the KEY.
3. With the KEY in hand, we head toward the door at (3,5). We reposition from (2,2) (facing LEFT) by turning so we can go down:
 • ""LEFT"" (now facing DOWN)
 • ""MOVE"" to (3,2)
4. From (3,2) we need to head right toward (3,4), the cell just to the left of the door. Turning from DOWN to RIGHT is achieved by:
 • ""LEFT"" (from DOWN, turning left faces RIGHT)
 • ""MOVE"" to (3,3)
 • ""MOVE"" to (3,4)
5. Now, with the door directly ahead (at (3,5)), we use:
 • ""UNLOCK"" (using our KEY)
 • ""MOVE"" to step through the now unlocked door into the right room.
6. In the right room, the BOX is at (4,9). From (3,5) facing RIGHT, we navigate:
 • ""MOVE"" to (3,6)
 • ""MOVE"" to (3,7)
 • ""MOVE"" to (3,8)
7. At (3,8) still facing RIGHT, we turn to head down:
 • ""RIGHT"" to face DOWN
 • ""MOVE"" to (4,8)
8. Finally, at (4,8) we turn so that the BOX at (4,9) is directly in front:
 • ""LEFT"" (turning from DOWN to RIGHT)
 • ""PICKUP"" to collect the BOX.

This sequence completes the objective.",0.0,False,True
unlock_pickup,29,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Step-by-step explanation:
1. Starting at (3,2) facing RIGHT, we want the KEY at (3,1) which is to our left. Two LEFT turns change our orientation from RIGHT → UP → LEFT.
2. With the KEY now directly in front (cell (3,1)), we execute PICKUP to grab the KEY.
3. With the KEY in hand, we must approach the locked DOOR (at (4,5)) from the left side. From (3,2) facing LEFT, we turn LEFT (from LEFT to SOUTH) so we can start moving downward.
4. MOVE takes us from (3,2) to (4,2).
5. We then need to head to the right; from SOUTH, a LEFT turn orients us EAST.
6. Two consecutive MOVE actions carry us from (4,2) → (4,3) and then (4,3) → (4,4).
7. At (4,4) facing EAST, the DOOR is directly ahead (cell (4,5)). We use UNLOCK (while holding the KEY) to open it.
8. With the door unlocked, we MOVE into the door cell (4,5) and then another MOVE takes us further into the adjacent room to (4,6).
9. The BOX is located at (3,6) — one cell North of our position (4,6). A LEFT turn from EAST points us NORTH.
10. Finally, a PICKUP action collects the BOX from (3,6).

This sequence achieves the objective of retrieving the BOX from the other room.",0.0,False,True
unlock_pickup,3,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (1,2) facing RIGHT, turn RIGHT so you face DOWN.
2. MOVE from (1,2) to (2,2) (facing DOWN). Now the cell in front (3,2) contains the KEY.
3. Execute PICKUP while facing DOWN to pick up the KEY from (3,2).
4. MOVE from (2,2) to (3,2) (still facing DOWN).
5. MOVE from (3,2) to (4,2) (facing DOWN).
6. At (4,2), turn LEFT to face RIGHT.
7. MOVE from (4,2) to (4,3) (facing RIGHT).
8. MOVE from (4,3) to (4,4) (facing RIGHT). Now you are adjacent to the door at (4,5).
9. With the KEY in hand and the door immediately in front, UNLOCK the door.
10. Still at (4,4) but facing RIGHT, you cannot drop the KEY into the door cell. So, turn LEFT to face UP (an adjacent empty cell, (3,4)).
11. DROP the KEY into (3,4) so that your hands are free to pick up the BOX later.
12. To cross into the other room, turn RIGHT from UP (now facing RIGHT) to align with the door.
13. MOVE from (4,4) to (4,5) (entering the former door cell, now empty).
14. MOVE from (4,5) to (4,6) in the right room.
15. Turn LEFT so that you face UP.
16. MOVE from (4,6) to (3,6) (facing UP).
17. MOVE from (3,6) to (2,6) (facing UP). Now you are adjacent to the BOX at (1,6).
18. Finally, execute PICKUP to grab the BOX.

This sequence satisfies the rules and gets you to pick up the BOX in the other room.",0.94375,True,True
unlock_pickup,30,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""PICKUP""]
</actions>

Let's explain step by step:

1. Starting at [1][4] facing UP, we first turn LEFT so that we face the cell [1][3] which contains the KEY.
2. We then PICKUP the KEY.
3. Since we still need to unlock the DOOR (at [1][5]), we reorient our agent from facing LEFT to facing RIGHT by issuing two RIGHT turns.
4. With the KEY in hand and now facing RIGHT, the agent is next to the DOOR. We UNLOCK the DOOR.
5. We MOVE into the door cell ([1][5]) and then continue moving RIGHT through the open room by executing five consecutive MOVE actions. These moves take us from [1][5] → [1][6] → [1][7] → [1][8] → [1][9]. (Now the agent is in the box’s room.)
6. At [1][9] facing RIGHT, we must drop the KEY because we can only hold one object at a time—and we need to pick up the BOX next. We cannot drop it directly in front (because [1][10] is a WALL) so we reorient: two LEFT turns change our facing from RIGHT to WEST so that the cell in front becomes [1][8] (which is empty).
7. We then DROP the KEY into [1][8].
8. Next, to access the BOX at [2][9], we need to be facing DOWN. A single LEFT turn from facing WEST rotates us to face DOWN.
9. Finally, with the BOX in the cell directly in front (i.e. at [2][9]), we execute PICKUP to get the BOX.

This sequence accomplishes the objective step by step.",0.953125,True,True
unlock_pickup,31,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Let's explain our reasoning step by step:

1. We start at cell (4,3) facing UP. Our first goal is to get the KEY located at (1,1). Note that because cells with objects cannot be entered, we must stop in an adjacent cell and pick up the object from a neighboring cell.
2. We choose to head to cell (1,2) so that by turning left we face (1,1) (which contains the KEY) and then use PICKUP.
3. To do that, from (4,3) we turn LEFT so we are facing LEFT and then MOVE from (4,3) to (4,2).
4. Now, to move upward, we turn RIGHT (from LEFT, turning right makes us face UP) and MOVE through cells (3,2), (2,2) and then (1,2).
5. At (1,2) facing UP, we turn LEFT so that we face LEFT toward (1,1) and then PICKUP the KEY.
6. With the KEY in hand, we now need to unlock the DOOR at (3,5) to access the room where the BOX is. We plan a route from (1,2) to (3,4) (the cell immediately to the left of the door).
7. From our current position at (1,2) (facing LEFT), we turn LEFT to face DOWN, then MOVE to (2,2) and (3,2).
8. At (3,2) facing DOWN, we turn LEFT so that we now face RIGHT. Then we MOVE to (3,3) and then to (3,4).
9. At (3,4) facing RIGHT, the cell in front ((3,5)) holds the DOOR, so we UNLOCK it.
10. With the door now unlocked (and passable), we MOVE into the door cell (3,5) and then continue moving RIGHT to (3,6) and (3,7).
11. From (3,7) facing RIGHT, we turn RIGHT to face DOWN. Now the BOX at (4,7) is directly in front of us, so we PICKUP the BOX.

This sequence of 20 actions will ensure that you pick up the BOX located in the other room.",0.0,False,True
unlock_pickup,32,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at [2,4] facing UP, turn LEFT so you now face LEFT.
2. MOVE three times to reach [2,1] (moving from [2,4] → [2,3] → [2,2] → [2,1]).
3. At [2,1] (facing LEFT), turn LEFT to face DOWN so that the KEY at [3,1] is in front.
4. PICKUP the KEY located at [3,1] (since the KEY is directly ahead, and the cell [3,1] is adjacent).
5. With the KEY in hand and still at [2,1] facing DOWN, MOVE to [3,1].
6. From [3,1] (facing DOWN), turn LEFT to face RIGHT. Then MOVE three times to go east to [3,4] (passing through [3,2] and [3,3]).
7. At [3,4] (facing RIGHT), turn RIGHT to face DOWN and MOVE to [4,4].
8. At [4,4] (facing DOWN), turn LEFT to face RIGHT so that the DOOR at [4,5] is ahead.
9. UNLOCK the DOOR using the KEY.
10. MOVE into [4,5] through the unlocked DOOR.
11. Now in the right room at [4,5] (facing RIGHT), MOVE to [4,6].
12. Turn LEFT to face UP.
13. MOVE twice (from [4,6] to [3,6] then to [2,6]) to position yourself near the BOX.
14. Turn RIGHT to face RIGHT; now the BOX at [2,7] is directly in front.
15. Finally, PICKUP the BOX.

This sequence successfully navigates from your starting room, collects the KEY, unlocks the door, crosses into the adjoining room, and picks up the BOX.",0.0,False,True
unlock_pickup,33,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain the plan step by step:

1. Starting at (2,3) facing RIGHT, we turn LEFT to face UP. Now the KEY at (1,3) is directly in front.
2. We PICKUP the KEY.
3. We then turn RIGHT twice (from UP → RIGHT → DOWN) so we face DOWN.
4. Two MOVE actions take us from (2,3) to (3,3) and then to (4,3).
5. From (4,3) facing DOWN, turning LEFT makes us face RIGHT. Moving once brings us to (4,4) where the door is directly to our right.
6. Now, while holding the KEY, we UNLOCK the door in front (cell (4,5)).
7. Two MOVE actions then take us through the unlocked door: first into (4,5) and then into (4,6) (in the target room).
8. In room B we cannot pick up the BOX while still holding the KEY, so we DROP the KEY into the empty cell directly in front (at (4,7)).
9. We then turn LEFT (from RIGHT to UP) and MOVE twice upward from (4,6) through (3,6) to (2,6). Now the BOX at (1,6) lies in the cell directly ahead.
10. Finally, we PICKUP the BOX.

This action sequence ensures we retrieve the KEY, unlock the door, drop the KEY so we can pick up the BOX, and finally pick up the BOX located in the other room.",0.95,True,True
unlock_pickup,34,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,35,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Let's explain the steps:

1. Starting at (3,4) facing UP, we turn LEFT to face left.
2. Then we MOVE twice to go from (3,4) to (3,3) and then to (3,2).
3. We turn RIGHT to face UP.
4. MOVE to (2,2). Now, with the agent facing UP, the KEY at (1,2) is directly in front.
5. PICKUP picks up the KEY.
6. With the KEY in hand, we now need to unlock the DOOR. We turn RIGHT to face east.
7. MOVE to (2,3).
8. Turn LEFT to face UP.
9. MOVE to (1,3).
10. TURN RIGHT to face RIGHT so that when we MOVE, we approach (1,4) which is adjacent to the DOOR at (1,5).
11. MOVE to (1,4).
12. UNLOCK the door in front (at (1,5)).
13. MOVE into the door cell (1,5).
14. Now inside the right room, we MOVE three times (to (1,6), then (1,7), then (1,8)).
15. TURN RIGHT to face DOWN.
16. MOVE down to (2,8).
17. TURN LEFT to reorient and face RIGHT so that the BOX at (2,9) is right in front.
18. Finally, PICKUP the BOX.

This sequence fulfills the objective step by step.",0.0,False,True
unlock_pickup,36,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""KEY"", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""DROP"", ""LEFT"", ""PICKUP""]
</actions>

Step-by-step reasoning:
1. Starting at row2, col3 facing UP, the KEY is to your right (at row2, col4). Turn RIGHT so you face EAST.
2. With EAST now in front, perform PICKUP to grab the KEY from (row2, col4).
3. Now, MOVE forward to step into cell (row2, col4).
4. Facing EAST, the DOOR is now directly in front at (row2, col5). Execute UNLOCK (with the KEY in hand) to unlock the door.
5. MOVE from (row2, col4) into the (now unlocked) door cell at (row2, col5).
6. MOVE again to continue into the second room, arriving at (row2, col6).
7. At (row2, col6) facing EAST, note that the BOX is further east at (row2, col7) but you can’t drop your KEY there. Turn RIGHT to face SOUTH.
8. With SOUTH now in front, and knowing that cell (row3, col6) is empty, DROP the KEY there.
9. To eventually pick up the BOX, turn LEFT so you’re facing EAST again.
10. Finally, with the BOX located at (row2, col7) directly in front, perform PICKUP to get the BOX.

This sequence of actions achieves the objective while following all the given rules.",0.96875,True,True
unlock_pickup,37,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""MOVE"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (2,1) facing RIGHT, we first need the KEY located at (3,1) (directly below). Since the KEY must be in the adjacent cell in front for a PICKUP action, we turn RIGHT so that we’re facing DOWN.
2. With (3,1) now in front, we use PICKUP to grab the KEY.
3. Now holding the KEY at (2,1) (facing down), we must go to the door to unlock it. The door is at (1,5) while we want to stand at (1,4) facing east. So first we reorient from DOWN to UP by executing TWO LEFT turns.
4. We then MOVE north from (2,1) to (1,1).
5. Now facing UP at (1,1), we turn RIGHT to face EAST so we can move along row 1.
6. We MOVE three times: (1,1) → (1,2), (1,2) → (1,3), and (1,3) → (1,4).
7. Standing at (1,4) and facing EAST, the door at (1,5) is directly ahead. We execute UNLOCK (using the held KEY).
8. After unlocking, since we can’t hold both key and box, we need to drop the KEY. However, we cannot drop it into the door cell. So, from (1,4) facing east, we turn RIGHT to face SOUTH and MOVE to (2,4). From (2,4) (facing south), the cell in front is (3,4) – an empty valid cell – so we DROP the KEY there.
9. Now, empty-handed, we need to approach the BOX. The BOX is in the adjacent room at (1,6). To pick it up, we need to be just to its left. We reorient from (2,4) facing SOUTH to face NORTH (by doing two LEFT turns) and then MOVE north to (1,4).
10. At (1,4) facing NORTH, we turn RIGHT to face EAST. We then MOVE into the door cell at (1,5). Now with the BOX (at (1,6)) directly ahead, we PICKUP the BOX.

This complete sequence of actions fulfills the objective.",0.940625,True,True
unlock_pickup,38,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>

Here's the reasoning:

1. The KEY is in cell (2,4) and the AGENT starts at (4,2) facing DOWN. The first goal is to pick up the key in your room.
   • From (4,2) facing DOWN, two ""LEFT"" turns reorient you to face UP.
   • ""MOVE"" brings you to (3,2).
   • A ""RIGHT"" turn changes your direction to RIGHT so that you can head east.
   • ""MOVE"" to (3,3), then a ""LEFT"" turn reorients you UP.
   • ""MOVE"" takes you to (2,3) and then a ""RIGHT"" turn points you to the KEY at (2,4).
   • ""PICKUP"" collects the KEY.

2. Next, you need to unlock the door (at cell (1,5)) to get into the room with the BOX (located at (1,6)). You must be adjacent to the door and facing it.
   • ""MOVE"" from (2,3) (while holding the KEY) takes you into (2,4).
   • ""LEFT"" turns you to face UP.
   • ""MOVE"" to (1,4) and a ""RIGHT"" turn then position you so the door (at (1,5)) is directly in front.
   • ""UNLOCK"" then opens the door.

3. Because you must not hold two objects at the same time and you want to pick up the BOX later, you now drop the KEY into a nearby empty cell.
   • To drop, first reorient from facing RIGHT (current direction at (1,4)) by turning ""LEFT"" twice (from RIGHT → UP then UP → LEFT) so that you face the empty cell (1,3).
   • ""DROP"" releases the KEY at (1,3).

4. Finally, reorient yourself to face RIGHT (the door direction) by turning ""LEFT"" twice (from LEFT → SOUTH then South → EAST).
   • ""MOVE"" from (1,4) takes you into the unlocked door cell (1,5).
   • Now standing at (1,5) and facing RIGHT, ""PICKUP"" picks up the BOX in cell (1,6).

This 21‐step plan fulfills your objective.",0.934375,True,True
unlock_pickup,39,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Here's the step‐by‐step explanation:

1. Starting at (2,3) facing UP in the left room, turn LEFT to face LEFT.
2–3. MOVE twice to reach (2,1).
4. Turn LEFT from facing LEFT to face DOWN.
5. MOVE to (3,1). Now the KEY at (4,1) is directly in front.
6. PICKUP the KEY.
7. With the KEY in hand and at (3,1) facing DOWN, turn LEFT to face RIGHT.
8–10. MOVE three times toward the right: (3,1)→(3,2)→(3,3)→(3,4).
11. Turn RIGHT (from RIGHT to DOWN) to head downward.
12. MOVE to (4,4), which is adjacent to the DOOR.
13. Turn LEFT to face RIGHT so the DOOR at (4,5) is directly ahead.
14. UNLOCK the DOOR using the KEY.
15–16. MOVE twice: first into the door cell at (4,5) (now unlocked) and then to (4,6) in the right room.
17. Turn LEFT (from RIGHT to UP) so that BOX, located at (3,6), is directly ahead.
18. PICKUP the BOX.

This series of actions fulfills the objective of picking up the BOX in the other room.",0.0,False,True
unlock_pickup,4,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""DROP"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Step-by-step reasoning:

1. Starting at (4,1) facing UP, the KEY is at (3,4). To reach a position where the KEY is directly in front, we first move UP from (4,1) to reach (3,1).

2. At (3,1) still facing UP, we turn RIGHT so that moving will take us eastward.

3. Moving from (3,1) facing RIGHT, we step into (3,2), and then a second MOVE brings us to (3,3). Now the KEY at (3,4) is directly ahead.

4. Using PICKUP at (3,3) facing RIGHT, we pick up the KEY (which is in (3,4)).

5. Holding the KEY, we now approach the DOOR which is at (3,5). A MOVE from (3,3) to (3,4) (still facing RIGHT) brings us adjacent to the door.

6. With the DOOR now directly in front at (3,5), we use the UNLOCK action to unlock it.

7. We then MOVE from (3,4) through the door (now unlocked) into cell (3,5).

8. Since we cannot pick up the BOX while holding the KEY, we DROP the KEY. Facing RIGHT at (3,5), the cell directly ahead (3,6) is empty so DROP is allowed.

9. Next, we MOVE from (3,5) to (3,6).

10. At (3,6) we need to pick up the BOX located at (2,6). Turning LEFT from facing RIGHT makes us face UP.

11. Finally, with (2,6) directly in front, we perform PICKUP to collect the BOX.

This sequence satisfies the rules and reaches the objective of picking up the BOX in the other room.",0.0,False,True
unlock_pickup,40,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Let's explain each step:

1. ""MOVE"": With the agent starting at [4,3] facing LEFT, moving left brings the agent from [4,3] to [4,2].
2. ""RIGHT"": Turning right changes the facing from LEFT to UP.
3. ""PICKUP"": Facing UP from [4,2], the cell in front ([3,2]) contains the KEY, so this command picks up the KEY.
4. ""MOVE"": Move upward from [4,2] into [3,2] (now empty since the KEY has been picked up).
5. ""RIGHT"": Turn from UP to RIGHT.
6. ""MOVE"": Move right from [3,2] to [3,3].
7. ""MOVE"": Move right from [3,3] to [3,4]. Now the agent is adjacent to the door.
8. ""UNLOCK"": With the KEY in hand at [3,4] facing RIGHT, the door in [3,5] is unlocked.
9. ""RIGHT"": Turn right from facing RIGHT to face DOWN.
10. ""DROP"": Dropping the KEY into the cell in front ([4,4]) which is empty.
11. ""LEFT"": Turning left from DOWN changes the facing to RIGHT, preparing the agent to re-approach the door.
12. ""MOVE"": Move from [3,4] to [3,5] (the now-unlocked door cell).
13. ""MOVE"": Move right from [3,5] to [3,6].
14. ""MOVE"": Move right from [3,6] to [3,7].
15. ""RIGHT"": With the agent facing RIGHT at [3,7], turning right rotates the facing to DOWN.
16. ""PICKUP"": Facing DOWN from [3,7], the box in [4,7] is directly in front, so this command picks up the BOX.

This sequence guides the agent step by step to obtain the box located in the other room.",0.95,True,True
unlock_pickup,41,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Let's explain step by step:

1. Starting at (3,2) facing LEFT, the agent turns RIGHT so it faces UP.
2. It moves UP to (2,2).
3. Then it turns RIGHT (now facing RIGHT) to head toward the KEY.
4. It moves to (2,3).
5. Facing RIGHT, the cell in front (2,4) has the KEY so it uses PICKUP.
6. With the KEY in hand and at (2,3) facing RIGHT, it moves forward to (2,4).
7. It then turns RIGHT to face DOWN.
8. Moving DOWN places it at (3,4).
9. It now turns LEFT so that it faces RIGHT – the door cell at (3,5) is just ahead.
10. With the KEY, it UNLOCKS the door at (3,5).
11. Still holding the KEY (and no longer needing it), the agent turns LEFT to face UP.
12. It DROPs the KEY into (2,4) – a legal, empty adjacent cell.
13. The agent turns RIGHT from UP, now facing RIGHT again.
14. It moves into the unlocked door cell at (3,5).
15-18. It continues moving RIGHT through the right room until it reaches (3,9).
19. At (3,9), a RIGHT turn changes its facing to DOWN.
20. Now the BOX is directly in front at (4,9), so a final PICKUP collects it.

This sequence of moves gets the agent from its starting position, retrieves the KEY to unlock the door between rooms, disposes of it to free up its hands, and then navigates through the unlocked door to pick up the BOX.",0.0,False,True
unlock_pickup,42,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain the plan step‐by‐step:

1. Starting at (3,2) facing DOWN, we turn LEFT so that we now face EAST.
2. We MOVE forward from (3,2) to (3,3).
3. With the KEY in the cell (3,4) directly ahead, we PICKUP the KEY.
4. Now holding the KEY (needed to unlock the door), we change direction. From EAST, we turn LEFT to face NORTH.
5–6. We MOVE twice going NORTH from (3,3) to (2,3) then to (1,3).
7. At (1,3) facing NORTH, we turn RIGHT so that we face EAST. Our target door cell is one step ahead from our position at (1,4) (since door is at (1,5)).
8. We MOVE eastward to (1,4).
9. Facing EAST with the door in front at (1,5), we use UNLOCK (with the KEY in hand) to open the door.
10. We MOVE into the door cell at (1,5)—entering the right-side room.
11–12. We now need to get rid of our KEY because we cannot pick up the BOX while holding another object. At (1,5) facing EAST, we turn LEFT twice to face WEST.
13. With (1,4) directly in front (an empty cell), we DROP the KEY.
14–15. We then reorient ourselves back to facing EAST (by turning RIGHT twice).
16–19. Now in the right room, we MOVE east from (1,5) through (1,6), (1,7), (1,8) and arrive at (1,9).
20. We turn RIGHT to face SOUTH.
21–22. We MOVE SOUTH from (1,9) to (2,9) and then to (3,9).
23. Finally, while at (3,9) facing SOUTH, the BOX is in the adjacent cell (4,9), so we PICKUP the BOX.

This sequence satisfies the rules and accomplishes the objective.",0.928125,True,True
unlock_pickup,43,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Step-by-step explanation:

1. Starting at [4,1] facing DOWN, we need to get adjacent to the KEY at [3,2]. To do so without stepping on it, we first turn so that we can stand at [3,1] and face east toward [3,2].
   - ""LEFT"" then ""LEFT"": from DOWN, first LEFT makes you face EAST, second LEFT makes you face NORTH.
2. ""MOVE"": from [4,1] to [3,1] (now facing NORTH).
3. Now turn to face EAST (so that [3,2] is in front):
   - ""RIGHT"": from NORTH, turning right gives EAST.
4. ""PICKUP"": while at [3,1] facing EAST, you pick up the KEY from the cell at [3,2].
5. With the KEY in hand, navigate to the door at [3,5] by moving east:
   - ""MOVE"": from [3,1] to [3,2].
   - ""MOVE"": from [3,2] to [3,3].
   - ""MOVE"": from [3,3] to [3,4].
6. At [3,4] facing EAST, ""UNLOCK"" the door directly in front at [3,5].
7. ""MOVE"": step into the now unlocked door cell at [3,5].
8. ""MOVE"": continue east into the adjacent right room at [3,6].
9. Next, navigate to a position from which you can pick up the BOX at [1,7]. A convenient plan is to approach the BOX from the west while positioned at [1,6]:
   - ""LEFT"": from facing EAST, a LEFT turn changes your direction to NORTH.
   - ""MOVE"": from [3,6] to [2,6].
   - ""MOVE"": from [2,6] to [1,6].
10. Now face EAST to have the BOX in your front:
    - ""RIGHT"": turning from NORTH to EAST.
11. ""PICKUP"": while at [1,6] facing EAST, you pick up the BOX from [1,7].

This sequence satisfies the objective of picking up the BOX in the other room.",0.0,False,True
unlock_pickup,44,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""PICKUP""]
</actions>

We can explain the plan step‐by‐step:

1. Starting at (4,4) facing LEFT, the agent moves two steps left to (4,2) (“MOVE”, “MOVE”).
2. Then it turns RIGHT (from LEFT, “RIGHT” makes the agent face UP) and moves upward (“MOVE”) to (3,2). Now, facing UP, the cell in front – (2,2) – contains the KEY, so the agent “PICKUP”s it.
3. With the KEY in hand, the agent must now unlock the door at (3,5) to enter the other room. From (3,2) the agent turns “RIGHT” (now facing RIGHT) and moves twice “MOVE”, “MOVE” to reach (3,4), which is immediately to the left of the door.
4. The agent “UNLOCK”s the door at (3,5) and then “MOVE”s into the door cell.
5. Now inside the box’s room, the agent navigates from (3,5) by moving right four times (“MOVE”, “MOVE”, “MOVE”, “MOVE”) to arrive at (3,8). Then it turns “LEFT” to face UP and moves upward twice (“MOVE”, “MOVE”) to reach (1,8), which is adjacent to the BOX at (1,9).
6. Because the agent cannot pick up the BOX while still holding the KEY, it needs to drop the KEY in an empty adjacent cell. From (1,8) (after turning “RIGHT” so its initial heading becomes RIGHT), it turns twice (“LEFT”, “LEFT”) to face LEFT so that the empty cell (1,7) is in front, then “DROP”s the KEY.
7. Finally, the agent reorients by turning twice (“LEFT”, “LEFT”) to face RIGHT (facing the BOX) and “PICKUP”s the BOX at (1,9).

This complete action list satisfies the objective.",0.928125,True,True
unlock_pickup,45,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (3,4) facing UP, we need to grab the KEY at (2,3).  
   • TURN LEFT to face LEFT.  
   • MOVE from (3,4) to (3,3).  
   • TURN RIGHT to face UP so that the cell in front becomes (2,3).  
   • PICKUP the KEY.

2. Now holding the KEY, our goal is to unlock the DOOR at (4,5) so that we can reach the BOX at (4,9). We want to approach the door from the left side (cell (4,4)) with our agent facing RIGHT.  
   • From (3,3) (facing UP), TURN LEFT twice to face DOWN.  
   • MOVE down from (3,3) to (4,3).  
   • TURN LEFT (from DOWN, a left turn points us RIGHT).  
   • MOVE from (4,3) to (4,4).

3. With the agent at (4,4) facing RIGHT, the cell in front is (4,5) which holds the DOOR.  
   • UNLOCK the DOOR.

4. With the door unlocked (thus considered empty), we can now proceed into the room containing the BOX. We want to approach the BOX from (4,8) facing RIGHT.  
   • MOVE from (4,4) to (4,5) (through the door).  
   • MOVE from (4,5) to (4,6).  
   • MOVE from (4,6) to (4,7).  
   • MOVE from (4,7) to (4,8).

5. Finally, with the BOX at (4,9) directly ahead,  
   • PICKUP the BOX.

This sequence of actions successfully picks up the KEY, unlocks the door, navigates through, and then picks up the BOX in the other room.",0.0,False,True
unlock_pickup,46,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Step-by-step explanation:
1. Starting at (1,4) facing LEFT, the first MOVE brings you to (1,3).
2. A LEFT turn (from LEFT) changes your direction to DOWN.
3. A MOVE takes you from (1,3) to (2,3).
4. Another MOVE moves you from (2,3) to (3,3).
5. With you facing DOWN at (3,3), the cell ahead (4,3) holds the KEY, so you PICKUP the KEY.
6. Now holding the KEY at (3,3) and facing DOWN, a LEFT turn rotates you to face RIGHT.
7. A MOVE sends you from (3,3) to (3,4). Now, with the door at (3,5) directly ahead, you UNLOCK it.
8. A MOVE takes you through the door cell, moving from (3,4) to (3,5).
9. Two successive MOVEs from (3,5) take you first to (3,6) then to (3,7) while still facing RIGHT.
10. A LEFT turn from RIGHT makes you face UP.
11. Two MOVEs while facing UP take you from (3,7) to (2,7) and then to (1,7).
12. A RIGHT turn from UP switches your direction to RIGHT, so that the BOX at (1,8) is directly in front of you.
13. Finally, a PICKUP grabs the BOX.

This sequence successfully collects the KEY to unlock the door and then enters the room to pick up the BOX.",0.0,False,True
unlock_pickup,47,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Step-by-step explanation:

1. Starting at (2,3) facing RIGHT, we first need to grab the KEY located at (2,1). To pick it up, we want to stand at (2,2) and face LEFT (so that the cell ahead, (2,1), contains the KEY). Since we’re facing RIGHT:
   - ""RIGHT"" → now facing DOWN.
   - ""RIGHT"" → now facing LEFT.
   - ""MOVE"" → move one step left from (2,3) to (2,2).
   - ""PICKUP"" → pick up the KEY from the cell in front (2,1).

2. With the KEY in hand and now at (2,2) facing LEFT, our next goal is to unlock the door between the rooms. We need to get to (1,4) facing RIGHT so that the door at (1,5) (directly in front) can be unlocked:
   - ""RIGHT"" → turn from LEFT to UP.
   - ""MOVE"" → move up from (2,2) to (1,2).
   - ""RIGHT"" → turn from UP to face RIGHT.
   - ""MOVE"" → step right from (1,2) to (1,3).
   - ""MOVE"" → step right from (1,3) to (1,4).

3. Now at (1,4) facing RIGHT and with the door immediately in front at (1,5):
   - ""UNLOCK"" → unlock the door.

4. Enter the second room:
   - ""MOVE"" → move right from (1,4) into the door cell at (1,5).

5. In the second room, the BOX is at (2,7). To pick it up, we position ourselves to the left of the BOX:
   - ""MOVE"" → move right from (1,5) to (1,6) (still facing RIGHT).
   - ""RIGHT"" → turn right from RIGHT to face DOWN.
   - ""MOVE"" → move down from (1,6) to (2,6) (now facing DOWN).
   - ""LEFT"" → turn left from DOWN to face RIGHT.
   - ""PICKUP"" → pick up the BOX from the cell in front (2,7).

This sequence fulfills the mission of picking up the BOX located in the other room.",0.0,False,True
unlock_pickup,48,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""AGENT"", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's the step‐by‐step explanation:

1. Starting at (4,4) facing LEFT, the agent moves left twice to reach (4,2). From there (with the KEY located directly in front at (4,1)), it uses PICKUP.
2. Holding the KEY, the agent turns RIGHT (from LEFT to UP) and moves upward from (4,2) to (3,2) then to (2,2). Then it turns RIGHT to face east and moves right twice from (2,2) → (2,3) → (2,4). To go north to the door’s row, it turns LEFT (facing UP) and moves from (2,4) to (1,4). Facing UP at (1,4) but needing the door to the east, it turns RIGHT to face the door at (1,5) and performs UNLOCK.
3. After unlocking the door, the agent moves into the door cell at (1,5), then moves right to (1,6). It then turns RIGHT (facing DOWN) and moves down through (2,6), (3,6), and (4,6). At (4,6) (facing DOWN), it turns LEFT to face RIGHT, then moves right twice to reach (4,8). Now, with the BOX directly in front at (4,9), it finally uses PICKUP to capture the BOX.

This sequence successfully navigates the two rooms, obtains the KEY, unlocks the door, and picks up the BOX.",0.0,False,True
unlock_pickup,49,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain the plan step‐by‐step:

1. Starting at (1,4) facing UP, we first turn so that we can head toward the KEY at (4,2). The two ""LEFT"" turns change our direction from UP → LEFT then LEFT → DOWN. We then take three ""MOVE"" actions to travel from (1,4) to (4,4).  
2. We then turn ""RIGHT"" (from DOWN to WEST) so that a ""MOVE"" from (4,4) brings us adjacent to the KEY (KEY is at (4,2), and from (4,3) facing WEST the KEY is in front). We then use ""PICKUP"" to collect the KEY.
3. With the KEY now in hand, our next goal is to get to the DOOR at (1,5) that connects our room to the box’s room. Starting from (4,3) and facing WEST, we need to reorient to face EAST so we can go back up. Two ""LEFT"" turns (which accomplish a 180° turn) make us face EAST. Then a ""MOVE"" takes us to (4,4).  
4. From (4,4) we turn ""LEFT"" (facing NORTH now) and take three ""MOVE"" actions to climb back up to (1,4). At (1,4) we then turn ""RIGHT"" (to face EAST) so that the cell in front (at (1,5)) is the DOOR. With the KEY held, we perform ""UNLOCK"" to unlock the DOOR.
5. Because you cannot pick up the BOX while holding something, we must drop the KEY. We turn around 180° (two ""LEFT"" turns) to face west, and then ""DROP"" the KEY into an empty adjacent cell at (1,3).
6. Next, we reorient to face EAST again (another two ""LEFT"" turns) and ""MOVE"" into the now-unlocked DOOR cell (from (1,4) into (1,5)).
7. Now in the right room, we need to head toward the BOX at (4,7). From (1,5) (facing EAST) we ""MOVE"" twice to reach (1,7). Then a ""RIGHT"" turn makes us face SOUTH. Two ""MOVE"" actions take us from (1,7) down to (3,7). Finally, with the BOX directly in front (at (4,7)), we use ""PICKUP"" to collect it.

This complete sequence ensures we pick up the BOX (located in the other room) while obeying all movement, pickup, drop, and unlocking rules.",0.0,False,True
unlock_pickup,5,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","We can solve the puzzle in two main phases. In Phase 1 the agent picks up the KEY in its room and then uses it to unlock the door. In Phase 2 the agent drops the KEY (since you cannot pick up a second object while holding one) and then enters the other room to pick up the BOX.

Let’s walk through a possible solution step by step. (Coordinates are given as [row, col] with row index increasing downward.) Initially, the agent is at [4,3] facing RIGHT. The KEY is at [3,2] and the door is at [3,5] (separating the left “agent” room from the right “BOX” room). The BOX is later found at [1,8] in the other room.

Phase 1: Get the KEY and unlock the door
1. The agent turns LEFT so that, from facing RIGHT, it now faces UP.
2. It then MOVEs forward from [4,3] to [3,3].
3. Next, it turns LEFT again. (Now from UP it faces LEFT.)
4. It MOVEs from [3,3] to [3,2] where the KEY is.
5. With the KEY immediately in front, the agent PICKUPs it.

At this point the agent is at [3,2] holding the KEY and facing LEFT. To head toward the door (at [3,5], to its east) the agent must reorient:
6. A LEFT turn makes the agent face SOUTH.
7. Another LEFT turn makes it face EAST.
8. Then a MOVE takes the agent from [3,2] to [3,3].
9. Another MOVE puts the agent at [3,4]. (Note: the door is at [3,5] – directly in front of [3,4].)
10. Now, while still holding the KEY, the agent executes UNLOCK to unlock the door in the cell immediately in front ([3,5]).
11. With the door unlocked, a MOVE brings the agent into the door cell at [3,5] (entering the other room) while still holding the KEY.

Phase 2: Drop the KEY and pick up the BOX  
Because you cannot PICKUP the BOX while already holding an object, you must DROP the KEY first. However, you must drop it into an empty adjacent cell. In the new room (at [3,5]) if you simply drop it “forward” (i.e. to the east) you would block your planned route. Instead, do this:

12. Turn LEFT (from EAST to NORTH).
13. Turn LEFT again (from NORTH to WEST).  
   Now facing WEST, the cell immediately ahead is [3,4] – which (in our grid) is an empty cell.
14. Execute DROP to leave the KEY at [3,4]. (It doesn’t matter that the KEY is now in the agent’s former room; it is no longer held.)
15. Reorient to continue toward the BOX: turn RIGHT (from WEST to NORTH).
16. Turn RIGHT again (from NORTH to EAST) so the agent faces toward the new room’s east side.

Now plan a route to the BOX. The BOX is in the upper part of the new room (at [1,8]). A viable route is to first go east, then north, then east again so that the BOX is directly in front when you stand at [1,7].
17. MOVE from [3,5] to [3,6] (facing EAST).
18. Turn LEFT so the agent now faces NORTH.
19. MOVE from [3,6] to [2,6].
20. MOVE from [2,6] to [1,6].
21. Turn RIGHT so that from NORTH the agent now faces EAST.
22. MOVE from [1,6] to [1,7].
23. Finally, with the BOX now directly in front (at [1,8]), execute PICKUP to grab the BOX.

The full list of actions is provided below wrapped in the required XML tags.

<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.928125,True,True
unlock_pickup,50,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain step‐by‐step our plan:

1. Starting at [3,2] facing DOWN, we need to get the KEY at [4,3].  
   • ""MOVE"": Go down from [3,2] to [4,2].  
   • ""LEFT"": Turn left (from DOWN to EAST) so that KEY at [4,3] is in front.  
   • ""MOVE"": Advance from [4,2] to [4,3].  
   • ""PICKUP"": Pick up the KEY.

2. Next, head toward the DOOR at [4,5] to unlock it (the door separates the rooms).  
   • ""MOVE"": With the agent now at [4,3] facing EAST, move to [4,4].  
   • ""UNLOCK"": With the door in front at [4,5], unlock it using the KEY.

3. Since we cannot pick up the BOX while holding an object and the KEY is no longer needed, drop the KEY in an empty adjacent cell.  
   • ""LEFT"": Turn left (from EAST to NORTH) so that [3,4] is in front – a valid empty cell.  
   • ""DROP"": Drop the KEY at [3,4].

4. Now, head into the right room (formerly locked by the DOOR) to reach the BOX at [1,9].  
   • ""RIGHT"": Turn right (from NORTH to EAST) to face the unlocked door.  
   • ""MOVE"": Step into the door cell at [4,5].  
   • ""MOVE"": Move further east to [4,6] in the right room.

5. The BOX is located in the northern area of the right room, so proceed north.  
   • ""LEFT"": Turn left (from EAST to NORTH).  
   • ""MOVE"": Go from [4,6] to [3,6].  
   • ""MOVE"": Continue north from [3,6] to [2,6].  
   • ""MOVE"": Keep moving north from [2,6] to [1,6].

6. Now, reorient east to approach the BOX.  
   • ""RIGHT"": Turn right (from NORTH to EAST).

7. Finally, move east until you are adjacent to the BOX.  
   • ""MOVE"": Go from [1,6] to [1,7].  
   • ""MOVE"": Move from [1,7] to [1,8].  
   • ""PICKUP"": With [1,9] (where the BOX is) directly in front, pick up the BOX.

This complete action sequence satisfies all the rules of the environment and accomplishes the objective of retrieving the BOX located in the other room.",0.0,False,True
unlock_pickup,51,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Let's break down the reasoning step by step:

1. Starting from row2, col1 facing UP, we need to pick up the KEY at row4, col1. Since the KEY is below, we first turn to face DOWN. Two ""RIGHT"" turns will do that.

2. With the agent now facing DOWN, a ""MOVE"" takes you from row2, col1 to row3, col1. Standing at row3, col1 facing DOWN puts row4, col1 (where the KEY is) directly in front. The ""PICKUP"" action collects the KEY.

3. Now that you are holding the KEY, you need it to unlock the door at row2, col5. Return to the door by turning from DOWN to UP (using ""LEFT"" and ""LEFT"") and then ""MOVE"" from row3, col1 to row2, col1.

4. At row2, col1 facing UP, turn ""RIGHT"" to face east (RIGHT) so you can move horizontally toward the door. Three ""MOVE"" actions take you from col1 → col2, col2 → col3, and col3 → col4, positioning you immediately to the left of the door (which occupies row2, col5).

5. Use the ""UNLOCK"" action (while holding the KEY) to open the door.

6. With the door unlocked, ""MOVE"" into the door cell at row2, col5. Continue moving ""MOVE"" twice more to row2, col6 and then row2, col7.

7. At row2, col7 facing RIGHT, turn ""LEFT"" to face UP, aligning you so that the BOX at row1, col7 is directly in front.

8. Use ""PICKUP"" to collect the BOX and complete your objective.

This sequence of actions successfully navigates through the grid, picks up the KEY, unlocks the door, and then retrieves the BOX from the other room.",0.0,False,True
unlock_pickup,52,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Step-by-step explanation:
1. From the starting position at (1,3) facing UP, we need to face DOWN to approach the KEY at (4,3). Two LEFT turns change UP → LEFT → DOWN.
2. Two MOVE actions get the agent from (1,3) to (3,3). Standing at (3,3) and facing DOWN, the cell directly in front (4,3) contains the KEY.
3. The PICKUP action picks up the KEY from cell (4,3) without stepping into it.
4. MOVE into (4,3) now that the KEY has been collected.
5. The agent needs to reach the DOOR at (4,5). Since the door is to the right of the KEY room, a LEFT turn (while facing DOWN) rotates the agent to face EAST.
6. A MOVE action takes the agent into (4,4), positioning it directly left of the DOOR.
7. UNLOCK the DOOR in front at (4,5) using the KEY.
8. MOVE into the door cell (4,5) and an additional MOVE to (4,6) crosses into the right room.
9. Facing EAST at (4,6), a LEFT turn rotates the agent to face NORTH, aligning it with the BOX at cell (3,6).
10. The final PICKUP collects the BOX from the cell directly in front.
  
This sequence successfully navigates the environment, picks up the KEY, unlocks the door, enters the room with the BOX, and picks up the BOX.",0.0,False,True
unlock_pickup,53,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Step-by-step explanation:

1. Starting at (4,3) facing UP, turn LEFT so that you face LEFT.  
2. MOVE from (4,3) to (4,2).  
3. MOVE from (4,2) to (4,1). Now you are at (4,1) facing LEFT.  
4. Turn RIGHT to face UP, so the cell (3,1) – containing the KEY – is directly in front of you.  
5. PICKUP the KEY from (3,1).  
6. With the KEY in hand and at (4,1) facing UP, turn RIGHT so you face RIGHT (the direction toward the DOOR).  
7. MOVE from (4,1) to (4,2).  
8. MOVE from (4,2) to (4,3).  
9. MOVE from (4,3) to (4,4). Now you are adjacent (to the left) of the DOOR (at (4,5)) facing RIGHT.  
10. UNLOCK the DOOR located in front of you (at (4,5)) since you are holding the KEY.  
11. MOVE from (4,4) into the door cell at (4,5) (now empty after unlocking).  
12. MOVE from (4,5) to (4,6).  
13. MOVE from (4,6) to (4,7).  
14. MOVE from (4,7) to (4,8). Now the BOX is directly in front of you at (4,9).  
15. PICKUP the BOX from (4,9).

This sequence takes you from your starting room, collects the KEY necessary to unlock the door, and then moves you into the second room to pick up the BOX.",0.0,False,True
unlock_pickup,54,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Step-by-step explanation:

1. Starting at (1,2) facing LEFT, we turn LEFT so that we face DOWN.
2. MOVE from (1,2) to (2,2).
3. MOVE from (2,2) to (3,2).
4. From (3,2) facing DOWN, turning LEFT makes us face RIGHT.
5. MOVE from (3,2) to (3,3).
6. From (3,3) facing RIGHT, turning RIGHT makes us face DOWN.
7. With the KEY at (4,3) directly in front (cell (4,3) when facing DOWN), we PICKUP the KEY.
8–9. We now need to head toward the door. From (3,3) facing DOWN, two RIGHT turns (step 8 and 9) make us face UP.
10. MOVE up from (3,3) to (2,3).
11. A RIGHT turn from UP makes us face RIGHT.
12. MOVE from (2,3) to (2,4) so that we stand adjacent (to the LEFT) of the door.
13. With the door at (2,5) directly in front, we UNLOCK it using our KEY.
14. Now, since we cannot pick up the BOX while holding the KEY, from (2,4) facing RIGHT, a LEFT turn makes us face UP.
15. DROP the KEY into (1,4), which is empty.
16. Turn RIGHT (from UP to RIGHT) to align with the door.
17. MOVE into the door cell at (2,5).
18. MOVE from (2,5) to (2,6) in the right room.
19. A RIGHT turn from RIGHT makes us face DOWN.
20. Finally, with the BOX at (3,6) directly in front, we PICKUP the BOX.

This sequence successfully collects the BOX from the other room.",0.9375,True,True
unlock_pickup,55,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain step by step:

1. Starting at [2,2] facing UP, the agent turns LEFT to face LEFT.
2. MOVE brings the agent to [2,1].
3. Turning LEFT again from facing LEFT makes the agent face DOWN.
4. With the KEY located at [3,1] (directly in front), the agent issues PICKUP to get the KEY.
5. Now holding the KEY, the agent turns LEFT from DOWN to face RIGHT.
6–8. The agent moves three times going east: from [2,1] → [2,2] → [2,3] → [2,4].
9. At [2,4] facing RIGHT, a RIGHT turn makes the agent face DOWN.
10–11. Two MOVE commands take the agent down from [2,4] to [3,4] and then to [4,4].
12. At [4,4] and facing DOWN, turning LEFT makes the agent face RIGHT—ideal to approach the DOOR at [4,5].
13. With the DOOR in front and holding the KEY, the agent issues UNLOCK to open the door.
14–15. Now, to free their hand (since one may hold only one object and cannot pick up the BOX when already holding something), the agent turns LEFT to face UP and then DROPs the KEY into the adjacent cell [3,4] (which is empty).
16. A RIGHT turn from UP resets the agent’s facing to RIGHT again.
17. MOVE drives the agent into the now-unlocked door cell [4,5] (entering the right room).
18. Another MOVE takes the agent to [4,6].
19. Turning LEFT from RIGHT sets the agent facing UP.
20–21. Two MOVE actions carry the agent from [4,6] upward to [3,6] and then to [2,6].
22. Finally, while at [2,6] facing UP (with the BOX at [1,6] directly ahead), the agent issues PICKUP to acquire the BOX.

This plan fulfills the objective: picking up the BOX in the other room while following all the rules.",0.93125,True,True
unlock_pickup,56,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""DROP"", ""LEFT"", ""PICKUP""]
</actions>

Let's explain the reasoning step by step:

1. Starting at (3,3) facing UP, the KEY is immediately below at (4,3). To have it directly in front, we turn 180° to face DOWN. So we execute ""LEFT"", ""LEFT"".
2. Now facing DOWN, the KEY is in the adjacent cell. We ""PICKUP"" it.
3. With the KEY in hand, we need to get to the door at (2,5) (which connects the left room—your starting room—to the right room where the BOX is). From (3,3) (after picking up the KEY) we turn 180° (with ""LEFT"", ""LEFT"") to face UP. Then we ""MOVE"" into (2,3).
4. At (2,3) facing UP, turning ""RIGHT"" will make you face east. A subsequent ""MOVE"" brings you into (2,4), which is immediately adjacent (to the left) of the door at (2,5).
5. Facing east, execute ""UNLOCK"" to unlock the door (using the KEY in hand) that lies directly in front.
6. Now, ""MOVE"" from (2,4) into the door cell (2,5) and then ""MOVE"" further to (2,6) in the right room.
7. Since you cannot PICKUP the BOX while holding an object, and your objective requires you to pick up the BOX, you must drop the KEY. With the agent at (2,6) facing EAST, the adjacent cell (2,7) is empty and suitable for a ""DROP"". So perform ""DROP"".
8. Finally, the BOX is located at (1,6). To pick it up, you must be adjacent to it. From (2,6) the cell directly above (1,6) contains the BOX. Turn ""LEFT"" (from EAST, ""LEFT"" becomes NORTH) and then ""PICKUP"" the BOX.

This sequence of actions accomplishes the objective step by step.",0.95625,True,True
unlock_pickup,57,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
  [""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Here's the reasoning:

1. Starting at (3,2) facing RIGHT, we first turn LEFT so we face UP.
2. We MOVE from (3,2) to (2,2). Now, with the KEY positioned at (1,2) directly north, we use PICKUP to grab it.
3. Still facing UP at (2,2) (after pickup, we remain in place), we MOVE again to (1,2) to approach the door.
4. At (1,2) we turn RIGHT to face EAST. Then we MOVE through (1,3) and (1,4). From (1,4) the cell directly in front (1,5) contains the DOOR.
5. With the KEY in hand, we UNLOCK the door at (1,5). (The agent remains at (1,4) facing RIGHT.)
6. We now need to free our hands to pick up the BOX, but we must keep the door unlocked. At (1,4) facing RIGHT, turning RIGHT (from EAST to SOUTH) makes the cell (2,4) in front empty, so we DROP the KEY there.
7. After dropping, we turn LEFT (from SOUTH to EAST) so that we face the door again. We then MOVE from (1,4) into the just-unlocked door cell at (1,5) and continue moving right through cells (1,6), (1,7), (1,8), and (1,9).
8. The BOX is in (2,9) — directly SOUTH of (1,9). So from (1,9) facing EAST, we turn RIGHT (to face SOUTH) and then PICKUP the BOX from (2,9).

This sequence fulfills the objective while following the game's rules.",0.94375,True,True
unlock_pickup,58,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Step-by-step explanation:

1. Starting at (3,3) facing DOWN, we need to get the KEY at (2,1). To go left (west), we turn RIGHT (since from DOWN, a right turn points WEST).
2. We MOVE from (3,3) to (3,2), then MOVE again to (3,1).
3. At (3,1), to have the KEY (located in the cell above at (2,1)) in front, we turn RIGHT so we face NORTH.
4. We then execute PICKUP to pick up the KEY from (2,1) (the cell directly in front).
5. With the KEY, we now want to head toward the door at (3,5) so we must navigate from (3,1) back into the hallway. Turning RIGHT (from NORTH) sets our direction to EAST.
6. We MOVE east three times: from (3,1) to (3,2), then (3,3), and finally (3,4). Now we face the door (at (3,5)) directly ahead.
7. We use UNLOCK (with the KEY held) to unlock the DOOR at (3,5).
8. We MOVE into the door at (3,5) and continue moving east into the adjacent room.
9. In the second room, we move EAST two more times to reach (3,7).
10. Then, turning LEFT (from EAST) points us NORTH. We MOVE from (3,7) to (2,7).
11. To get closer to the BOX at (1,8), we turn RIGHT (from NORTH) to face EAST and MOVE to (2,8).
12. Finally, turning LEFT adjusts our facing to NORTH so we can PICKUP the BOX, which is located in the cell above (1,8).

This sequence of actions satisfies the objective of picking up the BOX in the other room.",0.0,False,True
unlock_pickup,59,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Step-by-step explanation:
1. Start at (1,1) facing RIGHT.
2. ""MOVE"": Agent moves to (1,2) (facing RIGHT).
3. ""RIGHT"": Agent turns to face DOWN so the cell in front becomes (2,2), where the KEY is located.
4. ""PICKUP"": Pick up the KEY from (2,2) (agent remains at (1,2) holding the KEY).
5. ""MOVE"": From (1,2) facing DOWN, move to (2,2) (now empty after pickup).
6. ""MOVE"": Continue moving down to (3,2).
7. ""LEFT"": Turn left (from DOWN to RIGHT) to head toward the door.
8. ""MOVE"": Move to (3,3).
9. ""MOVE"": Move to (3,4).
10. ""RIGHT"": Turn right (from RIGHT to DOWN) to align with the door side.
11. ""MOVE"": Move down to (4,4), an empty cell adjacent to the DOOR.
12. ""LEFT"": Turn left (from DOWN to RIGHT) so that the DOOR at (4,5) is in front.
13. ""UNLOCK"": Use the KEY to unlock the DOOR at (4,5).
14. ""MOVE"": Step into the door cell (4,5) which is now accessible.
15. ""MOVE"": From (4,5) move to (4,6) in the second room.
16. ""MOVE"": Advance to (4,7).
17. ""MOVE"": Advance to (4,8) so the BOX at (4,9) is directly in front.
18. ""PICKUP"": Pick up the BOX.

This plan fulfills the objective of picking up the BOX located in a different room than where the agent started.",0.0,False,True
unlock_pickup,6,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Let's explain the plan step by step:

1. Starting at (4,1) facing LEFT, we first need to face the KEY which is at (4,4). Turning ""RIGHT"" twice makes us face RIGHT.
2. We then ""MOVE"" twice: from (4,1) → (4,2) and then (4,2) → (4,3). Now from (4,3) (facing RIGHT) the KEY is directly in front (at (4,4)), so we ""PICKUP"" it.
3. With the KEY in hand, we must reach the door located at (2,5) to access the room with the BOX. From (4,3) still facing RIGHT, we turn ""LEFT"" so that we face UP.
4. We ""MOVE"" twice upward: (4,3) → (3,3) then (3,3) → (2,3).
5. Next, we ""RIGHT"" turn to face RIGHT. Moving one step ""MOVE"" takes us from (2,3) → (2,4). Now the door is directly in front at (2,5), so we ""UNLOCK"" it using our KEY.
6. After unlocking, we ""MOVE"" into the door cell (from (2,4) to (2,5)) and then ""MOVE"" again to (2,6). 
7. At (2,6) facing RIGHT, we then turn ""RIGHT"" so we face DOWN. Now the BOX is directly in front at (3,6) so we ""PICKUP"" the BOX.

This sequence of actions meets the objective while following the movement, pickup, and unlocking rules.",0.0,False,True
unlock_pickup,60,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain step by step:

1. Start at (2,3) facing UP.  
   • ""RIGHT"" → now facing RIGHT.
2. ""MOVE"" → moves to (2,4) facing RIGHT.
3. ""RIGHT"" → now facing DOWN.
4. ""PICKUP"" → with (3,4) (directly below) containing the KEY, you pick it up.  
   (You remain at (2,4) holding the KEY.)
5–6. You need to get to (1,4) (above) so that the door can later be unlocked. Since you’re facing DOWN, you make two left turns:  
   • ""LEFT"" (facing RIGHT), then ""LEFT"" (facing UP).
7. ""MOVE"" → from (2,4) to (1,4) facing UP.
8. ""RIGHT"" → now facing RIGHT so that (1,5) (the DOOR cell) is in front.
9. ""UNLOCK"" → using the KEY to unlock the door at (1,5).
10–11. To free your hands so you can later pick up the BOX, you need to drop the KEY in an empty cell. You choose (1,3) by reorienting:  
    • ""LEFT"" turns from RIGHT to UP, then ""LEFT"" turns from UP to LEFT.
12. ""DROP"" → drops the KEY into the empty cell (1,3).
13–14. Now, reorient from facing LEFT to facing RIGHT (needed to head through the door). Two ""RIGHT"" actions:  
    • ""RIGHT"" (from LEFT becomes UP), ""RIGHT"" (from UP becomes RIGHT).
15. ""MOVE"" → from (1,4) to (1,5) (the unlocked door cell), entering the other room.
16–17. ""MOVE"" twice → progress rightward: from (1,5) to (1,6) and then to (1,7).
18. ""PICKUP"" → from (1,7) facing RIGHT, the cell (1,8) contains the BOX, so you pick it up.

This sequence successfully moves you from your starting room to the other room, unlocks the door using the KEY, drops the KEY (making room in your hands), and finally picks up the BOX.",0.94375,True,True
unlock_pickup,61,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
  [""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""RIGHT"", ""RIGHT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Below is the step‐by‐step reasoning:

1. • Starting at (1,4) facing DOWN, the KEY is at (4,4) in the same (left) room.  
   – Action 1: MOVE → advances from (1,4) to (2,4).  
   – Action 2: MOVE → advances from (2,4) to (3,4).  
   – Action 3: PICKUP → while facing DOWN, picks up the KEY in cell (4,4).

2. • With the KEY in hand at (3,4) facing DOWN, head back to the door (located at (2,5) on the room boundary) so that you can unlock it.  
   – Action 4: RIGHT → from DOWN, turning RIGHT changes your facing to LEFT.  
   – Action 5: RIGHT → another RIGHT turn moves your facing from LEFT to UP.  
   – Action 6: MOVE → moving UP from (3,4) brings you to (2,4).  
   – Action 7: RIGHT → now facing from UP to RIGHT.  
   – Action 8: UNLOCK → while facing RIGHT, you unlock the door at (2,5).

3. • Since you can carry only one object at a time and your objective is to eventually PICKUP the BOX in the other room, you must drop the KEY. Choose an adjacent cell that is empty and does not block your planned path.  
   – At (2,4) facing RIGHT (after unlocking) you now reorient so that the drop cell is not on your future route.  
   – Action 9: RIGHT → turning from RIGHT to DOWN.  
   – Action 10: RIGHT → turning from DOWN to LEFT.  
   – Action 11: DROP → with the cell immediately in front ((2,3)) empty, you drop the KEY.

4. • Now free of the KEY, you need to reorient to enter the right room via the unlocked door.  
   – Action 12: LEFT → from facing LEFT, a LEFT turn rotates you to face SOUTH.  
   – Action 13: LEFT → another LEFT turn brings you to face EAST (i.e. RIGHT).  
   – Action 14: MOVE → moving from (2,4) to (2,5) takes you through the unlocked door into the right room.

5. • In the right room your target BOX is located at (4,9). To pick it up the BOX must be in the cell directly in front of you. A good plan is to approach it from (4,8) while facing RIGHT.  
   – Action 15: MOVE → from (2,5) to (2,6).  
   – Action 16: MOVE → from (2,6) to (2,7).  
   – Action 17: MOVE → from (2,7) to (2,8).  
   – Action 18: RIGHT → turning from facing RIGHT to face DOWN.  
   – Action 19: MOVE → from (2,8) down to (3,8).  
   – Action 20: MOVE → from (3,8) down to (4,8).  
   – Action 21: LEFT → from DOWN, a LEFT turn makes you face RIGHT (toward the BOX at (4,9)).  
   – Action 22: PICKUP → with the BOX now directly in front, you pick it up.

This 22-action plan satisfies all rules and completes the objective of retrieving the BOX from the other room.",0.93125,True,True
unlock_pickup,62,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's the step‐by‐step reasoning:

1. Start at (4,1) facing LEFT. To head toward the KEY at (3,4), first turn right so you face UP.
2. MOVE from (4,1) to (3,1) (facing UP).
3. Turn RIGHT to face EAST.
4. MOVE from (3,1) to (3,2).
5. MOVE from (3,2) to (3,3).
6. With the KEY located in the cell directly in front ((3,4)), use PICKUP to retrieve the KEY.
7. After picking up the KEY, turn LEFT from facing RIGHT to face UP.
8. MOVE from (3,3) to (2,3).
9. Turn RIGHT so you face EAST.
10. MOVE from (2,3) to (2,4). Now, the DOOR is directly in front at (2,5).
11. Use UNLOCK (while holding the KEY) to unlock the DOOR.
12. Turn RIGHT (from EAST to face DOWN).
13. DROP the KEY into the cell in front ((3,4) becomes the drop location) so you free your hand.
14. Turn LEFT from facing DOWN to face RIGHT.
15. MOVE from (2,4) to (2,5) (through the now-unlocked door cell).
16. MOVE from (2,5) to (2,6) entering the right room.
17. Turn RIGHT (from facing RIGHT to face DOWN) to start heading toward the BOX.
18. MOVE from (2,6) to (3,6).
19. MOVE from (3,6) to (4,6).
20. Turn LEFT (from facing DOWN to face RIGHT).
21. MOVE from (4,6) to (4,7).
22. MOVE from (4,7) to (4,8).
23. Finally, from (4,8) facing RIGHT, the BOX is directly in front at (4,9). Use PICKUP to pick up the BOX.

This series of actions completes the objective of retrieving the BOX from the other room.",0.928125,True,True
unlock_pickup,63,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Let's explain step by step:

1. Starting at (1,2) facing DOWN, the KEY is at (1,1) – to have it directly in front, we first turn RIGHT so that we face LEFT.
2. Use PICKUP to pick up the KEY from (1,1).
3–4. Now, to head toward the door, we reorient: two LEFT turns change our facing from LEFT to DOWN and then to RIGHT.
4. Then, from (1,2) facing RIGHT, we MOVE twice to reach (1,4) along the clear cells.
5. Facing RIGHT at (1,4), we turn RIGHT (from RIGHT, a RIGHT turn makes us face DOWN) so we can move down.
6. MOVE downward to reach (2,4), which is adjacent to the door.
7. Turn LEFT (from DOWN, left turn makes us face RIGHT) so that the door cell (2,5) is directly in front.
8. With the KEY in hand and the door right ahead, we UNLOCK it.
9. MOVE into the door cell at (2,5), and then MOVE again into the adjacent cell (2,6) in the right room.
10. Finally, from (2,6) facing RIGHT, one LEFT turn makes us face UP so that the BOX at (1,6) is directly in front. Use PICKUP to grab the BOX.

This plan satisfies the constraints and completes the objective.",0.0,False,True
unlock_pickup,64,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""RIGHT"", ""RIGHT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""PICKUP""]
</actions>

Step-by-step explanation:

1. Starting at (4,4) facing LEFT, we first MOVE left to (4,3).
2. At (4,3), we need the KEY (located at (3,3)) to be in front of us. Since we’re facing LEFT, we turn RIGHT to face UP.
3. Now facing UP at (4,3), the cell in front is (3,3) which contains the KEY, so we PICKUP the KEY.
4. With the key in hand, we MOVE forward from (4,3) to (3,3).
5. At (3,3), to head toward the door, we TURN RIGHT to face RIGHT.
6. We then MOVE to (3,4); now the door at (3,5) is directly in front.
7. With our KEY in hand, we UNLOCK the door in front at (3,5).
8. Next, we MOVE into the door cell (3,5).
9-10. To drop the KEY (because we cannot pick up the BOX while holding the KEY), we need an adjacent empty cell. At (3,5) we orient ourselves toward (3,4) by turning RIGHT twice (from facing RIGHT → DOWN, then DOWN → LEFT).
11. Facing left, the cell in front (3,4) is empty, so we DROP the KEY.
12-13. Now, to pick up the BOX (located at (3,6)), we reorient ourselves by turning RIGHT twice (from facing LEFT → UP, then UP → RIGHT).
14. Finally, facing RIGHT at (3,5), the cell ahead (3,6) has the BOX. We PICKUP the BOX.

This sequence achieves the goal under the rules provided.",0.95625,True,True
unlock_pickup,65,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","We start at cell (4,1) facing RIGHT. Notice that the key is just above us at (3,1), so we first need to reorient upward and pick it up. Then, with the KEY in hand, we must go to the door (at (1,5)) to unlock it so we can access the other room where the BOX is (located at (2,6)). However, because we already hold the KEY and you cannot pick up another object while holding one, you must drop the KEY in an empty cell (we choose cell (2,4)) before attempting to pick up the BOX.

Here is the step‐by‐step plan:

1. Begin at (4,1) facing RIGHT.
   • Turn LEFT so you face UP.
   • With the key now in the cell in front (3,1), perform PICKUP to get the KEY.

2. Move from (4,1) to the door approach:
   • MOVE upward from (4,1) to (3,1) (the key’s cell, now empty after pickup).
   • MOVE to (2,1).
   • MOVE to (1,1).

3. At (1,1) facing UP, turn RIGHT so you face RIGHT. Then, walk right along row 1 toward the door:
   • MOVE to (1,2).
   • MOVE to (1,3).
   • MOVE to (1,4). Now the door at (1,5) is directly in front.

4. With the KEY in hand, use UNLOCK to unlock the door (at (1,5)). You still hold the KEY.

5. Since you cannot pick up the BOX while holding the KEY, turn to drop it:
   • From (1,4) (still facing RIGHT), turn RIGHT to face DOWN.
   • Then DROP the KEY into (2,4) (which is empty).

6. Now, to enter the right room:
   • From (1,4) facing DOWN, turn LEFT (so you face RIGHT).
   • MOVE into the unlocked door cell (1,5).

7. In the right room, continue:
   • MOVE from (1,5) to (1,6) while facing RIGHT.
   • Turn RIGHT (from RIGHT, this makes you face DOWN).
   • Now the cell in front (2,6) contains the BOX.
   • Perform PICKUP to collect the BOX.

Below is the list of actions that follow this plan:

<actions>
    [""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.946875,True,True
unlock_pickup,66,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.95625,True,True
unlock_pickup,67,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's the step‐by‐step explanation:

1. You start at (2,2) facing RIGHT.  
   • ""MOVE"" takes you from (2,2) to (2,3).

2. Now still at (2,3) facing RIGHT, you need to go downward toward the KEY at (4,3).  
   • ""RIGHT"" turns you from facing RIGHT to DOWN.

3. ""MOVE"" brings you from (2,3) to (3,3). Now, while at (3,3) facing DOWN, the cell directly in front, (4,3), holds the KEY.

4. ""PICKUP"" picks up the KEY from (4,3) without stepping into its cell (this is allowed since the object is directly in front).

5. Now holding the KEY, ""MOVE"" (while still facing DOWN) moves you into the now-empty cell (4,3).

6. At (4,3) facing DOWN, you need to head toward the door.  
   • ""LEFT"" turns you from DOWN to facing RIGHT.

7. ""MOVE"" moves you from (4,3) to (4,4). The door is in the cell directly in front (at (4,5)).

8. ""UNLOCK"" uses your held KEY to unlock the DOOR at (4,5).

9–10. After unlocking, you cannot pick up the BOX while holding the KEY. So, you need to drop the KEY. To drop it into an empty cell (and not into a DOOR cell), you reorient:  
   • ""LEFT"" turns you from facing RIGHT to facing UP, and a second ""LEFT"" turns you to face LEFT. Now the cell directly in front of you (from (4,4)) is (4,3), which is free.

11. ""DROP"" places the KEY in cell (4,3).

12–13. Now, to exit the left room you need to go back toward the door. At (4,4) you are facing LEFT; you want to face RIGHT (east) so that the door (at (4,5)) is ahead.  
   • Two ""LEFT"" turns from facing LEFT will get you around 180° (LEFT then LEFT) so that you face RIGHT.

14. ""MOVE"" goes from (4,4) into the door cell at (4,5).

15. ""MOVE"" moves you from (4,5) (the now-unlocked door) into (4,6) in the right room.

16–17. Continue in the right room by moving east:  
   • Two ""MOVE"" commands take you from (4,6) to (4,7) and then to (4,8).

18. The BOX is located at (1,8). From (4,8), you must head north.  
   • ""LEFT"" (from facing RIGHT) turns you to face UP.

19–20. Two ""MOVE"" commands take you north: from (4,8) to (3,8) and then to (2,8). Now the BOX in cell (1,8) is directly in front of you.

21. Finally, ""PICKUP"" picks up the BOX.

This action sequence fulfills your objective of picking up the BOX located in the other room.",0.934375,True,True
unlock_pickup,68,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Let’s explain step by step:

1. Starting at row 1, column 3 facing RIGHT, the agent first turns RIGHT to face DOWN.
2. The agent MOVEs from (1,3) to (2,3). Now, the KEY at (3,3) is directly in front.
3. The agent issues PICKUP to grab the KEY from (3,3).
4. Holding the KEY, the agent turns LEFT; from facing DOWN this now faces RIGHT.
5. The agent MOVEs from (2,3) to (2,4). Now the DOOR at (2,5) is directly ahead.
6. The agent uses UNLOCK (while holding the KEY) to unlock the door at (2,5).
7. Then, the agent MOVEs into the door cell at (2,5), entering the second room.
8. Still facing RIGHT, a MOVE takes the agent from (2,5) to (2,6).
9. The agent then turns RIGHT to face DOWN.
10. A MOVE takes the agent from (2,6) to (3,6); from here the BOX at (4,6) is directly in front.
11. Finally, the agent issues PICKUP to grab the BOX from (4,6), achieving the objective.

This complete sequence of actions achieves the objective of retrieving the BOX from the other room.",0.0,False,True
unlock_pickup,69,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""AGENT"", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Let's explain the plan step by step:

1. Starting at (4,4) facing LEFT, the agent first moves forward into (4,3).  
2. With the KEY now directly in front at (4,2), the agent executes PICKUP to grab the KEY.  
3. To navigate toward the door (located at (1,5)), the agent turns RIGHT (changing facing from LEFT to UP) and moves successively from (4,3) to (3,3), then to (2,3), and then to (1,3).  
4. At (1,3) facing UP, a RIGHT turn makes the agent face RIGHT.  
5. Moving from (1,3) to (1,4) places the door directly in front.  
6. With the door ahead, the agent uses UNLOCK (while holding the KEY) to unlock the door at (1,5).  
7. The agent then moves into the door cell at (1,5).  
8. Since the agent must free up hands before picking up another object (the BOX), the agent drops the KEY. To do so without interfering with the planned path, the agent turns left twice from facing RIGHT (first to UP, then to LEFT) so that (1,4) becomes the drop cell.  
9. After dropping the key at (1,4), the agent reorients by turning RIGHT twice (from LEFT to UP, then to RIGHT) to continue along the intended route.  
10. Now in the right room, the agent moves from (1,5) to (1,6), turns RIGHT to face DOWN, and then moves steadily down through (2,6) and (3,6) to reach (4,6).  
11. At (4,6) facing DOWN, a LEFT turn updates the direction to RIGHT, aligning the BOX (at (4,7)) directly ahead.  
12. Finally, a PICKUP action collects the BOX, completing the objective.

This sequence thus achieves the goal of crossing rooms via the door, using the KEY to unlock it, and eventually picking up the BOX in the other room.",0.93125,True,True
unlock_pickup,7,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain step by step:

1. Starting at (2,1) facing DOWN, the first two ""MOVE"" actions take you to (3,1) then to (4,1).  
2. Facing DOWN, a ""LEFT"" turn makes you face EAST. Now the cell directly in front, (4,2), has the KEY.  
3. The ""PICKUP"" action collects the KEY (from (4,2)) while you remain in (4,1).  
4. With the KEY in hand, you ""MOVE"" three times: from (4,1) → (4,2), then to (4,3), and finally to (4,4). Now the door at (4,5) is directly ahead.  
5. The ""UNLOCK"" action uses the KEY to unlock the door at (4,5). (You remain at (4,4) still holding the KEY.)  
6. Because you cannot pick up the BOX while holding an object, you need to drop the KEY next. To drop it in an empty adjacent cell, you turn ""LEFT"" (from EAST to NORTH) so that the cell (3,4) is in front, and then ""DROP"" the KEY there.  
7. Facing north now at (4,4), you turn ""RIGHT"" to reorient toward EAST.  
8. Two ""MOVE"" actions take you from (4,4) to (4,5) (the now-unlocked door cell) and then to (4,6). Now the BOX at (4,7) is directly in front.  
9. Finally, the ""PICKUP"" action picks up the BOX.

This sequence guides you from your start, through obtaining and using the KEY to unlock the door, dropping the KEY, and finally picking up the BOX from the adjacent cell.",0.95625,True,True
unlock_pickup,70,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (2,2) facing RIGHT.
2. ""MOVE"" → Agent moves to (2,3).
3. ""MOVE"" → Agent moves to (2,4). (Now directly above the cell (3,4) which holds the KEY.)
4. ""RIGHT"" → Agent turns from RIGHT to face DOWN.
5. ""PICKUP"" → Facing DOWN, the cell in front (3,4) contains the KEY. Agent picks up the KEY.
6. ""MOVE"" → With the KEY, agent moves from (2,4) down to (3,4).
7. ""LEFT"" → Now at (3,4) facing DOWN, a LEFT turn makes the agent face RIGHT, toward the DOOR at (3,5).
8. ""UNLOCK"" → Facing the DOOR at (3,5) and holding the KEY, the agent unlocks it. (The door cell becomes accessible, but the agent still holds the KEY.)
9. To obey the rule that you cannot pick up another object while holding an object, the KEY must now be dropped into an eligible empty cell. At (3,4) facing RIGHT, the cell ahead (3,5) would be invalid (a door cell), so:
10. ""LEFT"" → Turn from RIGHT to face UP. Now the cell in front (2,4) is empty.
11. ""DROP"" → Drop the KEY into (2,4). (Now, the agent is no longer holding anything.)
12. The agent now must head towards the BOX, which is in the room beyond the door. From (3,4) facing UP, the agent reorients:
13. ""RIGHT"" → From UP, turning RIGHT makes the agent face RIGHT.
14. ""MOVE"" → Move from (3,4) to (3,5) (through the unlocked door).
15. ""MOVE"" → Move from (3,5) to (3,6).
16. ""RIGHT"" → At (3,6) facing RIGHT, a RIGHT turn makes the agent face DOWN. Now the cell in front (4,6) contains the BOX.
17. ""PICKUP"" → Pick up the BOX from (4,6).

This sequence satisfies all the constraints and completes the objective of picking up the BOX in the other room.",0.95625,True,True
unlock_pickup,71,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (1,1) facing LEFT, we first need to face RIGHT to head toward the KEY (located at (2,3)). Since turning RIGHT twice from LEFT (i.e. LEFT → UP then UP → RIGHT), we do “RIGHT”, “RIGHT”.
2. We then MOVE twice to go from (1,1) to (1,2) and then to (1,3).
3. Now, to pick up the KEY in the cell (2,3) (which is directly below (1,3)), we must face DOWN. So we turn RIGHT (from RIGHT to DOWN) and then execute a PICKUP.
4. Holding the KEY, we can’t enter a cell with an object; we need to remain safely in an adjacent cell. So, we MOVE from (1,3) to (2,3), then again to (3,3).
5. To approach the door transition area, we need to navigate to the cell (4,4) (which is adjacent to the door at (4,5)). At (3,3) (facing DOWN), we turn LEFT to face RIGHT and MOVE into (3,4).
6. Next, turning RIGHT (from RIGHT to DOWN) aligns us to MOVE from (3,4) down to (4,4).
7. At (4,4) with the KEY, we turn LEFT (from DOWN to RIGHT) to face the door at (4,5) and then UNLOCK it using the KEY.
8. We then MOVE into the door cell at (4,5) and further MOVE into (4,6) in the right room.
9. Since we cannot pick up the BOX while holding another object, we DROP the KEY into the adjacent empty cell (with a DROP performed while facing RIGHT, depositing it into (4,7)).
10. Now, from (4,6) facing RIGHT, we turn LEFT (to face UP) and MOVE upward through (3,6), (2,6), and then (1,6).
11. At (1,6) (facing UP), a RIGHT turn points us toward the BOX located at (1,8). We MOVE to (1,7) and then execute PICKUP to grab the BOX.

This sequence achieves the goal of fetching the BOX from the other room.",0.925,True,True
unlock_pickup,72,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""RIGHT"", ""DROP"", ""LEFT"", ""PICKUP""]
</actions>

We can explain the plan step‐by‐step:

1. Starting at (2,1) facing LEFT, we first turn LEFT so we face DOWN.
2. MOVE from (2,1) to (3,1).
3. Turn LEFT from DOWN to face RIGHT.
4–5. MOVE twice to advance from (3,1) to (3,2) then (3,3). Now the KEY is located in the cell (3,4) immediately to our RIGHT.
6. PICKUP the KEY from (3,4) (since it’s directly ahead from (3,3)).
7. MOVE into (3,4) (now empty after you pick up the KEY).
8–10. Turn RIGHT (from RIGHT to DOWN) and MOVE: By turning RIGHT you face DOWN, then MOVE from (3,4) to (4,4). Then turn LEFT so that you face RIGHT; the DOOR (at (4,5)) is now directly in front.
11. UNLOCK the DOOR using the KEY.
12–13. MOVE first into the DOOR’s cell (4,5), then further right into (4,6). You are now in the adjacent room (the target room with the BOX).
14–17. Turn LEFT to face UP and MOVE three times: from (4,6) up to (3,6), then to (2,6), and finally to (1,6). You are now in position to retrieve the BOX, which is at (1,7); however, you’re still holding the KEY.
18–19. Since you cannot pick up the BOX while holding an object, turn RIGHT twice from UP to face DOWN. (We choose DOWN because the cell beneath (1,6), i.e. (2,6), is empty.)
20. DROP the KEY into (2,6).
21. Turn LEFT from DOWN so that you face RIGHT.
22. Finally, with your hands now free and facing the BOX at (1,7), PICKUP the BOX.

This sequence obeys all movement and action rules and completes the objective.",0.93125,True,True
unlock_pickup,73,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Let’s explain the plan step by step:

1. Starting at (1,4) facing RIGHT, we want to go to the KEY at (3,1) without entering its cell (because objects block movement). We choose to approach the KEY from above. First, we turn from RIGHT to LEFT by turning LEFT twice.  
   • Actions: ""LEFT"", ""LEFT""

2. Now facing LEFT, we move three times from (1,4) → (1,3) → (1,2) → (1,1).  
   • Actions: ""MOVE"", ""MOVE"", ""MOVE""

3. Next, from (1,1) we need to get below because our target KEY at (3,1) lies beneath. Facing LEFT, we turn LEFT to face DOWN.  
   • Action: ""LEFT""

4. We move once to (2,1). Now the KEY is directly in front (cell (3,1)).  
   • Action: ""MOVE""

5. We pick up the KEY. (Note that once picked up, the key’s cell becomes empty.)  
   • Action: ""PICKUP""

6. With the KEY in hand, we now need to go to the DOOR at (4,5) that separates the left room from the right room (where the BOX is located).  
   From (2,1) (facing DOWN), we move down two steps: from (2,1) to (3,1) then to (4,1).  
   • Actions: ""MOVE"", ""MOVE""

7. At (4,1) still facing DOWN, we need to head east. From DOWN, turning LEFT makes us face RIGHT.  
   • Action: ""LEFT""

8. Then we move three times to the right from (4,1) → (4,2) → (4,3) → (4,4).  
   • Actions: ""MOVE"", ""MOVE"", ""MOVE""

9. Now at (4,4) facing RIGHT, the DOOR is directly ahead at (4,5). We unlock it using our KEY.  
   • Action: ""UNLOCK""

10. We then move into the door cell (now unlocked) by moving one step to (4,5).  
    • Action: ""MOVE""

11. To enter the right room, we continue moving RIGHT from (4,5) to (4,6).  
    • Action: ""MOVE""

12. Inside the right room, we must navigate to the BOX at (1,9). We'll approach it so that the BOX is directly in front of us for a pickup. From (4,6) facing RIGHT, turning LEFT makes us face UP.  
    • Action: ""LEFT""

13. Moving up three times takes us from (4,6) → (3,6) → (2,6) → (1,6).  
    • Actions: ""MOVE"", ""MOVE"", ""MOVE""

14. At (1,6) facing UP, we turn RIGHT to face EAST (to get closer to the BOX, which is to our right).  
    • Action: ""RIGHT""

15. Then we move right twice from (1,6) → (1,7) → (1,8). Now the BOX, located at (1,9), is directly in front of us.  
    • Actions: ""MOVE"", ""MOVE""

16. Finally, we pick up the BOX.  
    • Action: ""PICKUP""

This sequence of 25 actions satisfies the objective.",0.0,False,True
unlock_pickup,74,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's the step‐by‐step plan:

1. Start at [2,3] facing RIGHT.  
 • Turn RIGHT so you face DOWN.  
 • MOVE to [3,3] where the KEY is.  
 • PICKUP the KEY.

2. With the KEY in hand but needing to unlock the door from the left side, go back toward the door at [1,5].  
 • While at [3,3] facing DOWN, turn LEFT twice to face UP.  
 • MOVE twice (first to [2,3], then to [1,3]).  
 • From [1,3] you need to head right toward [1,4] (the cell adjacent to the door). Turn RIGHT (from UP you face RIGHT) and MOVE to [1,4].

3. To eventually pick up the BOX you must not be holding another object. So drop the KEY safely.  
 • At [1,4] facing RIGHT (with the door at [1,5] ahead, which you cannot drop into), turn LEFT twice to face LEFT.  
 • DROP the KEY into the empty cell [1,3].  
 • Then turn LEFT twice (rotating 180°) so that you are once again facing RIGHT.

4. Now, with empty hands, use the KEY you just used to unlock the door.  
 • UNLOCK the door directly in front (cell [1,5]).  
 • MOVE into the door cell.

5. Cross into the right-side room toward the BOX at [4,9].  
 • MOVE repeatedly to go right: from [1,5] to [1,6], then [1,7], then [1,8], and finally [1,9].  
 • At [1,9] facing RIGHT, turn RIGHT to face DOWN.

6. Approach the BOX so that it is in the cell directly in front.  
 • MOVE down twice: from [1,9] to [2,9] and then to [3,9].  
 • Finally, PICKUP the BOX from the cell [4,9] (directly in front of you, as required).

This complete sequence of 24 actions achieves the objective step by step.",0.0,False,True
unlock_pickup,75,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Here's the step‐by‐step explanation:

1. Starting at [1,2] facing UP, the agent first needs to head toward the KEY at [4,4].  
   • ""RIGHT"": Turn from UP to face RIGHT.  
   • ""MOVE"": Step from [1,2] to [1,3].  
   • ""MOVE"": Step from [1,3] to [1,4].

2. Now the agent needs to move downward to reach a position adjacent to the KEY.  
   • ""RIGHT"": Turn from RIGHT to face DOWN.  
   • ""MOVE"": Move from [1,4] to [2,4].  
   • ""MOVE"": Move from [2,4] to [3,4].  
   
   At [3,4] facing DOWN, the cell directly in front ([4,4]) contains the KEY.

3. Pick up the KEY.  
   • ""PICKUP"": Pick up the KEY from [4,4].

4. To unlock the door (located in cell [3,5]), the agent must face it. From [3,4], adjust orientation:  
   • ""LEFT"": From facing DOWN, turning left makes the agent face RIGHT (since left from South is East).  
   • ""UNLOCK"": With the KEY held, unlock the door in [3,5].

5. The agent now must drop the KEY before picking up the BOX (since only one object can be held). The KEY must be dropped in an empty cell that isn’t a door or wall. Choosing the left cell ([3,3]) works.  
   Since the agent is at [3,4] facing RIGHT, first reorient to face LEFT:  
   • ""LEFT"": Turn left from RIGHT → now facing UP.  
   • ""LEFT"": Turn left from UP → now facing LEFT.  
   • ""DROP"": Drop the KEY into [3,3].

6. Next, the agent must reorient to reach the door and cross into the room with the BOX. Currently facing LEFT, the door is to the right:  
   • ""LEFT"": Turn left from LEFT → now facing SOUTH.  
   • ""LEFT"": Turn left from SOUTH → now facing RIGHT.

7. Move through the door into the second room.  
   • ""MOVE"": From [3,4] move right into [3,5] (the door cell, now unlocked).  
   • ""MOVE"": Continue from [3,5] to [3,6].  
   • ""MOVE"": Continue from [3,6] to [3,7].

8. At [3,7], the BOX is located in the cell directly below ([4,7]). Adjust orientation to face downwards:  
   • ""RIGHT"": Turn right from facing RIGHT to face DOWN.  

9. Finally, pick up the BOX.  
   • ""PICKUP"": Pick up the BOX located at [4,7].

This sequence of actions successfully navigates the grid, obtains the KEY (to unlock the door), unlocks it, drops the KEY to free the hand, crosses into the other room, and eventually picks up the BOX.",0.940625,True,True
unlock_pickup,76,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Let's explain the plan step by step:

1. Starting at [1,3] facing UP, we first turn LEFT so that we face the KEY, which is located to our left.
2. We MOVE forward from [1,3] to [1,2]. Now, facing left, the cell in front ([1,1]) contains the KEY.
3. We execute PICKUP to grab the KEY.

Now holding the KEY, we need to go unlock the door (located at [3,5]). We plan to approach it from the left side:
4. From facing LEFT, a LEFT turn makes us face DOWN.
5. MOVE from [1,2] to [2,2].
6. From facing DOWN, a LEFT turn rotates us to face RIGHT.
7. MOVE from [2,2] to [2,3].
8. MOVE from [2,3] to [2,4].
9. From facing RIGHT, a RIGHT turn makes us face DOWN.
10. MOVE from [2,4] to [3,4]—the cell immediately to the left of the door.
11. From facing DOWN at [3,4], a LEFT turn will make us face RIGHT, so that the door ([3,5]) is directly in front.
12. UNLOCK the door using the KEY we are holding.

Since we cannot pick up the BOX while holding the KEY, we need to drop it into an empty adjacent cell. At [3,4] now facing RIGHT, the door is ahead (not permitted for dropping), so:
13. Turn LEFT (now facing UP).
14. Turn LEFT again (now facing LEFT) so that the adjacent cell in front ([3,3]) is empty.
15. DROP the KEY into [3,3].

With the KEY safely dropped, our next goal is to move into the right room, where the BOX is. We reposition:
16. From facing LEFT, a RIGHT turn makes us face UP.
17. Another RIGHT turn sets us to face RIGHT.
18. MOVE from [3,4] into the door cell at [3,5] (the door is now unlocked).
19. MOVE from [3,5] to [3,6] in the right room.
20. MOVE from [3,6] to [3,7]—this positions us directly above the BOX.
21. From facing RIGHT at [3,7], a RIGHT turn makes us face DOWN (so that the BOX located at [4,7] is directly in front).
22. Finally, PICKUP the BOX.

This sequence accomplishes the objective of retrieving the BOX from the other room.",0.93125,True,True
unlock_pickup,77,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""DROP"", ""LEFT"", ""PICKUP""]
</actions>

Let's explain step by step:

1. Starting at (1,2) facing UP, we first turn LEFT to face WEST.
2. MOVE from (1,2) to (1,1).
3. Turn LEFT again (facing WEST → turn left → now facing DOWN) so that the cell in front becomes (2,1) where the KEY is.
4. PICKUP the KEY from (2,1).
5. With the KEY in hand, we need to go unlock the DOOR to enter the room with the BOX. From (1,1) and facing DOWN, we turn LEFT to face EAST.
6–8. MOVE three times along row 1: from (1,1) → (1,2), then (1,2) → (1,3), and then (1,3) → (1,4). Now we're immediately left of the DOOR.
9. With the DOOR at (1,5) directly in front (and holding the KEY), we UNLOCK it.
10. MOVE into the door cell (1,5).
11–13. MOVE three more times to continue east: (1,5) → (1,6), then (1,6) → (1,7), and finally (1,7) → (1,8). Now we are in the second room.
14. At (1,8) facing EAST with the KEY, we need to drop the KEY before picking up the BOX (since you can only hold one object). Turn RIGHT so that you face DOWN; the cell (2,8) is empty.
15. DROP the KEY into (2,8).
16. Turn LEFT (from facing DOWN to facing EAST) so that you face the BOX at (1,9).
17. Finally, PICKUP the BOX from (1,9).

This sequence achieves the goal step-by-step.",0.946875,True,True
unlock_pickup,78,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Step-by-step reasoning:
1. Start at (3,3) facing LEFT. The KEY is located at (3,1), which is two cells to the left of the agent. To pick it up, the agent must be adjacent and facing the KEY.
2. From (3,3) facing LEFT, a ""MOVE"" takes the agent to (3,2). Now, with the agent still facing LEFT, the cell in front (3,1) contains the KEY.
3. ""PICKUP"" is then used to pick up the KEY.
4. Now holding the KEY, the agent must head to the DOOR at (3,5) (which separates the two rooms). The agent is at (3,2) but needs to face right to approach the door. Two ""RIGHT"" turns (from LEFT → UP → RIGHT) orient the agent correctly.
5. A ""MOVE"" goes from (3,2) to (3,3), and another ""MOVE"" advances the agent to (3,4). When at (3,4) and facing RIGHT, the cell in front (3,5) is the DOOR.
6. ""UNLOCK"" is used to unlock the DOOR since the agent is holding the KEY.
7. Next, a ""MOVE"" enters the (3,5) cell (now unlocked) and moves into the second room.
8. Subsequent ""MOVE"" actions from (3,5) to (3,6) and then to (3,7) bring the agent closer to the BOX.
9. The BOX is located at (2,7). When the agent is at (3,7) facing RIGHT, a ""LEFT"" turn changes the orientation to UP.
10. Finally, ""PICKUP"" is used to pick up the BOX, as the cell directly in front (2,7) contains the BOX.

This action sequence successfully guides the agent from its starting position, gets the KEY, unlocks the DOOR to enter the BOX’s room, and picks up the BOX.",0.0,False,True
unlock_pickup,79,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's a step‐by‐step explanation:

1. Starting at row2, col1 facing UP, we need to fetch the KEY at row4, col3 (without stepping into its cell).  
   • ""LEFT"", ""LEFT"" rotates the agent from UP to DOWN.  
   • Two ""MOVE"" actions bring the agent from row2, col1 to row4, col1.  
   • ""LEFT"" (while facing DOWN) turns the agent to face EAST.  
   • ""MOVE"" takes the agent to row4, col2—adjacent to the KEY at row4, col3.  
   • ""PICKUP"" collects the KEY from the cell directly in front (row4, col3).

2. With the KEY in hand, the agent must now go to the door at row1, col5 (by approaching from row1, col4 facing east).  
   • ""LEFT"" turns the agent (from EAST) to face NORTH.  
   • Three ""MOVE"" actions take the agent from row4, col2 up to row1, col2.  
   • ""RIGHT"" rotates the agent to face EAST.  
   • Two ""MOVE"" actions bring the agent to row1, col4, which is adjacent to the door (cell row1, col5).  
   • ""UNLOCK"" uses the KEY to unlock the door directly in front.

3. Crossing into the room with the BOX (located at row2, col9):  
   • ""MOVE"" enters the door cell (row1, col5).  
   • ""MOVE"" continues into the right room (to row1, col6).

4. Now to reach and pick up the BOX:  
   • ""RIGHT"" rotates the agent from EAST to face SOUTH.  
   • ""MOVE"" steps down from row1, col6 to row2, col6.  
   • ""LEFT"" turns the agent from SOUTH to face EAST.  
   • Two ""MOVE"" actions progress the agent to row2, col8, which is adjacent to the BOX in row2, col9.  
   • Finally, ""PICKUP"" collects the BOX.

This complete action sequence meets the objective by first obtaining the KEY and unlocking the door, then entering the box’s room and picking up the BOX.",0.0,False,True
unlock_pickup,8,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
  [""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain the steps:

1. Starting at (3,2) facing DOWN, turn LEFT to face RIGHT.
2. MOVE from (3,2) to (3,3). Now the KEY at (3,4) is directly in front.
3. PICKUP the KEY in (3,4).
4. MOVE from (3,3) to (3,4); now you’re adjacent to the DOOR at (3,5).
5. UNLOCK the DOOR at (3,5) using the KEY.
6. MOVE into the (formerly locked) DOOR cell at (3,5).
7. MOVE further into (3,6), entering the room where the BOX is.
8. Turn LEFT to face UP (from RIGHT).
9. MOVE from (3,6) to (2,6). At (2,6) facing UP, the BOX in (1,6) is now in front.
10. PICKUP the BOX located at (1,6).

This completes your objective of picking up the BOX from a different room.",0.0,False,True
unlock_pickup,80,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Step-by-step reasoning:
1. The agent starts at [1][4] facing LEFT. To head toward the KEY at [4][3] (which is in the left room), the agent first turns left. Facing LEFT, a ""LEFT"" turn makes the agent face DOWN.
2. With the agent now facing DOWN at [1][4], three consecutive ""MOVE"" actions will take the agent to [2][4], then [3][4], and finally [4][4].
3. At [4][4], the KEY is located one cell to the left at [4][3]. To face that direction:
   - While facing DOWN, a ""RIGHT"" turn changes the facing from DOWN to LEFT.
4. With the agent at [4][4] now facing LEFT (so that [4][3] is in front), the ""PICKUP"" action collects the KEY.
5. Next, with the KEY in hand, the agent must unlock the door at [4][5] to access the other room. The door is to the right of the agent’s current cell. Since the agent is facing LEFT, two turns are needed:
   - A ""RIGHT"" turn (from LEFT to UP) and then another ""RIGHT"" turn (from UP to RIGHT) make the agent face RIGHT.
6. Facing RIGHT, the ""UNLOCK"" action unlocks the door at [4][5].
7. The agent then ""MOVE""s into the door cell at [4][5].
8. In the right room, the BOX is at [3][6]. From [4][5] facing RIGHT, a ""MOVE"" takes the agent to [4][6].
9. To have the BOX directly in front, the agent must face UP. A ""LEFT"" turn from RIGHT makes the agent face UP.
10. Finally, the ""PICKUP"" action picks up the BOX (located at [3][6] directly ahead).

This sequence completes the objective step by step.",0.0,False,True
unlock_pickup,81,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (4,2) facing RIGHT, turn LEFT so you face UP.
2. MOVE from (4,2) to (3,2) (facing UP).
3. MOVE to (2,2).
4. MOVE to (1,2). Now you’re in the same room as the KEY.
5. Turn RIGHT so that you face towards (1,3) where the KEY is.
6. With the KEY directly in front (at (1,3)), PICKUP the KEY.
7. MOVE from (1,2) to (1,3).
8. MOVE to (1,4) so that you’re now adjacent to the DOOR.
9. Still holding the KEY, face the DOOR (which is at (1,5)) and UNLOCK it.
10. With the door unlocked but still holding the KEY, turn RIGHT to face DOWN.
11. DROP the KEY into (2,4) (an empty cell) because you can’t pick up the BOX while carrying another object.
12. Turn LEFT to reorient from facing DOWN to facing RIGHT.
13. MOVE from (1,4) to (1,5) – you are now in the unlocked door cell.
14. MOVE from (1,5) to (1,6), entering the right room.
15. Turn RIGHT so that you face DOWN toward the BOX.
16. Finally, with the BOX at (2,6) directly in front of you, PICKUP the BOX.

This sequence ensures you pick up the KEY to unlock the door, drop it since you cannot hold two objects, and then navigate to pick up the BOX located in the other room.",0.95,True,True
unlock_pickup,82,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>

Step-by-step explanation:
1. Starting at row4, col3 and facing DOWN, we first turn twice (""RIGHT"", ""RIGHT"") to face UP.
2. We then move upward three times (""MOVE"", ""MOVE"", ""MOVE"") to reach row1, col3.
3. Turning left (""LEFT"") from UP makes us face LEFT.
4. A move (""MOVE"") takes us to row1, col2. With the KEY at row1, col1 directly ahead, we use ""PICKUP"" to retrieve it.
5. With the KEY in hand, we turn left (""LEFT"") to face DOWN, and move twice (""MOVE"", ""MOVE"") from (1,2) down to (3,2) while staying in the left room.
6. We then turn left (""LEFT"") from DOWN to face RIGHT. Two moves (""MOVE"", ""MOVE"") take us to (3,4), immediately adjacent to the door at (3,5). With ""UNLOCK"" we open the door.
7. Moving (""MOVE"") from (3,4) takes us into the door cell at (3,5). Then we proceed further to the right with four moves (""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"") to get to (3,9) in the right room.
8. Turning left (""LEFT"") from RIGHT makes us face UP. A move (""MOVE"") then positions us such that the BOX at (2,9) is directly in front.
9. Finally, ""PICKUP"" collects the BOX.

This sequence satisfies reaching and picking up the BOX in the room different from your starting position.",0.0,False,True
unlock_pickup,83,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain our reasoning step by step:

1. Starting at row2,col2 facing RIGHT, we need to pick up the KEY at row2,col1 (to our left). Two LEFT turns will orient us to face LEFT, so the cell directly ahead is (2,1), where the KEY is. Then a PICKUP picks it up.
2. Now holding the KEY (which is needed to unlock the door later), we need to reach the door at row3,col5. From (2,2) facing LEFT, a LEFT turn (from LEFT to DOWN) reorients us to face DOWN.
3. A MOVE brings us from row2,col2 to row3,col2.
4. At row3,col2 facing DOWN, a LEFT turn makes us face RIGHT. Two MOVEs then bring us from (3,2) to (3,3) and then to (3,4). At (3,4) facing RIGHT the door is directly in front (at row3,col5).
5. With the KEY in hand, an UNLOCK action unlocks the door.
6. Before picking up the BOX, we must drop the KEY because we cannot hold two objects. Dropping the KEY into the cell directly in front is not allowed since (3,5) (the door cell) is on our way to the BOX. Instead, we turn LEFT at (3,4) to face UP so that the cell (2,4) is empty; a DROP places the KEY there.
7. We then reorient by turning RIGHT (from UP to RIGHT) so that continuing from (3,4) facing RIGHT, a MOVE takes us through the unlocked door (cell (3,5)) and places us in position to pick up the BOX, which is located in (3,6) directly ahead.
8. Finally, a PICKUP acquires the BOX.

This sequence of actions meets the objective and obeys all game rules.",0.95625,True,True
unlock_pickup,84,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Let's explain our reasoning step by step:

1. We start at (1,1) facing UP in the left room. The KEY is at (2,4) in the left room. To get adjacent to the KEY (so that it appears directly in front when facing RIGHT), we need first to turn so that we can go “south” then “east.”  
   • Actions 1–2 (“RIGHT”, “RIGHT”) turn the agent from UP to DOWN.  
   • Action 3 (“MOVE”) moves the agent from (1,1) to (2,1).

2. From (2,1) facing DOWN, by turning left you'll face RIGHT, allowing eastward traverse.  
   • Action 4 (“LEFT”) makes the agent face RIGHT.  
   • Actions 5 and 6 (“MOVE”, “MOVE”) move the agent from (2,1) through (2,2) to (2,3).

3. Standing at (2,3) and facing RIGHT, the cell in front (2,4) contains the KEY.  
   • Action 7 (“PICKUP”) picks up the KEY.

4. Now with the KEY in hand, we need to unlock the door at (3,5) that connects to the right room (where the BOX is). We must get adjacent to the door.  
   • Action 8 (“MOVE”) moves the agent from (2,3) to (2,4).  
   • Action 9 (“RIGHT”) reorients the agent from facing RIGHT to facing DOWN.  
   • Action 10 (“MOVE”) takes the agent from (2,4) to (3,4); now the door cell is immediately to our RIGHT.

5. With the agent at (3,4) facing DOWN, a left turn puts the agent facing RIGHT toward the door.  
   • Action 11 (“LEFT”) faces RIGHT.  
   • Action 12 (“UNLOCK”) unlocks the door at (3,5), as the KEY is carried.

6. Since you cannot pick up the BOX while still holding the KEY, you must drop it into an empty, non-door cell. Facing right at (3,4) the cell ahead is the door, so you turn away from it.  
   • Action 13 (“LEFT”) rotates the agent (from RIGHT) to face UP so that the front cell (2,4) is empty.  
   • Action 14 (“DROP”) drops the KEY into (2,4).

7. Now free of any carried object, continue into the right room where the BOX is located.  
   • Action 15 (“RIGHT”) from facing UP rotates you to face RIGHT.  
   • Action 16 (“MOVE”) takes you from (3,4) into the door cell (3,5).  
   • Action 17 (“MOVE”) moves you deeper into the right room at (3,6).

8. The BOX is located at (1,7). From (3,6) you must travel north and then east.  
   • Action 18 (“LEFT”) from facing RIGHT rotates you to face UP.  
   • Actions 19–20 (“MOVE”, “MOVE”) move you from (3,6) to (2,6) and then to (1,6).  
   • Action 21 (“RIGHT”) rotates you from UP to RIGHT so that the cell ahead (1,7) contains the BOX.

9. Finally,  
   • Action 22 (“PICKUP”) picks up the BOX.

Following this plan, you complete your objective: picking up the BOX in the different room.",0.93125,True,True
unlock_pickup,85,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""LEFT"", ""DROP"", ""RIGHT"", ""PICKUP""]
</actions>

Let's explain the plan step by step:

1. Starting at (4,1) facing UP, the KEY is located at (2,1). First, the agent moves one cell north to (3,1). Now, with the agent still facing UP, the cell in front, (2,1), contains the KEY.  
   • Action: ""MOVE""

2. The agent then executes ""PICKUP"" to collect the KEY from (2,1).  
   • Action: ""PICKUP""

3. Now holding the KEY and at (3,1) facing UP, the agent needs to head toward the door at (3,5) (which lies in the east direction). So the agent turns right (now facing EAST).  
   • Action: ""RIGHT""

4. The agent moves eastward three times to progress from (3,1) → (3,2) → (3,3) → (3,4).  
   • Actions: ""MOVE"", ""MOVE"", ""MOVE""

5. At (3,4) facing EAST, the cell ahead (3,5) is the locked DOOR. With the KEY in hand, the agent uses ""UNLOCK"" to open the door.  
   • Action: ""UNLOCK""

6. The agent moves into the door cell (3,5), continuing eastward through the now-unlocked doorway. Then proceeds further eastward to reach (3,6), (3,7), and (3,8).  
   • Actions: ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE""

7. The BOX is located at (1,8) in the opposite room. From (3,8) facing EAST, the agent turns left to face NORTH.  
   • Action: ""LEFT""

8. Moving north from (3,8) lands the agent at (2,8) still facing NORTH.  
   • Action: ""MOVE""

9. Since the agent is still holding the KEY and cannot pick up the BOX while holding another object, and (1,8) (in front if still facing north) has the BOX, the agent needs to drop the KEY first. An adjacent empty cell is (2,7). To drop there, the agent turns left (from NORTH to WEST).  
   • Action: ""LEFT""

10. With the agent now facing WEST and (2,7) empty, ""DROP"" places the KEY into that cell.  
    • Action: ""DROP""

11. The agent then turns right (from WEST back to NORTH) so the BOX at (1,8) is directly in front again.  
    • Action: ""RIGHT""

12. Finally, ""PICKUP"" is executed to grab the BOX from (1,8).  
    • Action: ""PICKUP""

This sequence of actions moves the agent from its starting position, collects the KEY in its room, approaches and unlocks the door to the adjacent room, disposes of the KEY appropriately (to free up the capacity) and finally picks up the BOX located in the other room.",0.946875,True,True
unlock_pickup,86,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Step-by-step explanation:
1. You start at (4,2) facing RIGHT. The KEY is located at (3,2) (directly above). To face the KEY, you turn LEFT (RIGHT → UP).
2. With the KEY directly in front, you PICKUP the KEY.
3. Now holding the KEY, you need to reach the DOOR at (4,5) on your right. From your current facing UP, turning RIGHT makes you face EAST.
4. Facing EAST, you MOVE from (4,2) to (4,3).
5. MOVE again from (4,3) to (4,4). Now, the cell directly in front—(4,5)—contains the DOOR.
6. With the DOOR in front and holding the KEY, you UNLOCK the door.
7. After unlocking, you MOVE into the door cell at (4,5).
8. Continuing EAST, you MOVE from (4,5) to (4,6). At this point, you are in the room containing the BOX.
9. The BOX is located at (1,6) which is to the north of (2,6). To reach an adjacent position, turn LEFT (from EAST to NORTH).
10. MOVE north from (4,6) to (3,6).
11. MOVE north from (3,6) to (2,6).
12. Finally, with the BOX in the cell directly in front (1,6) while you face NORTH, you PICKUP the BOX.

This sequence successfully completes the objective.",0.0,False,True
unlock_pickup,87,cot,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>

Step-by-step Explanation:

1. Starting at (4,1) facing LEFT:
   - ""RIGHT"": turn from LEFT to face UP.
2. ""MOVE"": go up from (4,1) to (3,1).
3. ""MOVE"": go up from (3,1) to (2,1).
4. ""RIGHT"": from facing UP, turn right to face RIGHT.
5. ""PICKUP"": with agent at (2,1) facing RIGHT, the cell ahead (2,2) contains the KEY.
   The agent picks up the KEY.

6. Now holding the KEY, still at (2,1) and facing RIGHT, we need to reach the door at (3,5). 
   ""MOVE"": from (2,1) to (2,2).
7. ""MOVE"": from (2,2) to (2,3).
8. ""MOVE"": from (2,3) to (2,4).

9. ""RIGHT"": while facing RIGHT, turn right to face DOWN.
10. ""MOVE"": from (2,4) to (3,4) (cell left-adjacent to door).
11. ""LEFT"": from DOWN, turn left to face RIGHT (toward the door at (3,5)).
12. ""UNLOCK"": unlock the door at (3,5) (adjacent cell in front) using the KEY.

13. ""MOVE"": step into the (formerly door) cell at (3,5).

14. Now in the adjacent room where the BOX is located (at (1,8)):
    ""MOVE"": from (3,5) to (3,6).
15. ""MOVE"": from (3,6) to (3,7).
16. ""MOVE"": from (3,7) to (3,8).

17. ""LEFT"": while facing RIGHT, turn left to face UP.
18. ""MOVE"": from (3,8) to (2,8); now the cell in front (1,8) contains the BOX.
19. ""PICKUP"": pick up the BOX from the cell directly ahead.

This sequence completes the objective of picking up the BOX located in a different room.",0.0,False,True
unlock_pickup,88,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Let's explain the plan step by step:

1. Starting at row3 col3 facing RIGHT, the agent first turns LEFT to face UP.
2. Then the agent MOVEs forward to row2 col3.
3. Turning RIGHT, the agent now faces EAST so that the KEY at row2 col4 is directly ahead.
4. The agent executes PICKUP to collect the KEY.
5. With the KEY in hand, the agent MOVEs forward (while still at row2 col3 facing EAST) into row2 col4.
6. Next, a RIGHT turn makes the agent face DOWN.
7. A MOVE brings the agent down to row3 col4.
8. A LEFT turn changes the facing to RIGHT, aligning with the DOOR at row3 col5.
9. With the KEY adjacent, UNLOCK is executed on the door.
10. The agent then MOVEs into the door at row3 col5, now entering the second room.
11–14. In room2, four consecutive MOVEs drive the agent from row3 col5 to row3 col9.
15. A RIGHT turn reorients the agent from facing RIGHT to facing DOWN.
16. Finally, a PICKUP grabs the BOX from the cell (row4 col9) directly ahead.

This series of actions satisfies the objective to navigate between rooms, unlock the door with the KEY and pick up the BOX.",0.0,False,True
unlock_pickup,89,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""PICKUP""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at row4, col3 facing DOWN, we must get the KEY at row1, col3 without stepping into its cell (since you can only pick up objects from an adjacent cell). First, we turn to face UP by issuing two ""LEFT"" commands. Then, we move two steps upward—from row4, col3 to row3, col3 and then to row2, col3. Now, facing UP, the cell in front (row1, col3) holds the KEY, so we ""PICKUP"" it.

2. With the KEY in hand and at position row2, col3 facing UP, we need to go to the door at row4, col5 (which connects to the room where the BOX is). We turn 180° (two ""LEFT""s) to face DOWN and then move two steps downward to row4, col3. Next, to head east, we turn ""LEFT"" (from DOWN, that makes us face RIGHT) and ""MOVE"" into row4, col4. Now, with the door immediately to our right (row4, col5), we ""UNLOCK"" it using the KEY.

3. After unlocking, we ""MOVE"" into the door cell (row4, col5). However, we cannot pick up the BOX while still holding the KEY. So, we must drop the KEY into an empty adjacent cell. Facing RIGHT (front cell row4, col6 contains the BOX and isn’t empty), we rotate 180° (two ""LEFT""s) so that we face LEFT; then ""DROP"" the KEY into the empty cell at row4, col4.

4. Finally, we need to pick up the BOX at row4, col6. To do this, we reorient from facing LEFT back to facing RIGHT (two ""LEFT""s) and then ""PICKUP"" the BOX from the cell in front (row4, col6).

This sequence of actions meets all the game’s rules and safely accomplishes the objective.",0.940625,True,True
unlock_pickup,9,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
  [""LEFT"", 
   ""MOVE"", 
   ""LEFT"", 
   ""MOVE"", 
   ""MOVE"", 
   ""RIGHT"", 
   ""MOVE"", 
   ""LEFT"", 
   ""PICKUP"", 
   ""LEFT"", 
   ""LEFT"", 
   ""MOVE"", 
   ""RIGHT"", 
   ""MOVE"", 
   ""MOVE"", 
   ""UNLOCK"", 
   ""MOVE"", 
   ""MOVE"", 
   ""MOVE"", 
   ""MOVE"", 
   ""MOVE"", 
   ""RIGHT"", 
   ""MOVE"", 
   ""RIGHT"", 
   ""DROP"", 
   ""LEFT"", 
   ""PICKUP""]
</actions>

----------------------------------------------------
Step‐by‐step explanation:

1. The agent starts at row1, col4 facing UP.  
  • ""LEFT"" turns the agent to face LEFT.  
2. ""MOVE"" brings the agent to (1,3).  
3. ""LEFT"" makes the agent face DOWN.  
4–5. Two ""MOVE"" actions let the agent go from (1,3) to (2,3) then to (3,3).  
6. ""RIGHT"" turns the agent to face LEFT.  
7. ""MOVE"" brings the agent to (3,2).  
8. ""LEFT"" adjusts the orientation to face DOWN so that the cell ahead, (4,2), contains the KEY.  
9. ""PICKUP"" picks up the KEY.  

10–11. With the KEY held and facing DOWN, two ""LEFT"" actions reorient the agent to face UP.  
12. ""MOVE"" goes from (3,2) to (2,2).  
13. ""RIGHT"" turns the agent to face RIGHT.  
14–15. Two ""MOVE"" actions move the agent from (2,2) to (2,3) then to (2,4), adjacent to the door cell at (2,5).  
16. ""UNLOCK"" uses the KEY to unlock the door in front at (2,5).  
17. ""MOVE"" steps into the door cell at (2,5).  

18–21. Four ""MOVE"" actions take the agent through cells (2,6) → (2,7) → (2,8) → (2,9) in the adjacent room.  
22. ""RIGHT"" rotates the agent from facing RIGHT to face DOWN.  
23. ""MOVE"" steps down from (2,9) to (3,9).  

Now at (3,9), the agent is still holding the KEY but needs to pick up the BOX (and cannot hold two objects).  
  To free up its hands, the agent must drop the KEY into an empty cell.  
24. ""RIGHT"" turns the agent from DOWN to face LEFT so that it can drop the KEY into cell (3,8), which is empty.  
25. ""DROP"" leaves the KEY behind.  

Finally, to pick up the BOX located at (4,9):  
26. ""LEFT"" reorients the agent from facing LEFT to face DOWN.  
27. ""PICKUP"" picks up the BOX from the cell directly in front (4,9).

This sequence successfully navigates from the starting room, picks up the KEY to unlock the door, moves into the other room, and finally picks up the BOX as required.",0.915625,True,True
unlock_pickup,90,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
  [""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain the plan step by step:

1. Starting at [1,2] facing RIGHT, we first turn RIGHT to face DOWN.
2. MOVE from [1,2] to [2,2].
3. From [2,2] facing DOWN, the cell ahead ([3,2]) holds the KEY. So we execute PICKUP to grab the KEY (without entering the KEY’s cell).
4. MOVE from [2,2] to [3,2] (now the KEY is in our inventory).
5. Turn LEFT from DOWN to face RIGHT.
6. MOVE from [3,2] to [3,3].
7. MOVE from [3,3] to [3,4]. Now we’re adjacent to the DOOR at [3,5].
8. With the KEY in hand, execute UNLOCK to unlock the door.
9. We now need to free our hands (since we can only hold one object) before picking up the BOX. Turn RIGHT from facing RIGHT to face DOWN.
10. DROP the KEY into the empty cell [4,4] (directly in front while facing DOWN).
11. To approach the BOX, turn LEFT to face RIGHT.
12. MOVE into the door cell [3,5].
13. Finally, from [3,5] facing RIGHT, PICKUP the BOX located at [3,6].

This sequence meets all the rules and achieves the goal of picking up the BOX located in the other room.",0.959375,True,True
unlock_pickup,91,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Here's the step‐by‐step reasoning:

1. With the agent starting at [1,3] facing RIGHT, we first need to go to the KEY at [4,1]. Since the KEY is to the southwest, we face WEST first. Two LEFT turns change the direction from RIGHT to WEST.
2. A MOVE takes us from [1,3] to [1,2]. Then a LEFT turn (from WEST) directs us SOUTH.
3. Three consecutive MOVEs take us from [1,2] → [2,2] → [3,2] → [4,2].
4. A RIGHT turn (from SOUTH) points us back WEST so that the cell in front ([4,1]) has the KEY. A PICKUP collects the KEY.
5. Now, with the KEY in hand (and still at [4,2]), we must reach the door at [3,5] to unlock it. A RIGHT turn from WEST makes us face NORTH.
6. A MOVE takes us from [4,2] to [3,2]. Then a RIGHT turn (from NORTH) sets our direction to EAST.
7. Two MOVEs take us from [3,2] to [3,3] and then to [3,4]. Standing at [3,4] facing EAST, the door at [3,5] is directly ahead.
8. An UNLOCK action (while holding the KEY) unlocks the door. A subsequent MOVE enters the door cell ([3,5]), switching into the room with the BOX.
9. In the right room the BOX is located at [1,9]. From [3,5] still facing EAST, three MOVEs take us to [3,6] → [3,7] → [3,8].
10. A LEFT turn (from EAST) points us NORTH. Two MOVEs then bring us from [3,8] to [2,8] and finally to [1,8].
11. At [1,8] facing NORTH, a RIGHT turn makes us face EAST so that the BOX at [1,9] is directly in front.
12. A final PICKUP action collects the BOX.

This sequence of actions accomplishes the objective step by step.",0.0,False,True
unlock_pickup,92,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's the step‐by‐step reasoning:

1. Starting at (4,1) facing DOWN, we need to get the KEY located at (3,2). To face UP (so we can approach the key’s cell from the left), we turn ""LEFT"" then ""LEFT"" (DOWN → RIGHT → UP).  
2. ""MOVE"" brings us into (3,1) facing UP.  
3. Then ""RIGHT"" turns our orientation to EAST so that the cell (3,2) containing the KEY is directly in front.  
4. ""PICKUP"" collects the KEY from (3,2).  
5. With the KEY in hand, we must unlock the door that separates the rooms. We plan a route to approach the door at (2,5) from its left side.  
6. ""MOVE"" three times (eastward) takes us from (3,1) → (3,2) → (3,3) → (3,4).  
7. ""LEFT"" changes our direction from EAST to NORTH.  
8. ""MOVE"" advances us from (3,4) to (2,4), which is immediately left of the door.  
9. ""RIGHT"" rotates our orientation to EAST so that the door at (2,5) is in front.  
10. ""UNLOCK"" unlocks the door using the KEY.  
11. Now, with the door unlocked, ""MOVE"" takes us into the door cell at (2,5), and another ""MOVE"" brings us to (2,6).  
12. Facing EAST, ""PICKUP"" collects the BOX located in the cell (2,7).

This sequence successfully enables the agent to pick up the BOX located in the other room.",0.0,False,True
unlock_pickup,93,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain the reasoning step by step:

1. Starting at (1,4) facing UP, the KEY is at (2,2) in the left-room. We first need to grab the KEY so you can later unlock the door.
   - Action1: ""LEFT"" turns you from UP to LEFT.
   - Action2: ""MOVE"" moves you to (1,3).
   - Action3: ""MOVE"" moves you to (1,2).
   - Action4: ""LEFT"" now turns you from LEFT to DOWN, so the cell in front is (2,2) where the KEY is.
   - Action5: ""PICKUP"" picks up the KEY (remember, you do not move into the KEY’s cell—you remain at (1,2) with the KEY in hand).

2. Now holding the KEY, you need to head to the door (the connection between the two rooms). The door is at (4,5) and can be unlocked only while holding the KEY. You plan to approach it from the left room by standing at (4,4) with a view to the right.
   - Action6: ""MOVE"" from (1,2) down to (2,2) (now that cell is empty since the KEY was picked up).
   - Action7: ""MOVE"" takes you further down to (3,2).
   - Action8: ""LEFT"" changes direction from DOWN to RIGHT.
   - Action9: ""MOVE"" moves you from (3,2) to (3,3).
   - Action10: ""MOVE"" moves you from (3,3) to (3,4).
   - Action11: ""RIGHT"" rotates you from RIGHT to DOWN.
   - Action12: ""MOVE"" takes you down to (4,4).

3. At (4,4) you need to face the door at (4,5) so you can unlock it.
   - Action13: ""LEFT"" rotates you from DOWN to RIGHT.
   - Action14: ""UNLOCK"" unlocks the door in front (cell (4,5)) with your KEY.

4. You’re still holding the KEY, but since you can only carry one object at a time and your objective is to pick up the BOX, you must drop the KEY. However, you cannot drop into a door cell. So, reposition to drop into an adjacent empty cell.
   - At (4,4) facing RIGHT, you want to drop into the left cell (4,3). To do this, you change orientation:
   - Action15: ""LEFT"" turns you from RIGHT to UP.
   - Action16: ""LEFT"" turns you from UP to LEFT.
   - Action17: ""DROP"" drops the KEY into (4,3).

5. Now that your hands are free, reorient yourself to cross the door. The door cell (4,5) is to your right.
   - From your current orientation (LEFT), turn 180°:
   - Action18: ""LEFT"" rotates you from LEFT to DOWN.
   - Action19: ""LEFT"" rotates you from DOWN to RIGHT.
   - Action20: ""MOVE"" moves you from (4,4) into the door cell (4,5). 
   - Action21: ""MOVE"" further moves you from (4,5) to (4,6) into the right room.

6. In the right room the BOX is at (2,6). To pick it up without moving into its cell, you plan to stand in (3,6) facing UP so that the cell directly ahead (2,6) holds the BOX.
   - Action22: ""LEFT"" turns you from RIGHT to UP.
   - Action23: ""MOVE"" takes you from (4,6) up to (3,6).
   - Action24: ""PICKUP"" picks up the BOX from (2,6).

Following these 24 actions completes your objective.",0.925,True,True
unlock_pickup,94,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Let's explain our reasoning:

1. From the starting position ([1,3] facing UP), we first turn RIGHT twice so that we face DOWN.
2. We then MOVE three times to go from row 1 → row 4 (via [2,3] and [3,3]) arriving at cell [4,3].
3. Facing DOWN at [4,3], we turn RIGHT (which from DOWN makes us face WEST) so that the KEY at [4,1] is in our line of sight.
4. A MOVE from [4,3] takes us to [4,2], and then with the KEY immediately in front (at [4,1]) we do PICKUP.
5. Now holding the KEY at [4,2] (facing WEST), we need to reach the door at [1,5]. We turn RIGHT (from WEST, this makes us face NORTH) and then MOVE three times to climb from row 4 up to row 1 (via cells [3,2], [2,2], [1,2]).
6. At [1,2] facing NORTH, we turn RIGHT to face EAST, and then MOVE twice to arrive at [1,4]. Here the DOOR at [1,5] is directly ahead.
7. We then UNLOCK the door while holding the KEY.
8. Since we cannot hold two objects at once and our goal is to pick up the BOX later, we reposition: turning RIGHT (from EAST to SOUTH) so that the adjacent cell [2,4] is empty, and then DROP the KEY there.
9. To head through the door, we reorient: from [1,4] (now facing SOUTH) we turn LEFT (to face EAST) and MOVE twice—first stepping into the door cell [1,5] (now unlocked) and then into [1,6] in the right room.
10. Finally, from [1,6] facing EAST, we turn RIGHT so that we face SOUTH. Two consecutive MOVEs take us from [1,6] to [2,6] and then to [3,6]. With the BOX at [4,6] directly ahead, a final PICKUP collects the BOX.

This sequence of 25 actions completes the objective.",0.921875,True,True
unlock_pickup,95,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""DROP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Step-by-step reasoning:

1. The agent starts at [4][4] facing DOWN. We first need to reach the KEY at [2][2] (which is in the left room).  
   • From DOWN, a RIGHT turn makes the agent face WEST.  
   • A MOVE takes the agent from [4][4] to [4][3].

2. Now from [4][3] still facing WEST, a RIGHT turn makes the agent face NORTH.  
   • A MOVE takes the agent from [4][3] to [3][3].  
   • Another MOVE takes the agent from [3][3] to [2][3].

3. At [2][3] facing NORTH, a LEFT turn makes the agent face WEST so the KEY cell ([2][2]) is directly in front.  
   • A PICKUP collects the KEY.

4. With the KEY in hand at [2][3] and facing WEST, we need to unlock the DOOR at [2][5] (located in the wall between the two rooms).  
   • Two RIGHT turns (from WEST to NORTH, then NORTH to EAST) orient the agent to face EAST.  
   • A MOVE goes from [2][3] to [2][4] where the door’s adjacent cell is in front.  
   • An UNLOCK action uses the KEY (which must be held) to unlock the DOOR that is directly ahead ([2][5]). 

5. Having unlocked the door, the agent now proceeds into the right room where the BOX is located at [1][7].  
   • A MOVE takes the agent from [2][4] to [2][5] (the door cell, now open).  
   • Another MOVE goes from [2][5] to [2][6].  

6. Since the agent cannot pick up the BOX while holding the KEY, the KEY must be dropped in a valid empty adjacent cell.  
   • With the agent at [2][6] facing EAST, the cell directly in front ([2][7]) is empty, so a DROP action places the KEY there.

7. Now free-handed, the agent navigates to pick up the BOX.  
   • A LEFT turn from EAST makes the agent face NORTH.  
   • A MOVE from [2][6] goes to [1][6].  
   • A RIGHT turn from NORTH reorients the agent to EAST, so that the BOX at [1][7] is directly ahead.  
   • Finally, a PICKUP collects the BOX from [1][7].

This sequence of 18 actions satisfies the objective: retrieve the BOX located in the other room.",0.94375,True,True
unlock_pickup,96,cot,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>

Let's think step by step.","Let's break down the puzzle:

1. The KEY is at (row1, col3) and you start at (1,1) facing UP. You can’t directly move into a cell with an object (like the KEY) so you should approach it from an adjacent cell. The plan is to go to (1,2) and, while facing RIGHT (so that (1,3) is in front), use PICKUP.

2. From (1,1) (facing UP), you first turn RIGHT to face EAST, then MOVE from (1,1) to (1,2). Now, with (1,3) in front, you do PICKUP to take the KEY.

3. Once holding the KEY, you must cross to the other room in which the BOX is located. The door is at (4,5), and only its left side (cell (4,4)) is accessible from the room you’re in (the left room). So our goal is to navigate from (1,2) (after picking up the KEY) to (4,4) such that you eventually face the door.

4. From (1,2) (facing RIGHT), MOVE forward to (1,3) (which is now empty) and then to (1,4). Now you need to head downward. Turning RIGHT when facing RIGHT makes you face DOWN.

5. MOVE three times: from (1,4) to (2,4); then to (3,4); then to (4,4). Now you’re at (4,4) but still facing DOWN. To unlock the door that is immediately to your right at (4,5), turn LEFT (from DOWN, LEFT gives you RIGHT).

6. With the KEY in hand and (4,5) directly in front, UNLOCK the door.

7. Now that the door is unlocked (and thus considered empty), MOVE into it and then continue moving RIGHT through the now accessible second room. The BOX is at (4,9) so you need to position yourself at (4,8) facing RIGHT.

8. Continue by moving from (4,4) (after unlocking) step-by-step: MOVE into (4,5) (door cell), then (4,6), (4,7), and finally (4,8). With (4,9) (the BOX) directly in front, perform PICKUP to grab the BOX.

Here is the complete sequence of actions:

<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,97,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Step-by-step explanation:
1. Starting at [1,1] and facing RIGHT, the cell in front ([1,2]) is empty. First, we ""MOVE"" to [1,2].
2. From [1,2] (still facing RIGHT), we ""MOVE"" to [1,3]. Now we are directly to the left of the key.
3. At [1,3] and still facing RIGHT, the cell ahead ([1,4]) contains the KEY. We ""PICKUP"" the KEY.
4. With the KEY in hand, we ""MOVE"" from [1,3] into the now-empty [1,4].
5. From [1,4] (facing RIGHT), the door at [1,5] is directly in front. We ""UNLOCK"" the door using the KEY.
6. With the door unlocked (and now considered open), we ""MOVE"" from [1,4] to [1,5].
7. We ""MOVE"" from [1,5] to [1,6].
8. We ""MOVE"" from [1,6] to [1,7].
9. We ""MOVE"" from [1,7] to [1,8], positioning us immediately left of the BOX.
10. Finally, at [1,8] facing RIGHT, the BOX at [1,9] is directly in front, and we perform a ""PICKUP"" to grab it.

This sequence of actions accomplishes the objective of picking up the BOX located in the other room.",0.0,False,True
unlock_pickup,98,cot,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>

Let's think step by step.","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""RIGHT"", ""RIGHT"", ""DROP"", ""LEFT"", ""LEFT"", ""PICKUP""]
</actions>

Step-by-step explanation:

1. Starting at row4, col2 facing RIGHT, we want to reach the KEY at row3, col1. To leave from col2 to col1 (west), we need to face LEFT. Since our agent is facing RIGHT, we turn LEFT twice:
   - ""LEFT"" → now facing UP.
   - ""LEFT"" → now facing LEFT.
2. ""MOVE"": From row4, col2 to row4, col1.
3. At row4, col1 facing LEFT, the KEY (at row3, col1) is not immediately in front because we need to face UP to have the KEY immediately ahead. So we turn ""RIGHT"" to change orientation from LEFT to UP.
4. ""PICKUP"": With the agent at row4, col1 facing UP, the cell directly ahead (row3, col1) has the KEY, so we pick it up.
5. ""MOVE"": Now move upward from row4, col1 to row3, col1 (the cell where the KEY was—but it has now been picked up, so it is empty).
6. ""MOVE"": Continue moving upward from row3, col1 to row2, col1.
7. At row2, col1 and still facing UP, we now need to head toward the door. The door is at row2, col5, lying to our right. We turn ""RIGHT"" (from UP, right turn gives RIGHT).
8. ""MOVE"": Advance from (2,1) to (2,2).
9. ""MOVE"": Then from (2,2) to (2,3).
10. ""MOVE"": And from (2,3) to (2,4).
11. ""UNLOCK"": Facing RIGHT from (2,4), the door at (2,5) is directly ahead. Use the KEY to unlock it.
12. ""MOVE"": Step into the door (cell (2,5)); now you are in the room that contains the BOX.
13. At (2,5) facing RIGHT, the BOX is in (2,6) but you are still holding the KEY. Since you cannot hold two objects, you must drop the KEY first.
    To drop the KEY, find an empty adjacent cell:
    - Facing RIGHT would place the dropped object in front at (2,6), but that cell contains the BOX.
    - Therefore, reorient by turning ""RIGHT"" twice so that you face LEFT (with front cell (2,4) which is empty).
14. ""RIGHT"": Turn from RIGHT to DOWN.
15. ""RIGHT"": Then turn from DOWN to LEFT.
16. ""DROP"": Drop the KEY into the empty cell at (2,4).
17. Now you need to pick up the BOX at (2,6). You are at (2,5) and currently facing LEFT. To face the BOX, turn ""LEFT"" twice:
    - ""LEFT"": From LEFT to SOUTH.
    - ""LEFT"": From SOUTH to EAST.
18. ""PICKUP"": With the agent at (2,5) facing EAST, the cell ahead (2,6) contains the BOX. Pick it up to complete the objective.

This sequence of steps fulfills the task: switching rooms, obtaining the KEY to unlock the door, and finally picking up the BOX.

Happy gaming!",0.940625,True,True
unlock_pickup,99,cot,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>

Let's think step by step.","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Let’s explain the reasoning step by step:

1. We start at row3 col3 facing DOWN. Since the key lies at row1 col3, we first turn 180° (with two LEFT turns) so that we face UP.
   - Actions: ""LEFT"", ""LEFT"".

2. Now from row3 col3 facing UP, we move one cell forward to row2 col3.
   - Action: ""MOVE"".

3. With the agent at row2 col3 and still facing UP, the cell directly ahead (row1 col3) holds the KEY. Use ""PICKUP"" to grab the KEY.
   - Action: ""PICKUP"".

4. With the KEY in hand, we need to unlock a door that separates our room from the BOX room. The door is at row4 col5. To reach a cell adjacent to the door:
   - Turn right (from facing UP to face EAST) so that we can move toward the open area.
     - Action: ""RIGHT"".
   - Move East from row2 col3 to row2 col4.
     - Action: ""MOVE"".
   - Turn right to face SOUTH, because our target (row4 col4) is further down.
     - Action: ""RIGHT"".
   - Move SOUTH from row2 col4 to row3 col4.
     - Action: ""MOVE"".
   - Move SOUTH again from row3 col4 to row4 col4.
     - Action: ""MOVE"".

5. Now the agent is at row4 col4 facing SOUTH and is adjacent (to the East) to the DOOR (row4 col5). The agent needs to face EAST:
   - Turn LEFT (from SOUTH to EAST).
     - Action: ""LEFT"".
   - Use ""UNLOCK"" while facing the door to open it (the door is unlocked but still considered a door cell, so dropping is not allowed there).
     - Action: ""UNLOCK"".

6. Since we are still holding the KEY and the rules only allow one object at a time, we must drop the KEY into an empty adjacent cell before picking up the BOX later. Here, from row4 col4 while facing EAST, we want to drop the key into a safe cell. We opt to drop it by turning to face NORTH (so that the drop happens into row3 col4, which is empty).
   - Turn LEFT from EAST to face NORTH.
     - Action: ""LEFT"".
   - Drop the KEY.
     - Action: ""DROP"".

7. Next, we need to move into the next room to get the BOX which resides at row3 col6 (in the right room). From our current position (row4 col4 facing NORTH), we plan to cross through the unlocked door:
   - Turn RIGHT from NORTH to face EAST.
     - Action: ""RIGHT"".
   - Move from row4 col4 into the door cell at row4 col5.
     - Action: ""MOVE"".
   - Move further EAST from row4 col5 to row4 col6.
     - Action: ""MOVE"".

8. Now in the right room at row4 col6 and still facing EAST, we must face NORTH to approach the BOX which is in row3 col6. Turn LEFT (from EAST to NORTH).
   - Action: ""LEFT"".

9. Finally, with the BOX cell (row3 col6) directly in front, pick up the BOX.
   - Action: ""PICKUP"".

This sequence of 18 actions ensures the agent collects the KEY, uses it to unlock the door, drops the KEY so that it may pick up the BOX, and finally picks up the BOX from the other room.",0.94375,True,True
unlock_pickup,0,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", 
 ""PICKUP"", 
 ""MOVE"", 
 ""RIGHT"", 
 ""MOVE"", 
 ""LEFT"", 
 ""UNLOCK"", 
 ""LEFT"", 
 ""LEFT"", 
 ""DROP"", 
 ""LEFT"", 
 ""LEFT"", 
 ""MOVE"", 
 ""MOVE"", 
 ""LEFT"", 
 ""MOVE"", 
 ""MOVE"", 
 ""MOVE"", 
 ""RIGHT"", 
 ""MOVE"", 
 ""PICKUP""]
</actions>

Here's the reasoning:

1. The agent starts at [3,3] facing UP. To pick up the KEY in [3,4] (to east), the agent first turns RIGHT so that it faces east.
2. With the KEY in the cell in front, the agent uses PICKUP to collect it.
3. Now holding the KEY, the agent moves east into [3,4].
4. To head toward the door (which will be unlocked from the south side of the KEY room), the agent turns RIGHT (east → south) and then moves into [4,4].
5. The agent now needs to unlock the door located at [4,5] (to the east of [4,4]). Since from facing south a LEFT turn makes the agent face east, the agent turns LEFT.
6. With the door directly ahead, the UNLOCK action is executed (the KEY must be held to unlock the door).
7. However, because the agent may only hold one object and the final objective is to pick up the BOX later (located in the other room) the agent must first drop the KEY. To drop the KEY safely, the agent reorients: from east, two LEFT turns (east → north → west) point to the west, where cell [4,3] is empty.
8. The agent uses DROP to leave the KEY behind.
9. Now needing to cross back through the door, the agent turns from facing west back to east by two LEFT turns (west → south → east).
10. A MOVE then carries the agent from [4,4] into the door cell [4,5], and another MOVE takes the agent further east into [4,6] (inside the BOX room).
11. To reach the BOX at [1,8] the agent must go north. A LEFT turn (from east) makes the agent face north.
12. Three consecutive MOVEs take the agent north from [4,6] → [3,6] → [2,6] → [1,6].
13. Facing north at [1,6], the agent turns RIGHT to face east.
14. A MOVE positions the agent at [1,7] so that the BOX at [1,8] is directly in front.
15. Finally, a PICKUP is executed to collect the BOX.

This sequence satisfies all movement and game rules while achieving the objective.",0.934375,True,True
unlock_pickup,1,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", ""AGENT"", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""DROP"", ""LEFT"", ""PICKUP""]
</actions>

Here's the explanation of the plan:

1. Starting at (1,4) facing DOWN, we first turn RIGHT so that we face WEST (remember: from DOWN, RIGHT turn points WEST).  
2. We MOVE from (1,4) to (1,3). Now, facing WEST, the cell immediately ahead is (1,2) which contains the KEY.  
3. We PICKUP the KEY from (1,2). (Now we are holding the KEY, which we will need to unlock the door.)

4. To head toward the door at (2,5), we need to go down – so from our current WEST orientation, we turn LEFT which makes us face SOUTH.  
5. We MOVE from (1,3) to (2,3).  
6. Now, to progress toward the door, we want to go east. From SOUTH, turning LEFT makes us face EAST.  
7. We MOVE from (2,3) to (2,4).  

8. Facing EAST at (2,4), the cell ahead (2,5) is the DOOR. We UNLOCK it using our KEY.
9. We MOVE into the door cell (now at (2,5)), entering the second room.
10. We MOVE further EAST from (2,5) to (2,6). At this moment we are still holding the KEY.

Since we can hold only one object at a time and the objective is to pick up the BOX, we need to drop the KEY in an empty cell.  
11. Still at (2,6) and facing EAST, we DROP the KEY into (2,7) (an empty cell).

Now, the BOX is located at (1,6) in the second room.  
12. From (2,6) (facing EAST), we turn LEFT so as to face NORTH.  
13. Finally, we PICKUP the BOX from (1,6) (which is directly in front of us).

This sequence fulfills the objective of retrieving the BOX from the other room.",0.959375,True,True
unlock_pickup,10,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here’s the reasoning:

1. Starting at (2,4) facing UP. We need to pick up the KEY, which is in the cell (3,4), directly “below.” Since the action PICKUP works on the cell immediately in front, we first turn from UP to DOWN by doing “RIGHT” then “RIGHT.”
2. With the agent now facing DOWN, the cell in front ((3,4)) holds the KEY. We execute “PICKUP” (the agent remains at (2,4) but now is holding the KEY).
3. Next we need to get to the door so we can unlock it. We plan to approach the door at (4,5) from the left by standing at (4,4) and facing RIGHT. To get there from (2,4), the agent moves down: first “MOVE” to (3,4) then “MOVE” to (4,4).
4. At (4,4) facing DOWN, we want the door to be directly in front. We turn LEFT (from DOWN, left turn gives RIGHT). Now the cell in front, (4,5), is the DOOR.
5. While holding the KEY, we “UNLOCK” the door.
6. After unlocking, since the agent is still holding the KEY (and can’t pick up the BOX while holding something), we drop the KEY in an adjacent empty cell. From (4,4) facing RIGHT, dropping isn’t allowed into the door cell, so we turn LEFT (changing our facing from RIGHT to UP) and then “DROP” the KEY into (3,4) (which is empty).
7. With an empty hand, we now reorient to re-approach the door: from (4,4) facing UP, a “RIGHT” turn makes us face RIGHT again.
8. We “MOVE” from (4,4) into the door cell at (4,5) (which is now unlocked/empty).
9. Next, we “MOVE” from (4,5) to (4,6) to enter the second room.
10. The BOX is located at (1,6). To pick it up, we must remain outside its cell and use PICKUP on the adjacent cell. From (4,6) (facing RIGHT), we turn “LEFT” to face UP.
11. We “MOVE” upward: first from (4,6) to (3,6), then “MOVE” from (3,6) to (2,6). Now the cell in front (at (1,6)) holds the BOX.
12. Finally, we execute “PICKUP” to grab the BOX.

This sequence of 16 actions satisfies all constraints and achieves the goal.",0.95,True,True
unlock_pickup,11,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's the reasoning:

1. You start at (2,3) facing LEFT. First, you need to get the KEY located at (4,3) without stepping into its cell. Since the KEY is directly below (3,3), you turn LEFT to face DOWN and then MOVE to (3,3). From here, facing DOWN, the cell in front ((4,3)) contains the KEY, so you execute PICKUP.

2. Now holding the KEY at (3,3) (facing DOWN), you want to reach the door at (1,5) so you can unlock it. To get there, you first reorient from DOWN to UP. From DOWN, turning LEFT twice makes your new facing UP. Then you MOVE twice: from (3,3) to (2,3), then from (2,3) to (1,3). Now at (1,3) facing UP, you need to approach the door from the left. A single RIGHT turn (from UP) makes you face RIGHT; then a MOVE takes you from (1,3) to (1,4). With the door directly in front at (1,5), you execute UNLOCK (using your KEY).

3. With the door unlocked, you pass through it by moving into cell (1,5). Now you’re in the right room where the BOX is located at (2,9). From (1,5) facing RIGHT, you move to (1,6). Then, turning RIGHT (from RIGHT, a turn RIGHT makes you face DOWN), you MOVE from (1,6) to (2,6). Next, a LEFT turn (from DOWN) makes you face RIGHT. Two MOVEs from (2,6) bring you to (2,7) then (2,8). Now the BOX, at (2,9), is directly in front so you PICKUP the BOX.

This sequence meets all the requirements while navigating rooms, using the KEY to unlock the door, and finally picking up the BOX.",0.0,False,True
unlock_pickup,12,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>

Below is an explanation of the planned solution:

1. Starting at [3,2] facing DOWN, we want to pick up the KEY at [2,2]. Since the KEY lies directly above, we first turn twice (LEFT, LEFT) so that we face UP. Then we execute ""PICKUP"" to collect the KEY from the cell in front (at [2,2]).

2. Now holding the KEY (which is needed for unlocking the door), we must later drop it before picking up the BOX (since only one object can be held at a time). Our next goal is to unlock the door at [3,5]. To do that, we need to stand adjacent to the door with the door in front of us.  
   • From [3,2] (facing UP), turning RIGHT makes us face RIGHT.  
   • We then ""MOVE"" twice (first to [3,3] then to [3,4]) so that from [3,4] facing RIGHT, the door at [3,5] is directly in front.

3. We use ""UNLOCK"" (while still holding the KEY) to unlock the door.

4. Before proceeding, we must free our hands to pick up the BOX that is our objective. At [3,4] (currently facing RIGHT), we choose to drop the KEY into an adjacent empty cell. We cannot drop into the door cell, so we turn LEFT (from RIGHT to UP) so that the adjacent cell in front ([2,4]) is empty, and then ""DROP"" the KEY there.

5. With empty hands, we can now cross the unlocked door:  
   • We turn RIGHT (from UP to RIGHT) so that the door cell at [3,5] lies in front, and ""MOVE"" into it.  
   • We ""MOVE"" again to get from [3,5] into [3,6]—entering the right room where the BOX is located.

6. Finally, the BOX is at [1,6]. To pick it up, we position ourselves so that the BOX is in the cell directly in front of us.  
   • At [3,6] (facing RIGHT), we turn LEFT to face UP.  
   • We then ""MOVE"" from [3,6] to [2,6]. Now, with us at [2,6] facing UP, the BOX at [1,6] lies in the adjacent cell in front.  
   • We execute ""PICKUP"" to retrieve the BOX.

This sequence of 15 actions meets all the rules of the environment and achieves the goal of picking up the BOX located in a different room.",0.953125,True,True
unlock_pickup,13,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
  [""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.940625,True,True
unlock_pickup,14,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
  [""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,15,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
  [""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's an explanation of the plan:

1. Starting at (2,4) facing DOWN, we first turn RIGHT so that we face WEST. Then we MOVE twice to go from (2,4) → (2,3) → (2,2).  
2. From (2,2) (now facing WEST), we turn RIGHT so that we face NORTH. With the KEY at (1,2) directly ahead, we do a PICKUP to acquire the KEY.
3. Holding the KEY, we now need to head to the door. We turn RIGHT (from NORTH to EAST) and MOVE twice: from (2,2) → (2,3) then (2,3) → (2,4). Next, we turn RIGHT to face SOUTH and MOVE twice downward: (2,4) → (3,4) and (3,4) → (4,4).  
4. At (4,4) we want to unlock the door at (4,5). We turn LEFT (from SOUTH to EAST) and then perform UNLOCK while the door cell (4,5) is directly ahead.
5. We still hold the KEY, but to pick up the BOX later we must release it. We reorient so the drop cell isn’t in the corridor to the BOX. From (4,4) (facing EAST), we turn LEFT twice to face WEST (this positions the drop cell at (4,3), which is empty and safe). We then DROP the KEY.
6. Now, to head into the box room without the burden of the KEY blocking our new goal, we turn 180° (by turning LEFT twice) from WEST back to EAST. Then we MOVE forward into the unlocked door cell (4,5) and continue eastward through cells (4,6), (4,7), and (4,8).
7. Finally, at (4,8) facing EAST the BOX is directly in front at (4,9); we execute PICKUP to collect the BOX and complete our objective.

This sequence of 23 actions completes the mission as required.",0.928125,True,True
unlock_pickup,16,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,17,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Here's the reasoning:

1. Starting at (3,2) facing LEFT, the KEY is at (2,1). The easiest adjacent cell to use for picking up the KEY is (3,1) because if you stand there and face UP, the cell in front, (2,1), contains the KEY.
   - ""MOVE"": From (3,2) facing LEFT, move to (3,1).
   - ""RIGHT"": Turn right (from LEFT to UP) so that (2,1) is in front.
   - ""PICKUP"": Picks up the KEY from (2,1).

2. Now holding the KEY, you must unlock the DOOR at (3,5) to enter the room with the BOX. Being in the left room at (3,1), you move east:
   - ""RIGHT"": From facing UP, turn right (to face RIGHT).
   - ""MOVE"": Go from (3,1) to (3,2).
   - ""MOVE"": Go from (3,2) to (3,3).
   - ""MOVE"": Go from (3,3) to (3,4).
   - ""UNLOCK"": With the KEY in hand and facing RIGHT, unlock the DOOR at (3,5).

3. After unlocking, proceed into the right room and navigate to a cell adjacent to the BOX (located at (2,9)). Approaching from directly below is easiest:
   - ""MOVE"": From (3,4) to (3,5) (the unlocked door cell, now passable).
   - ""MOVE"": Go from (3,5) to (3,6).
   - ""MOVE"": Go from (3,6) to (3,7).
   - ""MOVE"": Go from (3,7) to (3,8).
   - ""MOVE"": Go from (3,8) to (3,9).

4. To pick up the BOX (located at (2,9)), adjust your direction:
   - ""LEFT"": Turn left so that your facing direction changes from RIGHT to UP (making (2,9) directly in front).
   - ""PICKUP"": Pick up the BOX from (2,9).

This sequence of actions successfully collects the KEY, unlocks the door, enters the room with the BOX, and picks up the BOX.",0.0,False,True
unlock_pickup,18,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""RIGHT"", ""RIGHT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""PICKUP""]
</actions>",0.940625,True,True
unlock_pickup,19,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,2,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions> 

Explanation:
1. Start at (1,1) facing LEFT. First, turn left to face DOWN.
2. MOVE three times to go from (1,1) down to (4,1).
3. Turn left to face RIGHT.
4. MOVE to (4,2); now with the KEY at (4,3) directly in front, use PICKUP.
5. With the KEY in hand at (4,2) facing RIGHT, MOVE twice to reach (4,4) – standing immediately left of the DOOR at (4,5). Then use UNLOCK to open the door.
6. Still holding the KEY, turn left (now facing UP) and DROP the KEY into cell (3,4) (an empty, non-door cell) so that you’re no longer holding anything.
7. Turn right to face the DOOR again, MOVE into the unlocked door cell (4,5) and then MOVE to (4,6).
8. With the BOX at (4,7) directly ahead, use PICKUP to grab it.

This sequence satisfies all rules and achieves the objective of picking up the BOX located in the other room.",0.95,True,True
unlock_pickup,20,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,21,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Explanation:
1. Starting at (4,1) facing LEFT, the agent turns RIGHT to face UP.
2. MOVE advances from (4,1) to (3,1).
3. TURN RIGHT to face RIGHT.
4. MOVE from (3,1) to (3,2) so that the KEY (at (3,3)) is immediately ahead.
5. PICKUP picks up the KEY from the cell (3,3).
6. LEFT turns from RIGHT to UP.
7. MOVE from (3,2) to (2,2).
8. RIGHT turns from UP to face RIGHT.
9. MOVE from (2,2) to (2,3).
10. MOVE from (2,3) to (2,4); now the agent is adjacent to the DOOR (at (2,5)).
11. UNLOCK unlocks the door (while holding the KEY).
12. LEFT rotates from RIGHT to UP.
13. DROP leaves the KEY in cell (1,4) (an empty adjacent cell) so that the agent is free to pick up the BOX later.
14. RIGHT turns from UP to face RIGHT, aligning with the DOOR.
15. MOVE enters the door cell at (2,5) (now unlocked) from the left room.
16. MOVE continues from (2,5) to (2,6) into the right room.
17. RIGHT turns the agent from RIGHT to face DOWN.
18. MOVE advances from (2,6) to (3,6).
19. MOVE advances from (3,6) to (4,6).
20. LEFT turns from DOWN to face RIGHT.
21. PICKUP picks up the BOX from cell (4,7) (which is directly in front).

This sequence accomplishes the objective: the agent collects the KEY, unlocks the door, drops the KEY (so as not to be holding an object), passes through to the other room, and finally picks up the BOX.",0.934375,True,True
unlock_pickup,22,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Here's the reasoning:

1. Starting at (1,1) facing RIGHT, the KEY is at (3,3). Since you may not step into a cell with an object, you must position yourself adjacent and then use PICKUP. So:
   - ""MOVE"" takes you from (1,1) to (1,2).
   - ""RIGHT"" rotates you from facing RIGHT to facing DOWN.
   - ""MOVE"" moves you from (1,2) down to (2,2).
   - ""MOVE"" moves you from (2,2) down to (3,2).
   - ""LEFT"" rotates you from DOWN to RIGHT so that (3,3) (where the KEY is) lies directly ahead.
   - ""PICKUP"" picks up the KEY from (3,3).

2. Next you must reach the DOOR at (4,5) to unlock it. To stand at (4,4) facing RIGHT (with the door directly in front):
   - ""RIGHT"" turns you from facing RIGHT to facing DOWN.
   - ""MOVE"" moves you from (3,2) down to (4,2).
   - ""LEFT"" rotates you from DOWN to RIGHT.
   - ""MOVE"" moves you from (4,2) to (4,3).
   - ""MOVE"" moves you from (4,3) to (4,4).
   - ""UNLOCK"" unlocks the DOOR at (4,5) while you are holding the KEY.
   - ""MOVE"" enters the now-unlocked DOOR cell at (4,5).

3. Finally, navigate in the right room to pick up the BOX at (1,8). The best approach is to position yourself at (1,7) facing RIGHT so that the BOX is directly in front:
   - ""MOVE"" from (4,5) to (4,6) (moving right deeper into the right room).
   - ""LEFT"" rotates you from RIGHT to UP.
   - ""MOVE"" moves you from (4,6) to (3,6).
   - ""MOVE"" moves you from (3,6) to (2,6).
   - ""MOVE"" moves you from (2,6) to (1,6).
   - ""RIGHT"" rotates you from UP to RIGHT.
   - ""MOVE"" moves you from (1,6) to (1,7).
   - ""PICKUP"" picks up the BOX from (1,8).

This sequence of actions satisfies the rules and accomplishes the goal of obtaining the BOX from the other room.",0.0,False,True
unlock_pickup,23,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""DROP"", ""LEFT"", ""PICKUP""]
</actions>

Here's the reasoning:

1. Starting at (4,2) facing DOWN, the key is at (4,4) (to your right). So first turn LEFT to face RIGHT.
2. MOVE from (4,2) to (4,3).
3. With the agent now at (4,3) facing RIGHT, the KEY is directly in front (at (4,4)), so use PICKUP to grab it.
4. Now, to reach the door at (1,5) (in the other room), navigate upward. From (4,3) facing RIGHT, turn LEFT to face UP.
5.–7. MOVE upward three times: from (4,3) to (3,3), then to (2,3), then to (1,3).
8. At (1,3) facing UP, turn RIGHT so you face RIGHT; then the door at (1,5) lies ahead (with the cell at (1,4) free and door in front from there).
9. MOVE from (1,3) to (1,4).
10. With the door now directly ahead and holding the KEY, UNLOCK the door.
11. MOVE into the door cell: from (1,4) to (1,5). At this point you’re in the second room (the one containing the BOX) but you’re still holding the KEY.
12. MOVE from (1,5) to (1,6) to get closer to the BOX.
13. Since you can’t PICKUP the BOX while holding the KEY, reposition to drop the KEY. At (1,6) facing RIGHT, turn RIGHT to face DOWN.
14. DROP the KEY into the cell in front, which is (2,6) (an empty valid cell).
15. Now, with empty hands, turn LEFT from facing DOWN so you face RIGHT.
16. Finally, with (1,7) (the BOX) directly in front, use PICKUP to grab the BOX.

This sequence meets all the rules of the grid world puzzle.",0.95,True,True
unlock_pickup,24,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""DROP"", ""RIGHT"", ""PICKUP""]
</actions>

Here's the reasoning:

1. Starting at (3,3) facing LEFT, turn RIGHT to face UP.
2. With the KEY located at (2,3) (directly in front when facing UP), perform PICKUP.
3. MOVE from (3,3) to (2,3).
4. Turn RIGHT (from UP to RIGHT) to head toward the door.
5. MOVE from (2,3) to (2,4) so that the DOOR (at (2,5)) is directly in front.
6. UNLOCK the DOOR (while holding the KEY) at (2,5).
7. MOVE into the door cell at (2,5).
8. MOVE right to (2,6).
9. MOVE right to (2,7).
10. MOVE right to (2,8). (Now the BOX at (2,9) is directly in front; however, you're still holding the KEY.)
11. To be allowed to pick up the BOX, change direction: turn LEFT from RIGHT to face UP.
12. DROP the KEY into the adjacent cell in front (cell (1,8) is empty).
13. Turn RIGHT (from UP to RIGHT) to face the BOX again.
14. Finally, PICKUP the BOX located at (2,9).

This sequence fulfills the objective while obeying all game rules.",0.95625,True,True
unlock_pickup,25,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>

Explanation:
1. Starting at [4,4] facing RIGHT, we first turn left twice to face LEFT.
2. We MOVE three times to travel from [4,4] → [4,3] → [4,2] → [4,1].
3. Then we turn RIGHT (from LEFT) so we face UP.
4. Two MOVEs send us from [4,1] → [3,1] → [2,1] with the KEY cell ([1,1]) directly ahead.
5. The PICKUP action collects the KEY without stepping into its cell.
6. Holding the KEY, we then turn RIGHT (from UP) to head RIGHT and MOVE three times through [2,2], [2,3], and [2,4].
7. We then turn RIGHT to face DOWN and MOVE to [3,4]. From [3,4], a LEFT turn makes us face RIGHT so that the DOOR in front ([3,5]) is reachable.
8. UNLOCK uses the KEY to open the door.
9. A MOVE places us onto the unlocked DOOR cell ([3,5]).
10. From there we MOVE right into [3,6], then turn LEFT (facing UP) and MOVE upward to [2,6]. Now the BOX at [1,6] is directly ahead.
11. A final PICKUP collects the BOX.

This sequence lets the agent obtain the BOX in the other room as required.",0.0,False,True
unlock_pickup,26,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Here's the reasoning:

1. Starting at (2,4) facing LEFT, you want to pick up the KEY at (4,4) from an adjacent cell.  
   • Action ""LEFT"": turning left (from LEFT) makes you face DOWN.  
   • ""MOVE"": move from (2,4) to (3,4).  
   • ""PICKUP"": with you facing DOWN, the cell in front (4,4) contains the KEY, so you pick it up.

2. Now holding the KEY (at (3,4) facing DOWN), you must unlock the door at (4,5). You need to be adjacent to the door with the door cell in front.  
   • ""MOVE"": from (3,4) (facing DOWN) move into (4,4).  
   • ""LEFT"": turning left from DOWN makes you face RIGHT.  
   • ""UNLOCK"": with the KEY in hand, unlock the door located at (4,5).

3. Since you cannot hold two objects and need to pick up the BOX next, you must drop the KEY in an allowable adjacent empty cell (not a door cell).  
   • ""LEFT"": from facing RIGHT, turning left makes you face UP.  
   • ""DROP"": drop the KEY into the cell in front (which is (3,4) and is empty).

4. Now with empty hands, you need to travel to the right room to pick up the BOX (located at (1,8)).  
   • ""RIGHT"": from (4,4) facing UP, turning right sets your orientation to RIGHT.  
   • ""MOVE"": move into the door’s cell (4,5).  
   • ""MOVE"": from (4,5) facing RIGHT, move to (4,6).

5. Navigate upward toward the BOX’s row:  
   • ""LEFT"": from facing RIGHT, turn left to face UP.  
   • ""MOVE"": from (4,6) to (3,6).  
   • ""MOVE"": from (3,6) to (2,6).  
   • ""MOVE"": from (2,6) to (1,6).

6. Finally, position yourself so that the BOX (at (1,8)) is directly in front:  
   • ""RIGHT"": from facing UP, turn right to face RIGHT.  
   • ""MOVE"": move from (1,6) to (1,7).  
   • ""PICKUP"": from (1,7) facing RIGHT, pick up the BOX which is located at (1,8).

This action sequence meets all the constraints and achieves your objective.",0.94375,True,True
unlock_pickup,27,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""PICKUP""]
</actions>",0.9375,True,True
unlock_pickup,28,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Explanation:
1. Starting at [4,3] facing UP, the agent moves up twice reaching [2,3].
2. A LEFT turn sets the agent facing LEFT and a MOVE places it at [2,2] with the KEY at [2,1] directly ahead.
3. PICKUP retrieves the KEY.
4. A LEFT turn (from LEFT, turning left gives DOWN) sets the direction downward; a MOVE moves the agent to [3,2].
5. A second LEFT turn (from DOWN turning left gives RIGHT) orients the agent toward the door.
6. Two consecutive MOVEs bring the agent from [3,2] to [3,3] and then to [3,4] so that the DOOR at [3,5] is directly in front.
7. UNLOCK uses the KEY to unlock the door.
8. A MOVE goes through the unlocked door into the right room.
9. Four consecutive MOVEs navigate right from [3,5] to [3,9].
10. A RIGHT turn reorients the agent to face DOWN so that the BOX at [4,9] is directly in front.
11. Finally, PICKUP retrieves the BOX.

This sequence completes the objective of picking up the BOX located in a different room.",0.0,False,True
unlock_pickup,29,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,3,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Explanation:
1. Starting at (1,2) facing RIGHT, we first turn RIGHT so that we face DOWN.
2. MOVE from (1,2) to (2,2).
3. While at (2,2) and facing DOWN, the cell in front is (3,2) which contains the KEY. We PICKUP the KEY.
4. MOVE forward (facing DOWN) from (2,2) to (3,2).
5. TURN LEFT to face RIGHT.
6. MOVE from (3,2) to (3,3).
7. MOVE from (3,3) to (3,4).
8. TURN RIGHT to face DOWN.
9. MOVE from (3,4) to (4,4). (This cell is adjacent to the door.)
10. TURN LEFT to face RIGHT so the door at (4,5) is directly ahead.
11. UNLOCK the door (using the KEY) in the cell in front.
12. MOVE into the door cell at (4,5).
13. MOVE from (4,5) to (4,6) (entering the right room).
14. TURN LEFT to face UP.
15. MOVE from (4,6) to (3,6).
16. MOVE from (3,6) to (2,6). Now the BOX at (1,6) is directly in front.
17. PICKUP the BOX.
  
This sequence navigates the agent from the starting room, fetches the KEY, unlocks the door, enters the box’s room, and finally picks up the BOX.",0.0,False,True
unlock_pickup,30,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""PICKUP""]
</actions>",0.953125,True,True
unlock_pickup,31,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
  [""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,32,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
  [""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.921875,True,True
unlock_pickup,33,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""DROP"", ""LEFT"", ""PICKUP""]
</actions>

Explanation:
1. Starting at (2,3) facing RIGHT, we first turn ""LEFT"" to face UP. With the KEY at (1,3) directly ahead, we ""PICKUP"" it.
2. To head toward the door on the left room’s side (at (4,5)), we first reorient: from UP, two ""RIGHT"" turns change our direction to DOWN.
3. Two ""MOVE"" actions bring us from (2,3) to (3,3) then to (4,3). From there, a ""LEFT"" turn (while facing DOWN) makes us face RIGHT.
4. A ""MOVE"" puts us at (4,4) where the door is immediately to our right. We ""UNLOCK"" the door (using our held KEY) and then ""MOVE"" into the door cell (at (4,5)).
5. Now in the right room, a ""MOVE"" takes us to (4,6). To approach the BOX at (1,6), we ""LEFT"" turn from RIGHT to face UP and then execute three moves: (4,6)→(3,6) and (3,6)→(2,6). (Note: We avoid moving directly into the BOX’s cell since that cell is occupied.)
6. At (2,6) we are still holding the KEY and facing UP toward the BOX at (1,6). We cannot pick up the BOX while holding the KEY. So, we ""RIGHT"" turn (now facing RIGHT) to orient toward an empty cell at (2,7) and ""DROP"" the KEY there.
7. Finally, a ""LEFT"" turn reorients us to face UP again, putting the BOX in the cell directly ahead. We then ""PICKUP"" the BOX to complete our objective.
",0.94375,True,True
unlock_pickup,34,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's the reasoning behind the step‐by‐step plan:

1. Starting at (2,4) facing UP, the agent turns LEFT to face LEFT.
2. MOVE: from (2,4) to (2,3).
3. LEFT: from facing LEFT to face DOWN.
4. PICKUP: The key is in the cell (3,3) directly in front (down from (2,3)); pick it up.
5. LEFT: With the key in hand and facing DOWN, a left turn rotates the agent to face RIGHT.
6. MOVE: Step from (2,3) to (2,4) in the right direction.
7. LEFT: From facing RIGHT, turn left to face UP.
8. MOVE: From (2,4) move UP into (1,4). This positions the agent adjacent to the door.
9. RIGHT: From facing UP, turn right to face RIGHT. Now the DOOR at (1,5) is directly in front.
10. UNLOCK: With the key in hand, unlock the door at (1,5).
11. MOVE: Enter the door cell at (1,5).
12–13. To free the hands (since you already hold the key, and you can’t pick up the BOX while holding something), reposition so that an adjacent cell is free for dropping: from facing RIGHT, two LEFT turns change your orientation to face LEFT.
14. DROP: Drop the key into the empty cell (1,4).
15–16. Now, reorient for the journey into the right room: from facing LEFT, two RIGHT turns make you face RIGHT again.
17. MOVE: Proceed from (1,5) to (1,6).
18. RIGHT: Turn to face DOWN.
19. MOVE: Move down from (1,6) to (2,6).
20. MOVE: Move further down from (2,6) to (3,6).
21. PICKUP: With the BOX located at (4,6) directly in front (down from (3,6)), pick up the BOX.

This sequence guides the agent from the starting room to the key, uses the key to unlock the door, safely drops the key (so the agent’s hands are free), and then moves into the right room to pick up the BOX.",0.934375,True,True
unlock_pickup,35,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,36,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", ""KEY"", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions> 

Here's the reasoning:

1. From the starting cell at [2][3] and facing UP, turning RIGHT makes the cell at [2][4] (which contains the KEY) directly in front.
2. The PICKUP action collects the KEY from [2][4].
3. A MOVE brings you into [2][4].
4. You now face a DOOR at [2][5] (in the cell directly ahead). Using UNLOCK with the KEY unlocks that door.
5. To free your hands (since you can’t pick up the BOX while holding the KEY), a LEFT turn positions you so that the empty cell [1][4] is directly in front (and is not a DOOR).
6. The DROP action deposits the KEY there.
7. A RIGHT turn reorients you facing the door again.
8. A MOVE brings you into the now-unlocked door cell at [2][5].
9. Another MOVE places you at [2][6] with the BOX now immediately in front at [2][7].
10. Finally, the PICKUP action collects the BOX.

This sequence completes the objective.",0.96875,True,True
unlock_pickup,37,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.95,True,True
unlock_pickup,38,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.946875,True,True
unlock_pickup,39,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""DROP"", ""LEFT"", ""PICKUP""]
</actions>",0.940625,True,True
unlock_pickup,4,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Here's an explanation of the plan:

1. Starting at (4,1) facing UP, turn RIGHT so that you can travel along the row.
2. MOVE three times to go from (4,1) → (4,2) → (4,3) → (4,4).
3. Turn LEFT so you face UP. Now the cell in front (at (3,4)) contains the KEY.
4. PICKUP the KEY.
5. MOVE UP into (3,4). (Now the KEY is held and that cell is empty.)
6. Turn RIGHT to face the DOOR in the adjacent cell (3,5).
7. Use UNLOCK to open the DOOR.
8. Before going further, you cannot pick up the BOX while holding another object (the KEY). So turn LEFT twice to face LEFT (so that an adjacent empty cell is in front) and DROP the KEY into (3,3).
9. Now, from (3,4) (facing LEFT), reorient by turning RIGHT twice so that you face RIGHT (toward the door and the other room).
10. MOVE into the now-unlocked DOOR cell at (3,5) and then MOVE again into (3,6).
11. Turn LEFT so your front now looks UP toward the BOX cell (2,6).
12. Finally, PICKUP the BOX.

This sequence satisfies all the game rules and achieves the objective.",0.94375,True,True
unlock_pickup,40,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""DROP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.953125,True,True
unlock_pickup,41,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions> 

Here's the reasoning:

1. Starting at (3,2) facing LEFT, turn RIGHT so you face UP.
2. MOVE upward from (3,2) to (2,2).
3. From (2,2) facing UP, turn RIGHT to face RIGHT.
4. MOVE right from (2,2) to (2,3).
5. Now, with the key cell (2,4) directly in front, PICKUP the KEY.
6. With the KEY in hand at (2,3) facing RIGHT, MOVE to (2,4) (now empty).
7. Turn RIGHT (facing RIGHT → DOWN) to head toward the door.
8. MOVE downward from (2,4) to (3,4).
9. At (3,4) facing DOWN, turn LEFT so you face RIGHT (with the DOOR at (3,5) in front).
10. Execute UNLOCK to unlock the door.
11. MOVE into the door cell at (3,5).
12–15. Now in the second room facing RIGHT, perform four MOVEs: step through (3,6), (3,7), (3,8), and arrive at (3,9).
16. At (3,9) facing RIGHT, turn RIGHT to face DOWN (so that the BOX at (4,9) is directly in front).
17. Finally, PICKUP the BOX.

These steps successfully guide you from your starting cell to pick up the BOX located in the adjacent room.",0.0,False,True
unlock_pickup,42,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
  [""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions> 

Steps Explanation:
1. From (3,2) facing DOWN, ""LEFT"" turns you to face RIGHT.
2. ""MOVE"" takes you from (3,2) to (3,3). Now (3,4) is directly in front.
3. ""PICKUP"" collects the KEY from (3,4).
4. ""LEFT"" from facing RIGHT makes you face UP.
5.–6. Two ""MOVE"" actions take you upward from (3,3) to (2,3) then to (1,3).
7. ""RIGHT"" turns you to face RIGHT, so that (1,4) is in front.
8. ""MOVE"" takes you to (1,4); the door at (1,5) is now directly in front.
9. ""UNLOCK"" unlocks the DOOR using the KEY.
10.–11. Two ""MOVE"" actions carry you through the door: first into the door cell at (1,5) then into the right room at (1,6).
12. ""RIGHT"" turns you from facing RIGHT to facing DOWN.
13.–15. Three ""MOVE"" actions move you downward from (1,6) → (2,6) → (3,6) → (4,6).
16. ""LEFT"" turns you from facing DOWN to facing RIGHT.
17.–18. Two ""MOVE"" actions take you from (4,6) to (4,7) and then to (4,8) so that the BOX at (4,9) is directly ahead.
19. ""PICKUP"" collects the BOX from (4,9), thereby completing your objective.
",0.0,False,True
unlock_pickup,43,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Here's an explanation of the plan:

1. Starting at (4,1) facing DOWN, turn LEFT so you face RIGHT.
2. MOVE into (4,2).
3. Turn LEFT to face UP.
4. Now the cell in front, (3,2), holds the KEY—PICKUP the KEY.
5. With key in hand, MOVE from (4,2) to (3,2).
6. Turn RIGHT to face EAST.
7–8. MOVE twice from (3,2) via (3,3) to (3,4). (Now you’re one cell left of the door.)
9. With the door (at (3,5)) in front, UNLOCK it using the KEY.
10–11. To free your hand (since you can only carry one object and your goal is to pick up the BOX), turn LEFT twice so that you face LEFT. Then, 
12. DROP the KEY into the adjacent cell (3,3) (which is empty and valid for dropping).
13–14. Now turn around (two left turns) to face EAST again.
15. MOVE forward into the unlocked door cell (3,5).
16. MOVE further into the right room (to (3,6)).
17. Turn LEFT to face NORTH.
18–19. MOVE twice upward from (3,6) to reach (1,6).
20. Turn RIGHT so that you face EAST, and now the BOX at (1,7) is directly in front.
21. Finally, PICKUP the BOX.

This accomplishes the objective of retrieving the BOX located in the other room while obeying all movement and holding rules.",0.934375,True,True
unlock_pickup,44,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Let's explain the plan:

1. Starting at (4,4) facing LEFT, the agent moves left twice to reach (4,2).
2. Then, turning RIGHT changes the facing direction to UP. Moving forward puts the agent at (3,2), which is immediately below the KEY at (2,2). A PICKUP here collects the KEY.
3. With the KEY in hand, the agent turns RIGHT (now facing EAST) and moves from (3,2) to (3,3) and then to (3,4), aligning with the door in the cell (3,5). An UNLOCK action opens the door.
4. The agent then moves EAST into the now-unlocked door cell (3,5) and then further moves EAST to (3,6). 
5. Since the BOX is in the adjoining room at (1,9), the agent turns LEFT to face NORTH and moves to (2,6). Turning RIGHT to face EAST again, the agent moves through (2,7), (2,8), and (2,9).
6. Finally, turning LEFT (to face NORTH), the agent is positioned so that the BOX (at (1,9)) is directly in front and picks it up with the final PICKUP action.

This sequence fulfills the objective of retrieving the BOX located in a different room.",0.0,False,True
unlock_pickup,45,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.94375,True,True
unlock_pickup,46,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,47,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,48,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", ""AGENT"", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,49,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Explanation:
1–12: The agent starts at (1,4) facing UP. It turns left to face WEST and moves leftward and then down (by turning appropriately) to approach the KEY at (4,2) from the left (standing at (4,1) and then turning east). At that point, a PICKUP acquires the KEY.
13–20: With the KEY in hand, the agent retraces a path back up to (1,4). It turns north from (4,1) then east so that (1,5)—the DOOR in the wall dividing the rooms—is directly ahead.
21: The agent uses the KEY to UNLOCK the door.
22–24: Since the agent cannot hold two objects, it then reorients (turning left twice to face west) and DROPs the KEY in an empty adjacent cell ((1,3)).
25–27: The agent turns around (two RIGHT turns from west to east) and moves through the unlocked door by moving from (1,4) to (1,5).
28–34: Now in the box’s room, the agent moves east to (1,6), then turns (RIGHT to face south) and moves downward until it reaches (4,6). There it turns left so that (4,7)—which holds the BOX—is directly ahead, then uses PICKUP to grab the BOX.

This sequence meets all the movement and interaction rules.",0.89375,True,True
unlock_pickup,5,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions> 

Here's the reasoning:

1. Starting at (4,3) facing RIGHT, we first need to get the KEY from (3,2).  
   • ""LEFT"" turns our facing to UP.  
   • ""MOVE"" takes us from (4,3) to (3,3).  
   • ""LEFT"" turns us from UP to LEFT.  
   • ""PICKUP"" picks up the KEY located in the cell directly in front ((3,2)).

2. Now holding the KEY, we must go unlock the door at (3,5). We are at (3,3) facing LEFT, so we must change direction:  
   • ""RIGHT"" then ""RIGHT"" rotates us 180° (from LEFT → UP → RIGHT).  
   • ""MOVE"" advances us from (3,3) to (3,4).  
   • ""UNLOCK"" unlocks the door in the cell in front ((3,5)).

3. Before picking up the BOX later, we must not be holding anything. Since we don't need the KEY anymore, we drop it—but not into the door cell. At (3,4) facing RIGHT, the cell in front is (3,5) (a door) which is illegal for a drop.  
   • ""LEFT"" rotates us so we face UP.  
   • ""DROP"" now deposits the KEY into the cell (2,4) (an empty cell).

4. We now want to enter the right-hand room through the unlocked door and navigate to the BOX at (1,8). From (3,4) facing UP:  
   • ""RIGHT"" rotates us to face RIGHT.  
   • ""MOVE"" moves us into the door cell (3,5).  
   • ""MOVE"" advances us to (3,6) in the right room.

5. Navigating to the BOX:  
   • ""LEFT"" from (3,6) changes our facing from RIGHT to UP.  
   • Two ""MOVE"" actions take us upward from (3,6) to (2,6) then to (1,6).  
   • ""RIGHT"" rotates us to face RIGHT at (1,6).  
   • ""MOVE"" takes us from (1,6) to (1,7).

6. Finally, standing at (1,7) facing RIGHT, the BOX is directly ahead in (1,8):  
   • ""PICKUP"" grabs the BOX, meeting our objective.
   
This sequence gets you the KEY in the starting room, uses it to unlock the door to the BOX’s room, drops the KEY (so you can pick up the BOX), and then navigates to pick up the BOX.",0.940625,True,True
unlock_pickup,50,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Explanation:
1. Starting at (3,2) facing DOWN, the agent moves “MOVE” into (4,2).
2. “LEFT” turns the agent from DOWN to RIGHT so it faces the KEY at (4,3).
3. “PICKUP” grabs the KEY (since it is directly ahead at (4,3)).
4–5. Two “MOVE” actions take the agent from (4,2) → (4,3) → (4,4).
6. At (4,4) facing RIGHT, “UNLOCK” unlocks the door immediately ahead at (4,5).
7–8. To free up its hand (because it cannot pick up the BOX while holding the KEY), the agent turns “LEFT” (clockwise from RIGHT to UP) so that an adjacent cell ((3,4)) is available, then “DROP”s the KEY there.
9. “RIGHT” reorients the agent from UP back to RIGHT.
10. “MOVE” passes through the now-unlocked door from (4,4) to (4,5).
11–14. Four successive “MOVE” actions navigate through the right room: (4,5) → (4,6) → (4,7) → (4,8) → (4,9).
15. At (4,9) facing RIGHT, “LEFT” turns the agent to face UP.
16–17. Two “MOVE” actions move the agent upward from (4,9) to (3,9) then to (2,9).
18. Finally, “PICKUP” grabs the BOX directly in front (at (1,9)) without entering its cell.
  
This sequence completes the objective of retrieving the BOX from the other room.",0.94375,True,True
unlock_pickup,51,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
  [""RIGHT"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions> 

Explanation:
1. Starting at (2,1) facing UP, we first turn RIGHT twice to face DOWN so we can approach the KEY at (4,1). Then we MOVE from (2,1) to (3,1) and use PICKUP (while still at (3,1) facing DOWN) to grab the KEY from (4,1).
2. Now holding the KEY, we navigate from (3,1) to a cell adjacent to the DOOR at (2,5). We first turn LEFT (from DOWN) to face RIGHT, then MOVE three times: (3,1)→(3,2), (3,2)→(3,3), (3,3)→(3,4). Next, turning LEFT (from RIGHT to UP) and MOVE gives us (2,4), which is immediately to the left of the DOOR.
3. Facing UP at (2,4), we turn RIGHT to face the DOOR at (2,5) and use UNLOCK (with the KEY in hand) to unlock the door.
4. Since we cannot pick up the BOX while holding the KEY, we must DROP the KEY into an empty cell. From (2,4) facing RIGHT, we turn LEFT to face UP so that the cell (1,4) is in front (and empty) and then DROP the KEY.
5. Now, we head through the unlocked door. We turn RIGHT (from UP, now facing RIGHT) and MOVE from (2,4) into the door cell at (2,5).
6. Finally, to pick up the BOX located at (1,7) in the other room, we MOVE from (2,5) to (2,6) while facing RIGHT, then turn LEFT to face UP and MOVE to (1,6). After that, we turn RIGHT to face the BOX (since (1,7) is directly ahead) and finish by using PICKUP to get the BOX.

This complete sequence satisfies the objective of retrieving the BOX from the other room.",0.934375,True,True
unlock_pickup,52,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,53,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Let's briefly explain the plan:

1. Starting at (4,3) facing UP, the first MOVE goes to (3,3).  
2. A LEFT turn changes your direction to LEFT so that a subsequent MOVE from (3,3) takes you to (3,2).  
3. Facing LEFT at (3,2), the adjacent cell (3,1) holds the KEY so you PICKUP the KEY.  
4. Now you need to head toward the door (at (4,5) from the door’s adjacent cell) to unlock it. To get there, you reorient: two LEFT turns (from LEFT → DOWN → RIGHT) will have you face RIGHT.  
5. A MOVE from (3,2) facing RIGHT takes you back to (3,3).  
6. A RIGHT turn then changes your facing from RIGHT to DOWN, and a MOVE brings you to (4,3).  
7. A LEFT turn from DOWN makes you face RIGHT, and then a MOVE brings you to (4,4) which is immediately left of the DOOR at (4,5).  
8. With the KEY, you use UNLOCK while facing the DOOR.  
9. Since you cannot PICKUP the BOX while holding the KEY, you must DROP the KEY. However, you cannot drop it directly in front (which is the DOOR cell) because you can’t drop into a DOOR cell. So you turn LEFT to face UP, where (3,4) is empty, and then drop the KEY there.  
10. With no object held, you reorient to face RIGHT (the door direction) by turning RIGHT.  
11. You then MOVE into the door cell and continue moving right through empty cells until you are adjacent to the BOX at (4,9).  
12. Finally, a PICKUP in front of you collects the BOX.

This sequence of actions satisfies all the game rules and accomplishes the objective.",0.9375,True,True
unlock_pickup,54,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,55,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions> 

Here's the reasoning:

1. You start at (2,2) facing UP. The KEY is at (3,1) in the left room.  
 • ""LEFT"": turn to face LEFT.  
 • ""MOVE"": move from (2,2) to (2,1).  
 • ""LEFT"": from facing LEFT, turning left makes you face DOWN.  
 • ""PICKUP"": with (3,1) directly in front, pick up the KEY.

2. With the KEY held and now at (2,1) facing DOWN, you navigate toward the door at (4,5) (which connects to the right room containing the BOX).  
 • ""MOVE"": go down from (2,1) to (3,1).  
 • ""LEFT"": from DOWN, turning left makes you face RIGHT.  
 • ""MOVE"": move from (3,1) to (3,2).  
 • ""MOVE"": move to (3,3).  
 • ""MOVE"": proceed to (3,4).  
 • ""RIGHT"": from facing RIGHT, a right turn makes you face DOWN, aiming to head to row 4.  
 • ""MOVE"": go from (3,4) to (4,4).  
 • ""LEFT"": from DOWN, turning left makes you face RIGHT—now the door at (4,5) is directly ahead.  
 • ""UNLOCK"": unlock the door (using the KEY since it’s held).

3. Now that the door is unlocked, you enter the right room to reach the BOX at (1,6).  
 • ""MOVE"": from (4,4) to (4,5) (the door cell).  
 • ""MOVE"": move from (4,5) to (4,6), fully entering the right room.  
 • ""LEFT"": from facing RIGHT, turning left sets you facing UP.  
 • ""MOVE"": go from (4,6) to (3,6).  
 • ""MOVE"": move from (3,6) to (2,6).  
 • ""PICKUP"": now, with the BOX at (1,6) directly in front, pick it up.

This sequence meets the objective of retrieving the BOX from the other room.",0.0,False,True
unlock_pickup,56,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.95,True,True
unlock_pickup,57,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""DROP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.946875,True,True
unlock_pickup,58,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,59,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

In this solution, the agent first turns right (facing DOWN) so it can move from its starting position at [1][1] to [2][1]. Then it turns left to face RIGHT, making the KEY at [2][2] directly in front. The agent picks up the KEY. Next, with the KEY in hand, the agent turns right (now facing DOWN) and moves to [3][1] and then to [4][1]. From there, a left turn faces the agent to the RIGHT. It moves right through cells [4][2], [4][3], and [4][4] so that the door at [4][5] is directly ahead. The agent uses UNLOCK (using the KEY) to open the door, moves into the door cell, and then continues moving right through [4][6], [4][7], [4][8]. Finally, with the BOX located at [4][9] immediately in front, the agent executes PICKUP to grab the BOX.",0.0,False,True
unlock_pickup,6,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""PICKUP""]
</actions>",0.94375,True,True
unlock_pickup,60,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.94375,True,True
unlock_pickup,61,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,62,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Let me explain the reasoning:

1. Starting at (4,1) facing LEFT, we first turn RIGHT so we face UP.
2. We MOVE to (3,1). Then we turn RIGHT so that we face RIGHT.
3. Two MOVEs bring us from (3,1) to (3,2) then (3,3). Now the cell to our right ((3,4)) holds the KEY.
4. We execute PICKUP to grab the KEY.
5. To head to the door in room1 (with the KEY in hand), we turn LEFT (from facing RIGHT, LEFT makes us face UP) and MOVE to (2,3).
6. Turning RIGHT (facing from UP to RIGHT) puts us in position so that a MOVE takes us from (2,3) to (2,4) with the door directly ahead at (2,5). 
7. We use UNLOCK to open that door while holding the KEY.
8. Now that the KEY has served its purpose (we only need it to unlock), and since we cannot pick up the BOX while holding something, we need to drop the KEY. At (2,4) facing RIGHT the drop cell (the one in front) would be (2,5)—but that’s the door cell (and dropping into a DOOR cell is not allowed). So instead, we turn LEFT (so we face UP) making the drop cell become (1,4), which is empty.
9. We perform DROP to leave the KEY behind.
10. Reorienting by turning RIGHT (so now we face RIGHT again), we MOVE into the door cell (2,5), now in room2.
11. In room2 we continue by moving from (2,5) to (2,6). Then we turn RIGHT to face DOWN.
12. Two MOVEs take us down from (2,6) to (3,6) and then to (4,6).
13. At (4,6) facing DOWN, we turn LEFT to face RIGHT.
14. Two MOVEs then bring us from (4,6) to (4,7) and then to (4,8). Here, the BOX is located immediately to our right at (4,9).
15. We finish by executing PICKUP to grab the BOX.

This sequence satisfies all the movement, door unlocking, and drop/pickup rules.",0.928125,True,True
unlock_pickup,63,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
  [""RIGHT"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>

Explanation:
1. ""RIGHT"" – Turn from DOWN to face WEST so that the KEY at [1,1] is directly ahead.
2. ""PICKUP"" – Pick up the KEY from [1,1].
3–4. ""LEFT"", ""LEFT"" – From facing WEST, two left turns reorient you to face EAST.
5–6. ""MOVE"", ""MOVE"" – Move eastward from [1,2] to [1,3] then to [1,4].
7. ""RIGHT"" – Turn to face SOUTH.
8. ""MOVE"" – Step down to [2,4], positioning yourself to access the DOOR.
9. ""LEFT"" – Turn to face EAST so that the DOOR at [2,5] is in front.
10. ""UNLOCK"" – Unlock the door at [2,5] using the KEY you hold.
11. ""MOVE"" – Enter the door cell at [2,5].
12. ""MOVE"" – Continue east into the connected room, arriving at [2,6].
13. ""LEFT"" – Turn to face NORTH so the BOX at [1,6] is directly ahead.
14. ""PICKUP"" – Pick up the BOX from [1,6].
",0.0,False,True
unlock_pickup,64,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Here's the rationale:

1. Starting at (4,4) facing LEFT, the agent first moves one cell to the left (to (4,3)) with “MOVE.”
2. With a “RIGHT” turn from facing LEFT, the agent then faces UP.
3. Now, standing at (4,3) and facing UP, the cell immediately in front—(3,3)—contains the KEY, so “PICKUP” picks it up.
4. Next, the agent “MOVE”s from (4,3) into (3,3) (the cell where the KEY was, now empty since it has been picked up).
5. To head toward the door, the agent turns “RIGHT” so that from (3,3) it faces RIGHT.
6. “MOVE” takes the agent from (3,3) to (3,4). Now the cell directly in front, (3,5), is the DOOR.
7. Holding the KEY, the agent “UNLOCK”s the DOOR at (3,5).
8. The agent then turns “LEFT” (from RIGHT to UP) so an empty cell (2,4) is immediately in front.
9. With “DROP,” the agent disposes of the KEY in (2,4) to free up its hands.
10. After turning “RIGHT” (from UP to RIGHT) while remaining at (3,4), the door (now unlocked) is again in front.
11. “MOVE” carries the agent through the door cell (from (3,4) to (3,5)).
12. Finally, from (3,5) facing RIGHT, the agent executes “PICKUP” to grab the BOX in (3,6).

This sequence satisfies all constraints and successfully picks up the BOX located in the other room.",0.9625,True,True
unlock_pickup,65,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Here's the reasoning:

1. Starting at (4,1) facing RIGHT, we need the KEY (located at (3,1)) to unlock the door.  
 • ""LEFT"" turns the agent to face UP.  
 • ""PICKUP"" picks up the KEY from the cell in front (3,1).

2. Now still at (4,1) holding the KEY and facing UP, we head to the cell from which we can unlock the door. The door is at (1,5) (locked) and the agent must approach it from the room side. In this grid the room boundary is the vertical wall at column 5 (except at the door at row1). On the left (room1) a good spot to unlock is (1,4) facing RIGHT. We navigate there:
 • ""MOVE"" → (3,1)  
 • ""MOVE"" → (2,1)  
 • ""MOVE"" → (1,1)

3. At (1,1) facing UP, we need to head east:
 • ""RIGHT"" turns the agent to face RIGHT.  
 • ""MOVE"" → (1,2)  
 • ""MOVE"" → (1,3)  
 • ""MOVE"" → (1,4).

4. At (1,4) facing RIGHT, the door is directly ahead at (1,5):
 • ""UNLOCK"" uses the KEY (which must be held at unlocking) to unlock the door.

5. Now that the door is unlocked and no longer obstructs passage, we must free our hands in order to pick up the BOX later. (Rules require us not to hold an object when picking up another.) At (1,4) we choose to drop the KEY into an empty adjacent cell. Dropping is allowed only into an adjacent cell that is not a WALL, DOOR, or already occupied. Here, the cell below (2,4) is empty.
 • ""RIGHT"" turns from facing RIGHT to facing DOWN.  
 • ""DROP"" drops the KEY into (2,4).

6. We now need to go into the second room (room2) where the BOX is located at (2,6). To get there, we return to (1,4) facing RIGHT:
 • ""LEFT"" (from facing DOWN, a left turn makes the agent face RIGHT).

7. Now we cross through the door:
 • ""MOVE"" → (1,5) (this cell now is empty because the door was unlocked).  
 • ""MOVE"" → (1,6).

8. The BOX is at (2,6), so from (1,6) the agent should face DOWN:
 • ""RIGHT"" turns the agent from facing RIGHT to facing DOWN.

9. Finally, with the BOX directly in front at (2,6):
 • ""PICKUP"" picks up the BOX which is the game objective.

This action list completes the task according to the rules and objectives.",0.946875,True,True
unlock_pickup,66,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Explanation:
1. Starting at (2,2) facing UP, first turn RIGHT twice to face DOWN.
2. MOVE from (2,2) to (3,2).
3. Turn LEFT to face RIGHT.
4. MOVE from (3,2) to (3,3).
5. Turn RIGHT to face DOWN so that the cell (4,3) (which contains the KEY) is directly ahead.
6. PICKUP the KEY from (4,3) without entering that cell.
7. MOVE forward into (4,3) now that the KEY has been picked up (the KEY cell becomes empty).
8. Turn LEFT to face RIGHT; from here the cell (4,4) is accessible.
9. MOVE into (4,4), positioning yourself so that the DOOR cell (4,5) is directly in front.
10. UNLOCK the door at (4,5) using the KEY you’re holding.
11. To free your hands (since you can hold only one object), turn LEFT to face UP.
12. DROP the KEY into the adjacent cell (3,4), which is empty.
13. Turn RIGHT from UP to face RIGHT – you now stand at (4,4) with the door cell (4,5) ahead.
14. MOVE into the unlocked door cell (4,5).
15. Finally, with the BOX at (4,6) now in front, PICKUP the BOX.

This sequence navigates from your starting cell, retrieves the KEY, unlocks the door (dropping the KEY to free your hands), and then allows you to pick up the BOX in the adjacent room.",0.95,True,True
unlock_pickup,67,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,68,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""DROP"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Here's the reasoning:

1. Starting at (1,3) facing RIGHT, we need to get the KEY located at (3,3). Turning RIGHT makes you face DOWN. Then a MOVE puts you at (2,3) so that the cell immediately in front—(3,3)—holds the KEY. Issuing PICKUP collects the KEY.

2. Now that you have the KEY, head to the door at (2,5) to unlock it. From (2,3) (facing DOWN), turning LEFT makes you face RIGHT. A MOVE takes you to (2,4) with the door (at (2,5)) immediately in front. Using UNLOCK opens the door.

3. After unlocking, you MOVE forward from (2,4) into the now-empty door cell at (2,5) and MOVE again into (2,6).

4. Since you cannot pick up the BOX while still holding the KEY, you DROP the KEY. Facing RIGHT at (2,6), the cell in front (2,7) is empty, so DROP successfully releases the KEY.

5. Finally, navigate so the BOX (located at (4,6)) is in front of you. Turning RIGHT from facing RIGHT makes you face DOWN. A MOVE from (2,6) takes you to (3,6) and now the BOX in (4,6) is immediately ahead. Issuing PICKUP collects the BOX, which completes the objective.
",0.9625,True,True
unlock_pickup,69,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", ""AGENT"", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,7,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's the reasoning:

1. Starting at (2,1) facing DOWN.
2. ""MOVE"": Advances to (3,1) (still facing DOWN).
3. ""LEFT"": Turn left from DOWN to face RIGHT.
4. ""MOVE"": Advance to (3,2) (facing RIGHT). Now the KEY at (4,2) is directly below.
5. ""RIGHT"": Turn right from RIGHT to face DOWN.
6. ""PICKUP"": With the KEY in the cell in front (at (4,2)), pick it up.
7. With the KEY held and still at (3,2) but facing DOWN, we need to go to the door. In the left room the door at (4,5) is best approached from (4,4) while facing RIGHT.
8. ""LEFT"": Turn left from DOWN to face RIGHT.
9. ""MOVE"": From (3,2) move to (3,3) (facing RIGHT).
10. ""MOVE"": From (3,3) move to (3,4) (facing RIGHT).
11. ""RIGHT"": Turn right from RIGHT to face DOWN.
12. ""MOVE"": From (3,4) move down to (4,4) (facing DOWN).
13. ""LEFT"": Turn left from DOWN to face RIGHT so that, from (4,4), the cell in front is the DOOR at (4,5).
14. ""UNLOCK"": Unlock the door directly in front (since holding the KEY).
15. ""MOVE"": Move from (4,4) into the door cell at (4,5).
16. ""MOVE"": Continue moving from (4,5) to (4,6) (facing RIGHT).
17. ""PICKUP"": Finally, with the BOX (at (4,7)) directly in front, pick it up.

This sequence accomplishes the objective of eventually picking up the BOX located in a different room.",0.0,False,True
unlock_pickup,70,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Here's the reasoning:

1. Starting at (2,2) facing RIGHT, the key is at (3,4) but you cannot step into its cell. So first move to a cell adjacent to the key.
   - ""MOVE"": from (2,2) → (2,3)
   - ""MOVE"": from (2,3) → (2,4)

2. Now at (2,4) facing RIGHT, turn to face DOWN so that the key at (3,4) is directly ahead.
   - ""RIGHT"": now facing DOWN

3. Execute ""PICKUP"" to collect the KEY from the cell in front (3,4).

4. With the KEY held and still at (2,4), move into (3,4) so you can reach the door.
   - ""MOVE"": from (2,4) → (3,4)

5. The DOOR is located at (3,5). From (3,4) you must face RIGHT:
   - ""LEFT"": from DOWN, turning left results in facing RIGHT

6. With the door in front, use the KEY to unlock it.
   - ""UNLOCK"": unlocks the door at (3,5)

7. Since you cannot hold two objects at the same time (and the goal is to eventually pick up the BOX), you must drop the KEY. However, you can’t drop it directly into the door cell. So, reorient to drop it into an empty cell (here, (3,3) is empty).
   - ""LEFT"": from RIGHT → facing UP
   - ""LEFT"": from UP → facing LEFT
   - ""DROP"": drops the KEY into (3,3)

8. Now, reorient to go through the door. From (3,4) facing LEFT, turn right twice to face RIGHT.
   - ""RIGHT"": from LEFT → facing UP
   - ""RIGHT"": from UP → facing RIGHT

9. Proceed through the unlocked door:
   - ""MOVE"": from (3,4) → (3,5) (the door is unlocked so it’s passable)
   - ""MOVE"": from (3,5) → (3,6)

10. The BOX is in the adjacent cell (4,6). Turn to face DOWN:
    - ""RIGHT"": from RIGHT → facing DOWN

11. Finally, pick up the BOX:
    - ""PICKUP"": from (3,6) pick up the BOX at (4,6)

This sequence meets all the movement and interaction rules and achieves the objective of picking up the BOX.",0.95,True,True
unlock_pickup,71,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Here's the explanation of the plan:

1. Starting at [1,1] facing LEFT, we want to fetch the KEY at [2,3]. First, we turn LEFT so that from LEFT we face DOWN.
2. MOVE from [1,1] to [2,1].
3. Then turn LEFT (from DOWN) so we face RIGHT.
4. MOVE from [2,1] to [2,2]. Now the cell in front ([2,3]) holds the KEY.
5. PICKUP picks the KEY (remember you pick up objects from the cell directly ahead).
6. With the KEY in hand, we must move toward the door at [4,5]. From [2,2] facing RIGHT, we need to head downward. Turning RIGHT (from RIGHT to DOWN) reorients us.
7–8. MOVE twice to go from [2,2] → [3,2] → [4,2].
9. From [4,2] facing DOWN, turn LEFT to face RIGHT.
10–11. MOVE twice along row 4 from [4,2] to [4,3] then to [4,4]. Now the door is immediately to our right at [4,5].
12. UNLOCK the door using the KEY.
13–14. Since we can hold only one object and we need to pick up the BOX later, we must drop the KEY. We turn LEFT (from RIGHT to UP) so that the cell ahead ([3,4]) is a safe, empty cell, then DROP the KEY there.
15–16. To cross into the right room, turn RIGHT (from UP to RIGHT) and MOVE into the door’s cell at [4,5].
17. Now, still facing RIGHT in the right room, MOVE to [4,6].
18. Turn LEFT from RIGHT to face UP.
19–21. MOVE up three times: from [4,6] to [3,6], then to [2,6], and then to [1,6].
22. Turn RIGHT (from UP to RIGHT) so that the BOX’s cell ([1,8]) lies ahead.
23. MOVE from [1,6] to [1,7].
24. Finally, PICKUP the BOX from the cell at [1,8], accomplishing the mission.
  
This sequence of actions safely retrieves the KEY, unlocks the door, drops the KEY to free your hands, navigates to the other room, and picks up the BOX.",0.925,True,True
unlock_pickup,72,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,73,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""LEFT"",
 ""MOVE"",
 ""LEFT"",
 ""MOVE"", ""MOVE"",
 ""RIGHT"",
 ""MOVE"",
 ""PICKUP"",
 ""LEFT"", ""LEFT"",
 ""MOVE"", ""MOVE"",
 ""RIGHT"",
 ""MOVE"",
 ""LEFT"",
 ""UNLOCK"",
 ""MOVE"",
 ""MOVE"",
 ""LEFT"",
 ""MOVE"", ""MOVE"", ""MOVE"",
 ""RIGHT"",
 ""MOVE"", ""MOVE"",
 ""RIGHT"",
 ""DROP"",
 ""LEFT"",
 ""PICKUP""]
</actions> 

Explanation:
1. From the start at (1,4) facing RIGHT, we first turn twice (""LEFT"", ""LEFT"") so that we face LEFT. Then we MOVE from (1,4) to (1,3).  
2. To head toward the KEY at (3,1), we turn left (from LEFT, a left turn changes our heading to SOUTH) and MOVE twice – first to (2,3) then to (3,3).  
3. At (3,3) facing SOUTH, we turn right to face WEST and MOVE to (3,2). Now the KEY is immediately to our left (cell (3,1)), so we PICKUP the KEY.  
4. With the KEY in hand, we need to get to the door at (4,5). At (3,2) facing WEST, we turn twice (""LEFT"", ""LEFT"") to reverse our direction to EAST. Then we MOVE from (3,2) to (3,3) and again to (3,4).  
5. From (3,4) facing EAST, we turn RIGHT to face SOUTH and MOVE to (4,4). At (4,4) facing SOUTH, a LEFT turn makes us face EAST – directly toward the door at (4,5). We then UNLOCK the door and MOVE into the cell (4,5).  
6. Now in the second room (with the BOX at (1,9)), we must travel to a spot from which we can pick the BOX. From (4,5) still facing EAST, we MOVE to (4,6). Then we turn LEFT (facing NORTH) and MOVE upward three times: from (4,6) to (3,6), then to (2,6), and finally to (1,6).  
7. At (1,6) facing NORTH, a RIGHT turn directs us EAST. We then MOVE to (1,7) and again to (1,8).  
8. At (1,8) facing EAST, the BOX lies in the cell in front (at (1,9)); however, since we are still holding the KEY and cannot pick up another object, we must DROP the KEY first. We turn RIGHT (so that from EAST we face SOUTH) and perform DROP – this deposits the KEY into the adjacent cell (2,8), which is empty.  
9. Finally, a LEFT turn (from SOUTH back to EAST) sets us up to PICKUP the BOX from (1,9).

This 30‐action sequence satisfies the rules and leads the agent from its starting room to picking up the BOX in the other room.",0.90625,True,True
unlock_pickup,74,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
  [""RIGHT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""RIGHT"", ""DROP"", ""LEFT"", ""LEFT"", ""PICKUP""]
</actions>

Let me explain the plan:

1. At the start the AGENT is at (2,3) facing RIGHT. The KEY is located at (3,3), which is directly below. So first the agent turns RIGHT to face DOWN and then uses PICKUP to grab the KEY without moving into that cell (since objects block movement).

2. Now holding the KEY, the agent needs to approach the door at (1,5) (which connects the two rooms). The agent navigates from (2,3) to (1,4) by first turning LEFT (from DOWN to RIGHT), moving to (2,4), then turning LEFT again to face UP, and moving one cell up to (1,4). A subsequent RIGHT turn reorients the agent to face the door (cell (1,5)), allowing the use of UNLOCK.

3. After unlocking, the agent moves into the door cell and then steps further into the right-hand room. A MOVE puts it from (1,5) to (1,6).

4. To reach the BOX at (4,9), the agent turns RIGHT (changing direction to DOWN) and makes a series of MOVE actions: from (1,6) → (2,6) → (3,6) → (4,6). Then the agent turns LEFT to face RIGHT and moves two steps from (4,6) to (4,7) and then to (4,8).

5. At (4,8) facing RIGHT the BOX occupies the cell directly in front (4,9), but the agent is still holding the KEY (and can hold only one object at a time). So the agent needs to drop the KEY first. To drop it in an empty cell, the agent reorients so that the adjacent cell (back to (4,7), which is now empty) becomes its drop target. This is done by turning RIGHT twice (from facing RIGHT to facing LEFT) and then executing DROP.

6. Finally, the agent turns around again (with two LEFT turns) to face RIGHT so that (4,9) with the BOX is in front, and then uses PICKUP to grab the BOX.

This sequence of 23 actions accomplishes the objective.",0.928125,True,True
unlock_pickup,75,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.946875,True,True
unlock_pickup,76,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,77,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,78,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", ""KEY"", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,79,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions> 

Explanation:
1. The agent starts at (2,1) facing UP. To head toward the KEY (at [4,3]) in its room, the agent first turns twice (with ""LEFT"", ""LEFT"") to face DOWN, then “MOVE”s down from (2,1) to (3,1) and then to (4,1).  
2. It then turns ""LEFT"" (from DOWN, a left turn makes it face RIGHT) so that a later “MOVE” from (4,1) to (4,2) puts it adjacent (to the left) of the KEY at (4,3) and then uses ""PICKUP"" to get the KEY.  
3. Holding the KEY, the agent must unlock the door at (1,5)—the only passage to the room holding the BOX. From (4,2) (facing RIGHT) the agent turns ""LEFT"" (changing to UP) and then “MOVE”s upward three times (to (3,2), (2,2), then (1,2)). It then turns ""RIGHT"" (to face RIGHT) and “MOVE”s twice to reach (1,4), from where the door cell (1,5) is immediately ahead.  
4. The agent then uses ""UNLOCK"" to open the door while still holding the KEY. To be able to pick up the BOX later (since only one object may be held), the agent must drop the KEY into an empty cell. At (1,4) the agent turns twice (""LEFT"", ""LEFT"") to face LEFT so that the cell (1,3) is in front and empty, then ""DROP""s the KEY there.  
5. The agent then reorients by turning twice more (""LEFT"", ""LEFT"") so that it faces RIGHT again and “MOVE”s into the door cell at (1,5). From there it “MOVE”s right across (1,6), (1,7), (1,8), and (1,9) to enter the right room.  
6. At (1,9) facing RIGHT, the BOX is below at (2,9); a ""RIGHT"" turn changes the facing to DOWN and then ""PICKUP"" obtains the BOX.

This sequence meets the objective of navigating from the starting cell to the KEY, unlocking the door with the KEY, dropping it to free the agent’s hands, and finally picking up the BOX in the other room.",0.915625,True,True
unlock_pickup,8,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", ""KEY"", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,80,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
[""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,81,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Step-by-step explanation:

1. Starting at (4,2) facing RIGHT, turn LEFT so you face UP.
2. MOVE upward from (4,2) → (3,2).
3. MOVE upward from (3,2) → (2,2).
4. MOVE upward from (2,2) → (1,2).
5. TURN RIGHT so you face RIGHT. Now the cell in front, (1,3), contains the KEY.
6. Execute PICKUP to collect the KEY.
7. Now still at (1,2) and holding the KEY, MOVE to (1,3) (the cell you just cleared).
8. MOVE to (1,4). Standing at (1,4) facing RIGHT puts the door (at (1,5)) directly in front.
9. Execute UNLOCK to open the DOOR at (1,5) using the KEY.
10. MOVE into the door cell at (1,5) (now unlocked).
11. MOVE to (1,6) which is in the room where the BOX is located.
12. TURN RIGHT so that you face DOWN; the cell in front (2,6) now is where the BOX is.
13. Execute PICKUP to grab the BOX.

This sequence completes your objective of retrieving the BOX from the other room.",0.0,False,True
unlock_pickup,82,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>

Here's the reasoning:

1. Starting at (4,3) facing DOWN, we must first get the KEY located at (1,1). An effective approach is to approach (1,1) from below so that the KEY is in the cell immediately in front of us during a PICKUP. We plan to reach cell (2,1) and face NORTH (so that (1,1) is directly ahead). The first nine actions are:
 • ""RIGHT"" – from DOWN, turning RIGHT makes you face WEST.
 • ""MOVE"" – move from (4,3) to (4,2).
 • ""RIGHT"" – from WEST, turning RIGHT makes you face NORTH.
 • ""MOVE"" – move from (4,2) to (3,2).
 • ""MOVE"" – move from (3,2) to (2,2).
 • ""LEFT"" – from NORTH, turning LEFT makes you face WEST.
 • ""MOVE"" – move from (2,2) to (2,1).
 • ""RIGHT"" – from WEST, turning RIGHT makes you face NORTH.
 • ""PICKUP"" – now the KEY in cell (1,1) (directly in front) is picked up.

2. Now holding the KEY, you must cross into the right-side room to get the BOX (located at (2,9)). The door is at (3,5) (in the left room’s eastern wall). To approach the door from its left, we plan a route from (2,1) to cell (3,4) facing EAST. Then:
 • ""RIGHT"", ""RIGHT"" – from NORTH, two RIGHT turns put you facing SOUTH.
 • ""MOVE"" – from (2,1) to (3,1).
 • ""LEFT"" – from SOUTH, a LEFT turn makes you face EAST.
 • ""MOVE"" – from (3,1) to (3,2).
 • ""MOVE"" – from (3,2) to (3,3).
 • ""MOVE"" – from (3,3) to (3,4).
 • ""UNLOCK"" – with the KEY in hand, unlock the door in the cell (3,5) which is directly ahead.
 • ""MOVE"" – enter the door cell (3,5).
 • Then proceed EAST into the right room:
  – ""MOVE"" → from (3,5) to (3,6)
  – ""MOVE"" → from (3,6) to (3,7)
  – ""MOVE"" → from (3,7) to (3,8)
  – ""MOVE"" → from (3,8) you are still in the room.
 • Now to pick up the BOX, plan to approach it from its left. Being at (3,8) facing EAST, you need to go NORTH to get directly to a cell left of the BOX:
  – ""LEFT"" – from EAST, turning LEFT makes you face NORTH.
  – ""MOVE"" – move from (3,8) to (2,8).
  – ""RIGHT"" – from NORTH, turning RIGHT makes you face EAST.
 • ""PICKUP"" – with the BOX located in (2,9) (the cell immediately in front), you pick it up.

This complete series of 25 actions achieves the objective.

Enjoy your win!",0.0,False,True
unlock_pickup,83,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,84,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""RIGHT"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions>",0.0,False,True
unlock_pickup,85,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Here's the reasoning:

1. From the starting position at (4,1) facing UP, a ""MOVE"" takes you to (3,1). From there, the KEY is directly in front at (2,1).  
2. ""PICKUP"" collects the KEY.
3. Now, to head toward the door (located at (3,5) in the wall), turn ""RIGHT"" so you face east.
4.–6. Three ""MOVE"" actions take you from (3,1) to (3,2), then (3,3), and then (3,4). Now the DOOR cell at (3,5) is directly in front.
7. ""UNLOCK"" uses the KEY to unlock the door.
8. Before picking up the BOX later (remember, you cannot pick up the BOX while holding the KEY), you need to drop the KEY. However, you can only drop into the cell directly in front, so you turn ""LEFT"" (from facing RIGHT to facing UP) to face an empty adjacent cell.
9. ""DROP"" puts the KEY into (2,4), which is empty.
10. Turn ""RIGHT"" so you face east again; you need to go through the door so that you can reach the other room.
11. ""MOVE"" puts you into the door cell at (3,5).
12. ""MOVE"" from the door cell moves you to (3,6) in the box’s room.
13. To begin heading toward the box at (1,8), turn ""LEFT"" (now facing UP).
14.–15. Two ""MOVE"" actions take you upward from (3,6) to (2,6) and then (1,6).
16. Facing UP at (1,6), you need to turn ""RIGHT"" to face the BOX's direction.
17. ""MOVE"" takes you from (1,6) to (1,7) so that the BOX (at (1,8)) is immediately in front.
18. Finally, ""PICKUP"" collects the BOX.

This complete sequence respects all movement, pickup, and drop rules in the 2D grid environment.",0.94375,True,True
unlock_pickup,86,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
  [""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's a step‐by‐step explanation:

1. Starting at (4,2) facing RIGHT, we want the key located at (3,2). Since the key is one cell above, we first turn left to face UP.
2. With the key directly in front at (3,2), we issue a PICKUP to grab the KEY.
3. Now holding the KEY and still at (4,2) (facing UP), we turn RIGHT so that we face the door. The door is on the same row at (4,5) and our route is clear.
4. We MOVE from (4,2) to (4,3) then MOVE again to (4,4). Now, the door is in front (at (4,5)).
5. We UNLOCK the door while standing at (4,4) facing RIGHT.
6. After unlocking, we MOVE into the door cell at (4,5) and then MOVE once more to enter further into the adjacent (right) room—landing at (4,6).
7. At (4,6) and still facing RIGHT, we turn LEFT to face UP in order to head towards the BOX.
8. We MOVE upward from (4,6) to (3,6) and then to (2,6). Now, the BOX at (1,6) is directly in front of us.
9. Finally, we issue a PICKUP to collect the BOX.

This sequence results in the successful collection of the BOX in the other room.",0.0,False,True
unlock_pickup,87,direct,openai/o3-mini,LEFT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", ""BOX"", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
LEFT
</start_direction>
","<actions>
  [""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions> 

Here's the reasoning:

1. Starting at (4,1) facing LEFT, the agent turns RIGHT to face UP.
2. MOVE from (4,1) to (3,1).
3. MOVE from (3,1) to (2,1). Now the agent is one cell to the left of the KEY at (2,2).
4. TURN RIGHT (from UP to RIGHT) so the KEY is directly ahead.
5. PICKUP the KEY from (2,2).

Now holding the KEY, the agent must unlock the door at (3,5) to reach the BOX in the other room. The agent plans to approach the door from its left side:
6. TURN RIGHT from facing RIGHT to face DOWN.
7. MOVE down from (2,1) to (3,1).
8. TURN LEFT from DOWN to face RIGHT.
9-11. MOVE consecutively to go from (3,1) → (3,2) → (3,3) → (3,4). Now the DOOR cell (3,5) is directly ahead.
12. UNLOCK the door (using the KEY).
13. MOVE through the door: from (3,4) to (3,5). The door cell is now unlocked and considered empty.
14-16. MOVE right to progress inside the right room: from (3,5) → (3,6) → (3,7) → (3,8).
17. TURN LEFT from facing RIGHT to face UP.
18. MOVE up from (3,8) to (2,8). Now the BOX at (1,8) is directly in front.
19. PICKUP the BOX.

This list of actions successfully navigates through the grid, picks up the KEY in the starting (left) room, unlocks the door to transfer to the other (right) room, and finally picks up the BOX.",0.0,False,True
unlock_pickup,88,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""KEY"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions> 

Explanation:
1. ""MOVE"" – From the starting cell (3,3) facing RIGHT, move into (3,4).
2. ""LEFT"" – Turn to face UP so that the cell above (3,4) is (2,4) where the KEY is located.
3. ""PICKUP"" – While at (3,4) facing UP, pick up the KEY from cell (2,4).
4. ""RIGHT"" – Turn to face RIGHT so that the door at (3,5) (directly in front) can be unlocked.
5. ""UNLOCK"" – While facing RIGHT, unlock the door at (3,5) using the KEY you are holding.
6. ""LEFT"" – Turn left (now facing UP) to prepare to drop the KEY into an empty adjacent cell (cell (2,4) is a valid target).
7. ""DROP"" – Drop the KEY; you must relinquish it because you cannot pick up the BOX while carrying something.
8. ""RIGHT"" – Turn right (now facing RIGHT) to head back toward the door and move into the room with the BOX.
9. ""MOVE"" – Move from (3,4) to (3,5) (the unlocked door cell).
10. ""MOVE"" – Move to (3,6).
11. ""MOVE"" – Move to (3,7).
12. ""MOVE"" – Move to (3,8).
13. ""MOVE"" – Move to (3,9).
14. ""RIGHT"" – Turn right (from facing RIGHT to facing DOWN) so that the cell in front becomes (4,9) where the BOX is located.
15. ""PICKUP"" – Finally, pick up the BOX from cell (4,9).

This sequence satisfies the rules and accomplishes your goal.",0.953125,True,True
unlock_pickup,89,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>",0.946875,True,True
unlock_pickup,9,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""LEFT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP""]
</actions>

Explanation:
1. Starting at (1,4) facing UP, the first two ""LEFT"" actions make you face DOWN.
2. ""MOVE"" takes you from (1,4) to (2,4). Then a ""RIGHT"" turns you from DOWN to face WEST.
3. Two ""MOVE"" actions bring you west from (2,4) to (2,3) then to (2,2).
4. A ""LEFT"" (from WEST, left-turn gives SOUTH) sets your direction toward the KEY.
5. ""MOVE"" takes you from (2,2) to (3,2) so that the cell in front—(4,2)—contains the KEY.
6. ""PICKUP"" collects the KEY from (4,2).
7. Now, to head to the door at (2,5), you turn around: two ""LEFT"" actions (from SOUTH to NORTH) and then ""MOVE"" from (3,2) to (2,2).
8. A ""RIGHT"" turns you from NORTH to face EAST.
9. Two ""MOVE"" actions take you from (2,2) to (2,3) and then to (2,4). Facing EAST, the door at (2,5) is in front.
10. ""UNLOCK"" uses the KEY on the door.
11. Since you can hold only one object and your goal is to pick up the BOX later, you then ""RIGHT"" turn (from EAST to face SOUTH) and ""DROP"" the KEY into the adjacent empty cell at (3,4).
12. To approach the door again, you ""LEFT"" (from SOUTH to EAST) so that with ""MOVE"" you enter the door cell (2,5).
13. Four consecutive ""MOVE"" actions guide you east through (2,6), (2,7), (2,8), and finally (2,9).
14. A ""RIGHT"" turn from EAST makes you face SOUTH. ""MOVE"" takes you to (3,9) so that the BOX at (4,9) is directly in front.
15. Finally, ""PICKUP"" collects the BOX.
  
This sequence meets the objective of obtaining the BOX in the adjacent room.",0.0,False,True
unlock_pickup,90,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""PICKUP""]
</actions>

Explanation:
1. Starting at (1,2) facing RIGHT, the agent first turns RIGHT to face DOWN.
2. ""MOVE"" takes the agent from (1,2) to (2,2).
3. With the agent at (2,2) facing DOWN, the adjacent cell (3,2) holds the KEY, so ""PICKUP"" collects it.
4. To head toward the door, the agent (holding the KEY at (2,2) facing DOWN) turns LEFT to face RIGHT.
5.–6. Two ""MOVE"" actions take the agent from (2,2) to (2,3) and then to (2,4).
7. At (2,4) facing RIGHT, the agent turns RIGHT to face DOWN.
8. ""MOVE"" advances the agent to (3,4).
9. From (3,4) facing DOWN, a ""LEFT"" turn reorients the agent to face RIGHT—directly toward the door in (3,5).
10. ""UNLOCK"" uses the KEY to unlock the door located in (3,5).
11. ""MOVE"" brings the agent into the door cell at (3,5).
12.–13. Now, since the agent must be empty–handed before picking up the BOX (in (3,6)), it must deposit the KEY. From (3,5) facing RIGHT (with BOX blocking (3,6)), two ""LEFT"" turns reorient the agent to face LEFT (i.e. toward the empty cell at (3,4)).
14. ""DROP"" places the KEY into (3,4).
15.–16. Two ""RIGHT"" turns reorient the agent from facing LEFT back to facing RIGHT.
17. Finally, with (3,6) directly ahead where the BOX is located, ""PICKUP"" collects the BOX.

This sequence satisfies all the moved rules and completes the objective of picking up the BOX in the other room.",0.946875,True,True
unlock_pickup,91,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's the explanation of the plan:

1. The agent starts at (1,3) facing RIGHT. To get to the KEY at (4,1) (which is in the same room) the agent reorients downward and then travels to an adjacent cell so that the KEY is directly in front.
   - ""RIGHT"" turns the agent to face DOWN.
   - Three ""MOVE"" commands bring the agent from (1,3) to (4,3).
   - ""RIGHT"" reorients the agent to face WEST.
   - ""MOVE"" brings the agent to (4,2), which places the cell (4,1) (holding the KEY) directly in front.
   - ""PICKUP"" picks up the KEY.

2. Next, the agent must unlock the door to reach the other room containing the BOX. The door is at (3,5) in the wall between the two rooms; it must be unlocked using the KEY.
   - From (4,2) facing WEST, ""RIGHT"" turns the agent to face NORTH.
   - ""MOVE"" goes from (4,2) to (3,2).
   - ""RIGHT"" turns the agent to face EAST.
   - Two ""MOVE"" commands drive the agent from (3,2) to (3,3) and then to (3,4). Now the door (at (3,5)) is directly in front.
   - ""UNLOCK"" uses the KEY to unlock the door.
     
3. Since the agent cannot hold two items at once and the objective is to pick up the BOX, the agent must drop the KEY before picking up the BOX. In (3,4) the agent can drop the KEY into an adjacent empty cell.
   - ""LEFT"" turns the agent to face NORTH (so that the cell (2,4) is in front, which is empty).
   - ""DROP"" places the KEY at (2,4).
   - ""RIGHT"" reorients the agent to face EAST again.
   - ""MOVE"" steps the agent into the now-unlocked door cell at (3,5), entering the second room.

4. In room2, the BOX is at (1,9). The agent plans a route so that it comes to a cell from which the BOX (at (1,9)) is immediately in front when facing EAST.
   - ""MOVE"" from (3,5) to (3,6) while facing EAST.
   - ""LEFT"" turns the agent to face NORTH.
   - Two ""MOVE"" commands bring the agent from (3,6) to (2,6) then to (1,6).
   - ""RIGHT"" turns the agent to face EAST.
   - Two ""MOVE"" commands from (1,6) to (1,7) then to (1,8) position the agent so that the BOX at (1,9) is directly in front.
   - ""PICKUP"" picks up the BOX.

Thus, the full sequence of 25 actions achieves the objective.",0.921875,True,True
unlock_pickup,92,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""AGENT"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""DROP"", ""RIGHT"", ""PICKUP""]
</actions>

Here's the reasoning:

1. Start at [4,1] facing DOWN. To approach the KEY at [3,2] without entering its cell (since you must remain adjacent to pick it up), first turn left so you face RIGHT.
2. MOVE from [4,1] to [4,2].
3. From [4,2] (now facing RIGHT), turn left to face UP. Now the cell immediately in front ([3,2]) contains the KEY.
4. PICKUP the KEY.
5. With the KEY in hand and still at [4,2] (since PICKUP works on the adjacent cell), MOVE forward to [3,2].
6. MOVE forward to [2,2].
7. Facing UP at [2,2] isn’t ideal to head to the DOOR (which is to the east along row 2). So turn RIGHT to face EAST.
8. MOVE from [2,2] to [2,3].
9. MOVE from [2,3] to [2,4]. Now, from [2,4] facing EAST, the cell in front ([2,5]) is the DOOR.
10. UNLOCK the DOOR (using the KEY).
11. MOVE into the door cell at [2,5].
12. MOVE again to [2,6] bringing you deeper into the room containing the BOX.
13. At [2,6] facing EAST, the BOX is at [2,7] but you can’t pick it up while holding the KEY. So, turn LEFT (from EAST to NORTH).
14. DROP the KEY into the empty cell [1,6] (which is valid because it’s empty and adjacent).
15. Turn RIGHT to reorient from NORTH back to EAST.
16. Finally, with nothing in hand and facing EAST, PICKUP the BOX from [2,7].

This sequence fulfills the objective under the game rules.",0.95,True,True
unlock_pickup,93,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
  [""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""PICKUP""]
</actions> 

Explanation:
1. Starting at (1,4) facing UP, first turn LEFT to face left.
2. Two MOVEs take you from (1,4) to (1,3) then to (1,2).
3. A LEFT turn (while at (1,2) and facing left) turns you facing down so that the KEY at (2,2) is directly ahead.
4. The PICKUP collects the KEY from (2,2).
5. With the KEY in hand, three consecutive MOVEs while facing down take you from (1,2) to (2,2), then (3,2), then (4,2).
6. A LEFT turn (from down, which turns you to face right/east) prepares you to head to (4,4), which is immediately left of the DOOR.
7. Two MOVEs bring you from (4,2) to (4,3) and then to (4,4).
8. The UNLOCK action (while facing right) unlocks the DOOR at (4,5).
9. A MOVE takes you into the door cell at (4,5).
10. Another MOVE moves you further into the second room (from (4,5) to (4,6)).
11. A LEFT turn from facing right changes your heading to up.
12. A MOVE brings you to (3,6), positioning you such that the BOX at (2,6) is directly in front.
13. Finally, PICKUP collects the BOX.

This sequence satisfies all the constraints and gets you to pick up the BOX located in a different room.",0.0,False,True
unlock_pickup,94,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
[""LEFT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""PICKUP"", ""LEFT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""UNLOCK"", ""RIGHT"", ""DROP"", ""LEFT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's the explanation of the plan:

1. The agent begins at (1,3) facing UP. To pick up the KEY located at (4,1) (in the same room) without stepping into that cell (since entry into a cell with an object is not allowed), the agent must position itself so that the KEY’s cell is directly in front. The chosen approach is to approach from above – standing at (3,1) facing DOWN will put (4,1) in front.

2. Actions “LEFT”, then two “MOVE”s bring the agent from (1,3) to (1,1). Then another “LEFT” (turning to face DOWN) and two “MOVE”s bring the agent from (1,1) to (3,1). Now with the KEY directly ahead at (4,1), the agent uses “PICKUP” to grab it.

3. Next, the agent needs to unlock the door at (1,5) (the door between the rooms). The chosen path is to go from (3,1) in room 1 to (1,4), positioning the agent so that facing RIGHT puts the door cell (1,5) directly in front. To do so, the agent turns “LEFT” (from facing DOWN to RIGHT) and uses three “MOVE”s to go from (3,1) → (3,2) → (3,3) → (3,4). Then a “LEFT” turns the agent to face UP and two “MOVE”s bring the agent to (1,4).

4. At (1,4) facing UP, a “RIGHT” turn aligns the agent to face RIGHT into the door cell. The agent then uses “UNLOCK” to open the door (while still holding the KEY).

5. Since the agent cannot pick up another object while holding the KEY, it must drop the KEY first. However, dropping is restricted to an adjacent cell that is empty and not a DOOR. The agent turns “RIGHT” to face DOWN (making sure the cell in front, (2,4), is empty) and uses “DROP” to leave the KEY there.

6. Now free of any held object, the agent reorients by turning “LEFT” (from DOWN to RIGHT) and moves into the door cell at (1,5) with “MOVE” and then further into room 2 at (1,6) with a second “MOVE”.

7. In room 2 the BOX is located at (4,6). The agent needs to approach so that (4,6) is directly ahead. From (1,6) facing RIGHT, a “RIGHT” turn (facing DOWN) followed by two “MOVE”s bring the agent to (3,6). Finally, a “PICKUP” collects the BOX from (4,6).

This sequence achieves the objective of picking up the BOX in the other room while respecting all movement and object-handling rules.",0.921875,True,True
unlock_pickup,95,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", ""BOX"", """", """", ""WALL""]
[""WALL"", """", ""KEY"", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", ""AGENT"", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""MOVE"", ""RIGHT"", ""PICKUP""]
</actions> 

Here's a breakdown of the plan:

1. Starting at (4,4) facing DOWN, turn RIGHT so you face WEST.
2. MOVE to (4,3) then MOVE to (4,2).
3. From (4,2) (facing WEST), turn RIGHT to face NORTH.
4. MOVE to (3,2). Now, the KEY is in the cell immediately ahead (at (2,2)), so use PICKUP to grab the KEY.
5. Now still at (3,2) facing NORTH (and holding the KEY), MOVE forward to (2,2) to continue your journey.
6. Turn RIGHT (facing EAST) then MOVE to (2,3) and MOVE to (2,4). Now you’re adjacent to the DOOR at (2,5) (which is directly ahead).
7. Use UNLOCK (with the KEY in hand) to unlock the door.
8. Before picking up the BOX later, you must drop the KEY. Turn LEFT to face NORTH; the cell immediately ahead ((1,4)) is empty, so use DROP.
9. Now turn RIGHT (facing EAST) to face the door again and MOVE into the door cell at (2,5).
10. MOVE to (2,6). 
11. Turn LEFT (to face NORTH) and MOVE to (1,6).
12. Turn RIGHT (to face EAST). Now the BOX (located at (1,7)) is directly in front. Use PICKUP to grab the BOX.

This sequence ensures that you first retrieve the KEY, use it to unlock the door, drop it (so that you can pick up the BOX, since you may only hold one item at a time), and finally get the BOX from the other room.",0.9375,True,True
unlock_pickup,96,direct,openai/o3-mini,UP,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
UP
</start_direction>
","<actions>
    [""RIGHT"", ""MOVE"", ""PICKUP"", ""MOVE"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""LEFT"", ""DROP"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>",0.940625,True,True
unlock_pickup,97,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", ""AGENT"", """", """", ""KEY"", ""DOOR"", """", """", """", ""BOX"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
[""MOVE"", ""MOVE"", ""PICKUP"", ""MOVE"", ""UNLOCK"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""MOVE"", ""MOVE"", ""MOVE"", ""MOVE"", ""PICKUP""]
</actions>

Here's the reasoning:

1. Starting at (1,1) facing RIGHT, the KEY is at (1,4). So first, move twice to go from (1,1) → (1,2) → (1,3). Now, with the agent facing RIGHT, the cell in front (1,4) contains the KEY.
2. Execute ""PICKUP"" to pick up the KEY.
3. Then, move forward (""MOVE"") to position (1,4) so the agent is adjacent to the DOOR at (1,5).
4. With the KEY in hand and door in front, ""UNLOCK"" the door.
5. The agent is still holding the KEY, but to pick up the BOX later the agent must not be holding anything. To deposit the KEY safely without blocking the door passage, the agent turns around. From facing RIGHT, two ""LEFT"" commands reorient the agent to face LEFT (so that the adjacent cell (1,3) is used).
6. ""DROP"" the KEY in (1,3) (an empty cell in the left room).
7. Now, the agent must head through the unlocked door to enter the box’s room. The agent reorients back to facing RIGHT by issuing two ""RIGHT"" turns.
8. ""MOVE"" brings the agent from (1,4) into the door cell (1,5).
9. Then, successive ""MOVE"" commands take the agent to (1,6), (1,7), and (1,8) so that the BOX at (1,9) is immediately in front.
10. Finally, ""PICKUP"" picks up the BOX.

This sequence meets all the rules of the environment.",0.953125,True,True
unlock_pickup,98,direct,openai/o3-mini,RIGHT,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", ""KEY"", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", ""AGENT"", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
RIGHT
</start_direction>
","<actions>
    [""LEFT"", ""MOVE"", ""LEFT"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""UNLOCK"", ""MOVE"", ""LEFT"", ""LEFT"", ""DROP"", ""RIGHT"", ""RIGHT"", ""PICKUP""]
</actions>

Explanation:
1. The agent begins at (4,2) facing RIGHT. The first step “LEFT” turns the agent to face UP.
2. “MOVE” moves the agent from (4,2) to (3,2).
3. “LEFT” then rotates the agent from UP to face LEFT so that the KEY (located at (3,1)) is directly ahead.
4. “PICKUP” picks up the KEY.
5. “RIGHT” rotates from LEFT to UP so the agent can head north.
6. “MOVE” moves the agent to (2,2).
7. “RIGHT” rotates from UP to face RIGHT.
8.–9. Two “MOVE” actions advance the agent from (2,2) to (2,3) and then to (2,4). The door is at (2,5) (directly to the RIGHT of (2,4)).
10. “UNLOCK” uses the KEY (which the agent is holding) to unlock the DOOR at (2,5).
11. “MOVE” moves the agent into the door cell (2,5) in the other room.
 
Important – the rules prevent picking up a new object while holding one. Thus before picking up the BOX (located at (2,6)), the agent must drop the KEY.
12.–13. Two “LEFT” actions reorient the agent from facing RIGHT to facing LEFT (via UP) so that the cell in front—(2,4)—is empty.
14. “DROP” drops the KEY into (2,4).
15.–16. Two “RIGHT” actions now reorient the agent from facing LEFT to facing RIGHT, so that the BOX (at (2,6)) is directly in front.
17. “PICKUP” then picks up the BOX.

This sequence safely collects the KEY to unlock the door, leaves the KEY behind (since only one object may be held at a time), enters the room with the BOX, and finally picks up the BOX.",0.946875,True,True
unlock_pickup,99,direct,openai/o3-mini,DOWN,"system: You are a helpful assistant.
user: 
You are a game-playing agent in a 2D grid-based environment. Your objective is to pick up a `BOX` that is located in a different room than your starting position.

### Environment Description:
- The grid is represented as a 2D array, with the top-left corner at `[0][0]`. Each cell can contain one of the following objects:
  - `WALL`, `DOOR`, `KEY`, `BOX`, `AGENT` (You), or an empty string (`""""`).
- You start in a specific cell facing one of four directions: `UP`, `DOWN`, `LEFT`, or `RIGHT` (this will be provided).
- Two rooms are separated by `WALL`s, with a single `DOOR` connecting them.

### Actions:
You can perform the following actions:
- `LEFT`: Turn 90° to the left.
- `RIGHT`: Turn 90° to the right.
- `MOVE`: Move one step forward in the direction you're facing.
- `PICKUP`: Pick up an object located in the cell *directly in front* of you.
- `DROP`: Drop the object you're holding into the cell *directly in front* of you.
- `UNLOCK`: Unlock the door located *directly in front* of you, if you are holding the `KEY`.

### Rules:
- You may only hold **one object at a time** (`KEY` or `BOX`).
- Before picking up a new object, you must `DROP` the one you’re holding into an **empty adjacent cell** (no `WALL`, `DOOR`, or object).
- You can only `PICKUP` or `UNLOCK` if:
  - The target cell is directly in front of you (i.e., one step in the direction you're facing).
  - You are adjacent to that cell.
- You cannot:
  - Enter a cell that contains any object unless it’s been picked up or is a now-empty `DOOR` cell.
  - Drop objects into non-empty cells or into a `WALL` or `DOOR` cell.
  - Pick up an object (e.g. `BOX`) when you are already holding one (e.g. `KEY`).

### Input:
You will be provided:
- The complete 2D grid as a list of lists (example below).
- Your starting facing direction.

### Output:
Your output should be a list of actions in the following format:
<actions>
    [""LEFT"", ""RIGHT"", ""MOVE"", ...]
</actions>
Make sure to use <actions> and </actions> XML tags for your output.

Below is a sample input grid and starting direction.

<grid>
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
[""WALL"", """", """", ""KEY"", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""WALL"", """", """", """", """", ""WALL""]
[""WALL"", """", """", ""AGENT"", """", ""WALL"", ""BOX"", """", """", """", ""WALL""]
[""WALL"", """", """", """", """", ""DOOR"", """", """", """", """", ""WALL""]
[""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL"", ""WALL""]
</grid>
<start_direction>
DOWN
</start_direction>
","<actions>
    [""LEFT"", ""LEFT"", ""MOVE"", ""PICKUP"", ""RIGHT"", ""MOVE"", ""RIGHT"", ""MOVE"", ""MOVE"", ""LEFT"", ""UNLOCK"", ""MOVE"", ""MOVE"", ""LEFT"", ""PICKUP""]
</actions>",0.0,False,True
